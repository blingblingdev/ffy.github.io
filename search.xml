<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用sdkmanager一键安装安卓编译环境]]></title>
    <url>%2Fposts%2F2019%2Finstall-android-build-environment%2F</url>
    <content type="text"><![CDATA[这个故事是这样开始的，在一个阳光明媚的下午，我被叫到了昏暗的会议室持续交付系统对接安卓和IOS发布的需求，为了尽量适应所有平台的编译，于是我就又一次开始了各种环境的部署之旅。遇事不决问谷歌，实在不行上Stack Overflow。可是官网已经没有搜索到的很多教程里提供的sdk地址，反而要求我下载Android Studio。我一台编译机装什么图形界面啊喂！于是就是开始了sdkmanager的踩坑之旅。我写脚本的水平还是比较菜的，所以为了不丢人现眼，自己写的一键安装脚本放在了文末，CentOS7测试通过，需要的可以直接拉到底部。 概述本文共分为三个主要部分，分别为安装仍然免费的JDK、安装sdkmanager以及sdk、ndk的安装。文中使用的环境为： * CentOS Linux release 7.5.1804 (Core) * jdk-8u191-linux-x64 * sdk-tools-linux-4333796 然后一如既往，提供官方网站的地址：JDK 8 官方网站：Java SE Development Kit 8 Downloads安卓开发者官方网站：Android Studio 安装JDK我们都知道，Oracle爸爸现在开始到处发“威胁邮件”收取使用费了，于是我们需要使用一个Oracle爸爸说还能免费使用的版本，据公司领导们决策，我们使用Java 8最后一个免费版本，即jdk-8u191。然而抠门的Oracle爸爸已经让我们拼了老命还要注册账号才能下载到这个版本，于是我花了几个小时刷了一遍他的下载路径，找到了直接可以下载的方法，本文中暂时不表，下次单独说。事实上，安装jdk非常简单，仅需执行以下命令即可： 12345echo "install jdk 8u191"wget -O /tmp/jdk-8u191-linux-x64.tar.gz http://javadl.oracle.com/webapps/download/AutoDL?BundleId=235704_2787e4a523244c269598db4e85c51e0ctar -xvf /tmp/jdk-8u191-linux-x64.tar.gz -C /vdb/echo 'export JAVA_HOME=/vdb/jdk1.8.0_191' &gt;&gt; /etc/profilesource /etc/profile 嗯，你们没猜错，最后的脚本就是把这些一段段拼起来。 安装sdkmanager接下来就是安装这个很坑的东西了，一开始sdkmanager是安装sdk时附带的一个工具，但是后来我直接安装sdk就变成了 deprecated。行吧，那我就装上sdkmanager先： 1234567echo "install sdkmanager"wget -O /tmp/sdk-tools-linux-4333796.zip https://dl.google.com/android/repository/sdk-tools-linux-4333796.zipmkdir -p /vdb/android-sdk-linuxunzip /tmp/sdk-tools-linux-4333796.zip -d /vdb/android-sdk-linux/echo 'export ANDROID_HOME=/vdb/android-sdk-linux' &gt;&gt; /etc/profileecho 'export PATH=$JAVA_HOME/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$PATH' &gt;&gt; /etc/profilesource /etc/profile 然后使用方法也很简单： 1sdkmanager "&#123;需要安装包的名字;版本&#125;" 安装安卓sdk和ndk很神奇的是，sdkmanager不能安装ndk，emmmm，可能因为不叫 sndkmanager ？？？ 安装sdk因为发布可能会涉及到各种版本，所以我是要安装所有的sdk以及相关其他依赖包，于是我安装时就写成了这样… 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122echo "install sdk"echo "you must manually input yes when you see license"read -p "--- Press any key to continue ---"sdkmanager \"add-ons;addon-google_apis-google-15" \"add-ons;addon-google_apis-google-16" \"add-ons;addon-google_apis-google-17" \"add-ons;addon-google_apis-google-18" \"add-ons;addon-google_apis-google-19" \"add-ons;addon-google_apis-google-21" \"add-ons;addon-google_apis-google-22" \"add-ons;addon-google_apis-google-23" \"add-ons;addon-google_apis-google-24" \"add-ons;addon-google_gdk-google-19" \"build-tools;19.1.0" \"build-tools;20.0.0" \"build-tools;21.1.2" \"build-tools;22.0.1" \"build-tools;23.0.1" \"build-tools;23.0.2" \"build-tools;23.0.3" \"build-tools;24.0.0" \"build-tools;24.0.1" \"build-tools;24.0.2" \"build-tools;24.0.3" \"build-tools;25.0.0" \"build-tools;25.0.1" \"build-tools;25.0.2" \"build-tools;25.0.3" \"build-tools;26.0.0" \"build-tools;26.0.1" \"build-tools;26.0.2" \"build-tools;26.0.3" \"build-tools;27.0.0" \"build-tools;27.0.1" \"build-tools;27.0.2" \"build-tools;27.0.3" \"build-tools;28.0.0" \"build-tools;28.0.0-rc1" \"build-tools;28.0.0-rc2" \"build-tools;28.0.1" \"build-tools;28.0.2" \"build-tools;28.0.3" \"build-tools;29.0.0-rc1" \"cmake;3.10.2.4988404" \"cmake;3.6.4111459" \"extras;android;gapid;1" \"extras;android;gapid;3" \"extras;android;m2repository" \"extras;google;auto" \"extras;google;google_play_services" \"extras;google;instantapps" \"extras;google;m2repository" \"extras;google;market_apk_expansion" \"extras;google;market_licensing" \"extras;google;simulators" \"extras;google;webdriver" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha2" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha3" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha4" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha5" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha6" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha7" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha8" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha9" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-beta1" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-beta2" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-beta3" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-beta4" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-beta5" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.1" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.2" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha2" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha3" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha4" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha5" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha6" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha7" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha8" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha9" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-beta1" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-beta2" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-beta3" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-beta4" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-beta5" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.1" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.2" \"lldb;2.0" \"lldb;2.1" \"lldb;2.2" \"lldb;2.3" \"lldb;3.0" \"lldb;3.1" \"ndk-bundle" \"patcher;v4" \"platform-tools" \"platforms;android-10" \"platforms;android-11" \"platforms;android-12" \"platforms;android-13" \"platforms;android-14" \"platforms;android-15" \"platforms;android-16" \"platforms;android-17" \"platforms;android-18" \"platforms;android-19" \"platforms;android-20" \"platforms;android-21" \"platforms;android-22" \"platforms;android-23" \"platforms;android-24" \"platforms;android-25" \"platforms;android-26" \"platforms;android-27" \"platforms;android-28" \"platforms;android-7" \"platforms;android-8" \"platforms;android-9" \"platforms;android-Q" \"tools" 请注意，这部分的安装需要手动确认License，大家可不要不小心错过了，否则会无法安装哦！ 安装ndk首先提供ndk的地址：ndk官方网站 我们可以在上面看到的很多的版本，请根据需要选择，我们需要的是ndk13，下文中也是下载安装的13哦！另外，请注意，貌似环境变量中同时只能设置一个ndk版本，所以请自行做好版本管理！ 我们使用以下命令下载并安装ndk-r13b: 1234567echo "install ndk"wget -O /tmp/android-ndk-r13b-linux-x86_64.zip https://dl.google.com/android/repository/android-ndk-r13b-linux-x86_64.zipmkdir -p /vdb/android-ndk-linuxunzip /tmp/android-ndk-r13b-linux-x86_64.zip -d /vdb/android-ndk-linux/echo 'export ANDROID_NDK_HOME=/usr/local/android-ndk-linux/android-ndk-r13b' &gt;&gt; /etc/profileecho 'export PATH=$ANDROID_NDK_HOME:$PATH' &gt;&gt; /etc/profilesource /etc/profile 完整shell文件主要的安装命令在上文中基本都写了，完整版的shell文件中添加了清理安装包的命令，不需要可以自行删除。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156#!/usr/bin/env bashecho "init android build environment"yum update -yyum install -y wget unzipecho "install jdk 8u191"wget -O /tmp/jdk-8u191-linux-x64.tar.gz http://javadl.oracle.com/webapps/download/AutoDL?BundleId=235704_2787e4a523244c269598db4e85c51e0ctar -xvf /tmp/jdk-8u191-linux-x64.tar.gz -C /vdb/echo 'export JAVA_HOME=/vdb/jdk1.8.0_191' &gt;&gt; /etc/profileecho "install sdkmanager"wget -O /tmp/sdk-tools-linux-4333796.zip https://dl.google.com/android/repository/sdk-tools-linux-4333796.zipmkdir -p /vdb/android-sdk-linuxunzip /tmp/sdk-tools-linux-4333796.zip -d /vdb/android-sdk-linux/echo 'export ANDROID_HOME=/vdb/android-sdk-linux' &gt;&gt; /etc/profileecho 'export PATH=$JAVA_HOME/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$PATH' &gt;&gt; /etc/profilesource /etc/profileecho "install sdk"echo "you must manually input yes when you see license"read -p "--- Press any key to continue ---"sdkmanager \"add-ons;addon-google_apis-google-15" \"add-ons;addon-google_apis-google-16" \"add-ons;addon-google_apis-google-17" \"add-ons;addon-google_apis-google-18" \"add-ons;addon-google_apis-google-19" \"add-ons;addon-google_apis-google-21" \"add-ons;addon-google_apis-google-22" \"add-ons;addon-google_apis-google-23" \"add-ons;addon-google_apis-google-24" \"add-ons;addon-google_gdk-google-19" \"build-tools;19.1.0" \"build-tools;20.0.0" \"build-tools;21.1.2" \"build-tools;22.0.1" \"build-tools;23.0.1" \"build-tools;23.0.2" \"build-tools;23.0.3" \"build-tools;24.0.0" \"build-tools;24.0.1" \"build-tools;24.0.2" \"build-tools;24.0.3" \"build-tools;25.0.0" \"build-tools;25.0.1" \"build-tools;25.0.2" \"build-tools;25.0.3" \"build-tools;26.0.0" \"build-tools;26.0.1" \"build-tools;26.0.2" \"build-tools;26.0.3" \"build-tools;27.0.0" \"build-tools;27.0.1" \"build-tools;27.0.2" \"build-tools;27.0.3" \"build-tools;28.0.0" \"build-tools;28.0.0-rc1" \"build-tools;28.0.0-rc2" \"build-tools;28.0.1" \"build-tools;28.0.2" \"build-tools;28.0.3" \"build-tools;29.0.0-rc1" \"cmake;3.10.2.4988404" \"cmake;3.6.4111459" \"extras;android;gapid;1" \"extras;android;gapid;3" \"extras;android;m2repository" \"extras;google;auto" \"extras;google;google_play_services" \"extras;google;instantapps" \"extras;google;m2repository" \"extras;google;market_apk_expansion" \"extras;google;market_licensing" \"extras;google;simulators" \"extras;google;webdriver" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha2" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha3" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha4" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha5" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha6" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha7" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha8" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha9" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-beta1" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-beta2" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-beta3" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-beta4" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-beta5" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.1" \"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.2" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha2" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha3" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha4" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha5" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha6" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha7" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha8" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha9" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-beta1" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-beta2" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-beta3" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-beta4" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-beta5" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.1" \"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.2" \"lldb;2.0" \"lldb;2.1" \"lldb;2.2" \"lldb;2.3" \"lldb;3.0" \"lldb;3.1" \"ndk-bundle" \"patcher;v4" \"platform-tools" \"platforms;android-10" \"platforms;android-11" \"platforms;android-12" \"platforms;android-13" \"platforms;android-14" \"platforms;android-15" \"platforms;android-16" \"platforms;android-17" \"platforms;android-18" \"platforms;android-19" \"platforms;android-20" \"platforms;android-21" \"platforms;android-22" \"platforms;android-23" \"platforms;android-24" \"platforms;android-25" \"platforms;android-26" \"platforms;android-27" \"platforms;android-28" \"platforms;android-7" \"platforms;android-8" \"platforms;android-9" \"platforms;android-Q" \"tools"echo "install ndk"wget -O /tmp/android-ndk-r13b-linux-x86_64.zip https://dl.google.com/android/repository/android-ndk-r13b-linux-x86_64.zipmkdir -p /vdb/android-ndk-linuxunzip /tmp/android-ndk-r13b-linux-x86_64.zip -d /vdb/android-ndk-linux/echo 'export ANDROID_NDK_HOME=/usr/local/android-ndk-linux/android-ndk-r13b' &gt;&gt; /etc/profileecho 'export PATH=$ANDROID_NDK_HOME:$PATH' &gt;&gt; /etc/profilesource /etc/profileecho "clean up"rm -rf /tmp/*echo "done!"read -p "--- Press any key to continue ---" 总结首先为自己好久没有写文感到愧疚一次；然后为自己写了这样一篇笔记版文字感到愧疚一次；希望以后能够赶紧把draft里面的文章都写完整，也希望赶紧把已经过时的文章更新一下。最后，还是感谢大家的关注和评论~撒花~✿✿ヽ(°▽°)ノ✿~]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>build</tag>
        <tag>devops</tag>
        <tag>sdk</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[教你顺滑升级6.x版本的NexT主题]]></title>
    <url>%2Fposts%2F2018%2Fhow-to-update-hexo-theme-next%2F</url>
    <content type="text"><![CDATA[因为之前有很长一段时间没有更新，所以博客使用的 NexT 主题已经从 6.3.0 更新到了 6.4.1。而作为一个新世纪的好青年，我们自然是要像早上八九点钟的太阳，时时刻刻对新鲜事物保持兴趣。于是我便积极地想要将主题升级到最新版本，过程也很简单，话不多说，请看全文٩(๑❛ᴗ❛๑)۶ 概述这篇文章主要说的是从 hexo-theme-next 6.x 版本升级到最新版本（文章发布时为6.4.1）的过程。如果你的 hexo-theme-next 版本处于 5.x 版本，请到这里查看官方文档→从 NexT v5.1.x 更新。官方文档中提到了使用 Hexo 数据文件特性 来解决更新时可能遇到的冲突错误，但是我在使用该方法时觉得不如使用 git 的某些功能来绕过这样的问题，直接解决更新时的冲突错误，平滑更新。所以与其说这篇文章在教大家如何升级 hexo-theme-next 版本，倒不如说在教大家如何使用 git 的某些功能。此处推荐大家安装 Visual Studio Code，这个工具能够非常方便地为大家提供代码冲突时的帮助。本文中升级 hexo-theme-next 版本时所使用到的环境和工具如下： * Windows 10 1803 * Visual Studio Code 1.27.2 (user setup) * node-v8.11.2-x64 * git version 2.17.1.windows.2 * hexo-v3.7.1 * NexT.Muse v6.3.0 * 善于观察的眼睛一双 重要提示！！！如果你对 Git 这个源代码管理工具不是很熟悉，或者对自己的操作心里没底：请将整个博客的目录备份！！！请将整个博客的目录备份！！！请将整个博客的目录备份！！！好的，让我们开始升级( ´-ω ･)▄︻┻┳══━一 升级NexT版本我们可以通过在博客根目录执行以下命令来升级到最新的 hexo-theme-next 版本： $ cd themes/next $ git pull 其中，第一条命令的功能是进入到 next 主题的目录中，因为我们是要升级这个主题的版本，接下来的操作都要在这个目录中完成。而第二条命令在这里是从最初克隆这个主题的仓库获取最新的数据并 自动尝试合并到当前所在的分支 。如果你在执行完这两条命令之后没有任何报错，那么恭喜你！！！你的更新已经成功了！！！然而，除非你特意将配置文件分离（实质上使用了 Hexo 数据文件特性），否则一般情况下，你都会遇到类似这样的情况： $ git pull remote: Counting objects: 273, done. remote: Compressing objects: 100% (43/43), done. remote: Total 273 (delta 127), reused 134 (delta 111), pack-reused 117 Receiving objects: 100% (273/273), 86.19 KiB | 125.00 KiB/s, done. Resolving deltas: 100% (167/167), completed with 67 local objects. From https://github.com/theme-next/hexo-theme-next ffde8fe..9ec34d3 master -&gt; origin/master * [new tag] v6.4.0 -&gt; v6.4.0 * [new tag] v6.4.1 -&gt; v6.4.1 error: Your local changes to the following files would be overwritten by merge: _config.yml Please commit your changes or stash them before you merge. Aborting Updating ffde8fe..9ec34d3 其中的报错的信息为： error: Your local changes to the following files would be overwritten by merge: _config.yml Please commit your changes or stash them before you merge. 这部分内容告诉我们，我们本地有一个文件 _config.yml 经过了修改，和远程仓库的内容不一样造成了冲突，如果强行合并，则本地文件会被覆盖。并且提示我们，让我们在合并之前先将修改提交（commit）或者储藏（stash）。如果你和我遇到了一样的情况，那么请继续阅读，这部分就是本文的重点，下一章节中，我将和大家分享我处理这个问题的详细流程，也即是我们升级的过程。 处理升级时的冲突在这一章节中，我们将要解决升级 NexT 主题时出现的冲突问题，并且实质性地完成版本升级的过程。我们需要多次使用 git 命令来进行一系列操作，并且需要打开冲突的文件进行目视处理。 将修改储藏到暂存区我们可以通过 git stash 这句命令将对主题文件的修改储存到本地的暂存区： $ git stash Saved working directory and index state WIP on master: ffde8fe Reverted #254 pull. 通过执行该命令的输出我们可以知道我们已经将修改储存到了本地的暂存区，接下来我们需要执行更新，请继续看下一章节。 执行更新我们现在需要再次使用 git pull 命令来获取最新的主题文件，别担心，这次不会再有上面的错误了： $ git pull Updating ffde8fe..9ec34d3 Fast-forward .github/CONTRIBUTING.md | 54 ++ README.md | 56 +- _config.yml | 56 +- ... source/js/src/scrollspy.js | 195 +++-- source/js/src/utils.js | 175 +++-- 66 files changed, 1158 insertions(+), 1941 deletions(-) delete mode 100644 layout/_partials/share/jiathis.swig ... delete mode 100644 source/css/_common/components/third-party/jiathis.styl 再次执行 git pull 命令后我们可以看到类似以上的输出，这样我们的主题就已经更新完成了。那么现在，我们需要将之前的配置恢复到新版本的主题当中，即从暂存区取出修改过的内容，请继续看下一章节。 从暂存区取出修改我们现在要通过执行 git stash pop 这句命令来从暂存区取出修改，我们可以得到类似以下的输出： $ git stash pop Auto-merging _config.yml On branch master Your branch is up to date with &apos;origin/master&apos;. Changes not staged for commit: (use &quot;git add &lt;file&gt;...&quot; to update what will be committed) (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory) modified: _config.yml no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;) Dropped refs/stash@{0} (3b73b30...4b77e8e) 其中，modified: _config.yml 这一行用红色标注了出来，说明这个文件在取出修改进行自动合并时被修改了。如果你看到了以上的输出，那么你的更新到此就已经成功啦~但如果你在执行 git stash pop 这句命令后，更加不幸地看到了输出是类似下方的内容： $ git stash pop Auto-merging _config.yml CONFLICT (content): Merge conflict in _config.yml 那么说明自动合并无法为你自动解决这些冲突，需要你手动进行处理。事到如今，我们距离成功已经是临门一脚，那么让我们趁热打铁，继续看下一章节。 解决冲突我们在主题文件夹下找到 _config.yml 这个文件，在其中我们可以非常容易地看到类似以下的不同： &lt;&lt;&lt;&lt;&lt;&lt;&lt; Updated upstream enable: false # When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version. appid: # your leancloud application appid appkey: # your leancloud application appkey notify: false # mail notifier , https://github.com/xCss/Valine/wiki verify: false # Verification code placeholder: Just go go # comment box placeholder avatar: mm # gravatar style guest_info: nick,mail,link # custom comment header pageSize: 10 # pagination size visitor: false # leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors&apos; for counter compatibility. Article reading statistic https://valine.js.org/visitor.html ======= enable: true appid: U7aB9evsRQXXqCqnPXG3cCjS-9Nh9j0Va # your leancloud application appid appkey: 38D4FiUTxAYvTNaoAuF9Rm8G # your leancloud application appkey notify: true # mail notifier , https://github.com/xCss/Valine/wiki verify: true # Verification code placeholder: ヾﾉ≧∀≦)o来啊，快活啊! # comment box placeholder avatar: hide # gravatar style guest_info: nick,mail,link # custom comment header pageSize: 10 # pagination size visitor: false # leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors&apos; for counter compatibility. Article reading statistic https://valine.js.org/visitor.html &gt;&gt;&gt;&gt;&gt;&gt;&gt; Stashed changes 在以等号分隔的上方是这次 git pull 拉取到的内容，而下方就是我们对该文件修改后的内容，很显然，这两部分内容因为不一样的特别多，自动合并无法确定哪些可以覆盖，所以产生了冲突。如果你使用了类似于 VS Code 这样的工具，一般你打开这个文件都会让你选择哪一部分进行保留，这也是推荐大家使用这样工具的原因。当然了，不使用这种工具，你也可以直接目视内容，然后删除不需要的内容，保留原本修改过的内容即可，修改后变回了这样： ... enable: true appid: U7aB9evsRQXXqCqnPXG3cCjS-9Nh9j0Va # your leancloud application appid appkey: 38D4FiUTxAYvTNaoAuF9Rm8G # your leancloud application appkey notify: true # mail notifier , https://github.com/xCss/Valine/wiki verify: true # Verification code placeholder: ヾﾉ≧∀≦)o来啊，快活啊! # comment box placeholder avatar: hide # gravatar style guest_info: nick,mail,link # custom comment header pageSize: 10 # pagination size visitor: false # leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors&apos; for counter compatibility. Article reading statistic https://valine.js.org/visitor.html ... 然后我们再次在主题根目录执行 git pull 这句命令，可以看到类似这样的输出： $ git pull Already up to date. 恭喜恭喜！我们的升级终于成功完成！ 总结总体来说，使用这样的命令能够让大家不需要重新整理配置，并且可以在升级时审阅你使用到特性的更新部分，并手动选择需要更新的内容。我觉得这样的更新方式更加能够让人清楚地知道自己到底更新了什么，做了什么。甚至，在更新的过程当中，会发现很多新的功能，能够进行添加。当然了，这篇文章中对 git 的使用只能算是皮毛而已，如果有什么不正确的，或者需要补充的，或者有什么疑问，请大家在下方的评论中给我指出呀~ PS. 这篇文章应该是 Hexo 系列的最后一篇文章了，我朋友问我为什么还不写站点 SEO 的文章。因为我觉得大家可以搜索到很多类似的相关文章，我对 SEO 的了解不是很全面，写出来的文章相比于他们就像洗文一样，所以打算在经过详细了解和尝试之后在后续推出一篇相关的文章。另外！！！！！！！我的站点已经出现在hexo-theme-next的 Github 主页 README 中 Live Preview 列表中啦！！！多多点击啦！✿✿ヽ(°▽°)ノ✿写完了文章，今天也是棒棒哒~(｡≧3≦)ﾉ⌒☆]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Git</tag>
        <tag>update</tag>
        <tag>hexo-theme-next</tag>
        <tag>theme</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用Live2D让看板喵入住你的Hexo博客吧\(^o^)/~]]></title>
    <url>%2Fposts%2F2018%2Fhow-to-play-with-live2d-on-hexo%2F</url>
    <content type="text"><![CDATA[这个神奇的看板生物是我在某一次自由地 surfing the internet 时碰巧发现的，当时看到了之后就瞬间萌化了(〃’▽’〃)当天晚上就马上为自己的博客加上了左下角这只~顺便还配好了CDN~那么现在，就让我们一起学猫叫，一起喵喵喵喵喵！在你面前撒个娇~哎呦喵喵喵喵喵ヽ(^ω^)ﾉ 概述首先要告诉大家的是，Hexo 配置这只 Live2D 非常简单，需要的时间也不长~然后，本文中配置 Live2D 看板娘所使用的环境如下： * Windows 10 1803 * node-v8.11.2-x64 * git version 2.17.1.windows.2 * hexo-v3.7.1 * NexT.Muse v6.4.1 * hexo-helper-live2d@3.1.0 * 看板娘一只 同时给出 hexo-helper-live2d 的 Github 链接：https://github.com/EYHN/hexo-helper-live2d另外，本文在电脑上浏览最佳！接下来！让我们开始吧！ 安装并配置 hexo-helper-live2d在这一章节完成后，就可以完成对 Live2D 的配置啦！请耐心看完，很快就搞定咯！ 安装 hexo-helper-live2d首先，在博客的根目录下执行下方命令，并可以得到类似下方的输出： $ npm install hexo-helper-live2d --save npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\fsevents): npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;}) + hexo-helper-live2d@3.1.0 added 6 packages from 6 contributors and audited 5818 packages in 22.674s found 0 vulnerabilities 非常简单，看到类似上方的输出之后，代表这个插件已经安装完成啦！ 配置 hexo-helper-live2d这部分是这篇文章的重点部分，完成这部分之后即可在自己的博客上看到你家的萌物啦！在开始配置之前，你需要先获取 Live2D 的资源，很多手游中都有 Live2D 资源可以获取的哦！具体获取方式此处不表，有需要的同学可以 Google 一哈٩(๑&gt;₃&lt;)۶当然啦！为了让大家能够快速配置好看板喵，自然是有其它方式的~你可以在 插件作者的博客 里挑选一只你喜欢的萌物，然后记录下它的名字~然后我们开始配置吧(￣▽￣)／ 安装你看中的萌物上方页面中提供的 Live2D 资源已经都被作者发布成 npm 包啦！我们只需要简单滴安装 live2d-widget-model-你选中的萌物名字 即可获得对应的 Live2D 资源，我们这里以 hijiki 这只黑喵为例~使用以下命令安装 live2d-widget-model-hijiki： $ npm install live2d-widget-model-hijiki --save npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\fsevents): npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;}) + live2d-widget-model-hijiki@1.0.5 added 1 package and audited 5819 packages in 9.782s found 0 vulnerabilities 如果你输入的命令得到了类似上方的输出，那么，hijiki 已经在等着你了哦！ 配置你看中的萌物在官方文档中可以很容易获取配置文件的样例，下方提供的配置可以让大家直接使用 hijiki (〃’▽’〃)首先，请大家打开博客根目录下的配置文件 _config.yml，在配置文件的最后添加以下内容： # Live2D ## https://github.com/EYHN/hexo-helper-live2d live2d: enable: true scriptFrom: jsdelivr # 默认 pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径) pluginJsPath: lib/ # 脚本文件相对与插件根目录路径 pluginModelPath: assets/ # 模型文件相对与插件根目录路径 # scriptFrom: jsdelivr # jsdelivr CDN # scriptFrom: unpkg # unpkg CDN # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中 debug: false # 调试, 是否在控制台输出日志 model: use: live2d-widget-model-hijiki # npm-module package name # use: hijiki # 博客根目录/live2d_models/ 下的目录名 # use: ./wives/hijiki # 相对于博客根目录的路径 # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-hijiki@1.0.5/assets/hijiki.model.json # 你的自定义 url scale: 1 hHeadPos: 0.5 vHeadPos: 0.618 display: superSample: 2 width: 125 height: 125 position: left hOffset: 30 vOffset: -20 mobile: show: false scale: 0.05 react: opacityDefault: 1 opacityOnHover: 0.2 然后执行命令 hexo clean &amp;&amp; hexo g &amp;&amp; hexo s，即可在本地4000端口看到这只萌物啦！效果图如下： 是不是超级简单！！！ 配置详解为了让大家能够更加自由地自定义自己看板喵的位置、大小、属性等内容，我在下方表格中列出了上方配置中所有项目的解释，并不是用到了所有配置。请注意！！！这里使用的 hexo-helper-live2d 版本是 3.1.0，如果你使用的不是这个版本，下方内容可能已经过期。这里给出作者的 API 文档，此文档应该是作者根据版本更新的：live2d-widget.js API 配置项 类型 属性 备注 enable Boolean true或者false 控制live2d插件是否生效。 scriptFrom String local或者jsdelivr或者unpkg l2dwidget.js使用的CDN地址，local表示使用本地地址。 pluginRootPath String 例如：live2dw/ 插件在站点上根目录的相对路径。 pluginJsPath String 例如：lib/ 脚本文件相对与插件根目录路径。 pluginModelPath String 例如：assets/ 模型文件相对与插件根目录路径。 tagMode Boolean true或者false 标签模式, 控制是否仅替换tag标签而非插入到所有页面中。 debug Boolean true或者false 调试模式, 控制是否在控制台输出日志。 model.use String 例如：live2d-widget-model-hijiki npm 模块包名（上文例中即使用的这个方式）。 model.use String 例如：hijiki 博客根目录/live2d_models/ 下的目录名。 model.use String 例如：./wives/hijiki 相对于博客根目录的路径。 model.use String 例如：https://域名/model.json 你自定义live2d模型json文件的url。 model.scale Number 可选值，默认值为 1 模型与canvas的缩放。 model.hHeadPos Number 可选值，默认值为 0.5 模型头部横坐标。 model.vHeadPos Number 可选值，默认值为 0.618 模型头部横坐标。 display.superSample Number 可选值，默认值为 2 超采样等级。 display.width Number 可选值，默认值为 150 canvas的长度。 display.height String 可选值，默认值为 300 canvas的高度。 display.position Number 可选值，默认值为 right 显示位置：左或右。 display.hOffset Number 可选值，默认值为 0 canvas水平偏移。 display.vOffset Number 可选值，默认值为 -20 canvas水平偏移。 mobile.show Boolean 可选值，默认值为 true 控制是否在移动设备上显示。 mobile.scale Number 可选值，默认值为 0.5 移动设备上的缩放。 react.opacityDefault Number 可选值，默认值为 0.7 默认透明度。 react.opacityOnHover Number 可选值，默认值为 0.2 鼠标移上透明度（此项貌似没有效果）。 总结好啦！今天的配置就到这里，大家有没有都把自己的看板喵领回家呀！٩(๑&gt;◡&lt;๑)۶这种新奇的小玩意儿以后可能还是会有的，但是为了保证自己一如既往喜欢的简约，可能以后就不会有更多花哨的东西出现了。好啦希望大家喜欢(:з」∠)另外，顺便告诉大家，我左下角这只的模型解包来自 药水制作师 手机游戏，版权归该官方所有。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>live2D</tag>
        <tag>喵星人</tag>
        <tag>猫</tag>
        <tag>看板娘</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学会写作和你的Hexo博客一起愉快地玩耍吧ヾ(◍°∇°◍)ﾉﾞ]]></title>
    <url>%2Fposts%2F2018%2Fhow-to-play-with-hexo%2F</url>
    <content type="text"><![CDATA[之前记录了如何搭建博客、给博客添加评论、如何加速博客访问，然而归根结底，博客还是要被用来写文章、做笔记使用的，这才是前面做的万事所需要的东风。我是在使用 Hexo 之后，才开始用 markdown 写文章做笔记的，那么这次就让我这只小菜鸟分享一下在使用 Hexo 写文的经验和技巧吧~让我们真正滴把博客玩起来！ 最近实在是笔头比较懒，距离写上一篇文章已经有两个多月的时间了QAQ我想着如果再不继续写得话，可能不久于将来这个博客又要荒废了…为了不再次重蹈覆辙！也为了我存了很多的想要和大家分享的内容！让我们高产起来吧！！！ 另外，有些小伙伴说想要看一些不一样的内容~这些都在规划中了哦~再有1-2篇关于 Hexo 的内容就要开始写其他杂七杂八的啦！ 概述在这篇文章当中，主要会和大家分享一下，我是如何新建文章、如何使用 markdown 的语法撰写文稿、如何在文章中插入图片、如何对图片进行归档、给文章打标签、为文章分类…其实这是一篇早就该发出来的文章，搭建好了博客就像造好了房子，如果不在里面写满精致的文章，就像住在没有装修的毛坯房里，让人很不舒服。那么我们接下来就要给大家介绍一下是如何装修房子的啦！首先，我有一栋这样子条件的毛坯房： * Windows 10 1803 * node-v8.11.2-x64 * git version 2.17.1.windows.2 * hexo-v3.7.1 * NexT.Muse v6.4.1 工欲善其事，必先利其器，要想房子精致美丽，也需要高级的材料，就先看看我用了哪些涂料吧： * Visual Studio Code # 编辑器 * markdownlint # 编辑器插件 * hexo-asset-image # 文章图片插件 * hexo-generator-tag # 标签插件 其中，Visual Studio Code（以下简称 VS Code）这款编辑器好像很火来着，大家应该都不是很陌生；markdownlint 是 VS Code 的一款扩展，直接搜索安装即可，另外两款是通过 npm 安装的 hexo 插件，详细的解释和使用就让我在接下里的文中说明吧~好的，那么接下来，我要开工啦！ 如何撰写一篇文章在这一章节中，我将从新建文章开始，介绍基本的 markdown 语法，让大家快速上手撰写文章~因为我使用的是 VS Code 编辑器，一些快捷键都将以之为准，如果大家使用的是别的编辑器 or 别的环境，请自行在脑海中转义一下哦！🧙‍ 新建一篇文章在撰写文章之前，我们得先有一张能让我们挥洒墨水的白纸，那么我们要怎么样才能获得这样一张白纸呢？那就要介绍一下 hexo 中新建文章、页面和草稿的一句命令： hexo new [layout] &lt;title&gt; 其中，layout可选的参数为：post、page和draft，我们要新建的是文章，所以要选择的 layout 是 post。然后，我们要按下 ctrl+` 这个快捷键，打开 VS Code内置的终端，像这样： 接下来，如果我们要新建一篇名为 my first post 的文章，那么我们在其中输入以下格式的命令，然后我们会获得新建文章后所创建 markdown 文件的本地路径： $ hexo new post &quot;my first post&quot; INFO Created: D:\myblog\source\_posts\my-first-post.md 从命令执行的输出来看，我们可以很轻松地找到这篇文章在本地的路径，打开后可以看到如下内容： 至此，我们的文章已经新建成功啦~请注意，这里生成文章的文件名可以在站点根目录的 _config.yml 中搜索 Writing 进行设置，具体设置方法以及草稿功能可以在官方文档：写作|Hexo中找到，此处不多加介绍。 markdown 的基本语法这部分将为大家介绍 markdown 中最基本的一些语法，帮助大家快速写出一篇文章。markdown 的语法大部分都非常简单，一般来说，稍微看一看都能迅速写出文章，但如果不了解一下细节处的规则，那么写出来的文章可能会变得乱七八糟。别问我是怎么知道的TAT至于绘制公式、流程图这些功能如果我以后用到的话，会提前在该文章前为大家详细介绍，今天嘛~还是尽快入住新房吧！ 标题语法标题的语法是这样的：第一级标题，开头就是一个 #第二级标题，开头就是两个 #第三级标题，开头就是三个 #…请注意，标题需要独自占据一行，并且在标题的文字和 # 之间需要有一个空格，不然可能会不被识别的哦！另外，在标题的这一行，上下都需要一个空行分割，虽然不是必要的，但某些很迷的时候会导致标题无法识别。如果使用了 markdownlint 插件，它也会勤奋地告诉大家哒！ # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 ...再往下可能就不被支持啦！ 同时，大家的主题一般都支持自动生成目录，就像本页的右边→如果大家想要这一类主题的目录生效，请务必使用 # 开头的标题为文章分节哦！ 标题语法演示这部分的演示大家就看上面这一堆加粗字并且看起来是标题的吧~同时他们还会显示在右边的目录中，他们就是最好的演示啦！ 引用语法大家写着写着文字，突然想要引用一句鲁迅先生的话，但又不是自己说的，于是，这个时候引用语法就派上了用场。引用需要的一个特殊符号是 &gt;，使用方法依旧很简单，只需要在引用的行首加上 &gt; 就可以啦！多行引用就在连续的每一行之前都加上 &gt; ~ヾ(◍°∇°◍)ﾉﾞ需要注意的是，引用也是以行为单位的，在行首加上 &gt; 那么整行都被引用啦~在行中加上这个符号是不会出现引用效果的哦！另外，引用行和下方的非引用行之间，如果没有一个空行分割，那么这个非引用行也会被当做引用行哦！ 单行引用： &gt; 悲剧将人生的有价值的东西毁灭给人看，喜剧将那无价值的撕破给人看。——鲁迅 多行引用方式一（推荐）： &gt; 悲剧将人生的有价值的东西毁灭给人看，喜剧将那无价值的撕破给人看。 &gt; ————鲁迅 多行引用方式二（不推荐）： &gt; 悲剧将人生的有价值的东西毁灭给人看， 喜剧将那无价值的撕破给人看。 ————鲁迅 # 这两行由于和上方引用行之间没有空行分隔，也会被当做引用行哦！ 另外，引用是支持嵌套结构的，只要在该行行首添加更多的 &gt; 数量，即可实现嵌套的功能： 引用的嵌套结构： &gt; 马云说：鲁迅先生曾经说过： &gt;&gt; “悲剧将人生的有价值的东西毁灭给人看，喜剧将那无价值的撕破给人看。” 这里不讨论这样的引用是否符合语文文法，仅作示例哦~ 引用语法演示单行引用： 悲剧将人生的有价值的东西毁灭给人看，喜剧将那无价值的撕破给人看。——鲁迅 多行引用： 悲剧将人生的有价值的东西毁灭给人看，喜剧将那无价值的撕破给人看。——鲁迅 引用的嵌套结构： 马云说：鲁迅先生曾经说过： “悲剧将人生的有价值的东西毁灭给人看，喜剧将那无价值的撕破给人看。” 代码标记语法感觉会来捣腾这样一个博客的，基本都会和程序员搭上点边？？？那么，在自己的文章中把代码高亮出来的这种操作一定也是非常常用啦！在这里，和大家分享三种标记代码的方式：行内代码标记、普通代码块标记和高亮代码块标记。 行内代码标记语法行内的标记语法 需要通过两个 ` 把需要被标记的内容包起来 ，上文中已经有很多用到的例子啦！如果我们要把行内的 hello world 标记出来，我们就需要这么做： 我要把这行里的 `hello world` 标记出来。 行内代码标记语法演示就像用引号一样使用啦！注意，这个符号就是键盘上在数字 1 左边的那个符号哦！演示：我要把这行里的 hello world 标记出来。 普通代码块标记语法我们只需要将需要标记的代码块选中，然后按下键盘上的 TAB 键，即可完成这段代码的标记.请注意，这样的代码块标记上方和下方都需要一个空行进行分隔，否则会出现各种谜一样的问题哦！TAB 键在键盘上的这个位置： 普通代码块标记语法演示其实在上方已经出现了很多类似的演示啦！为大家随便复制一段代码作为演示： var executeSync = function(){ var args = Array.prototype.slice.call(arguments); if (typeof args[0] === &apos;function&apos;){ args[0].apply(null, args.splice(1)); } }; 高亮代码块标记语法这种代码标记的方式可以显示行号，并且可以根据你指定的代码语言对代码进行高亮。为了使用这种标记方式，我们需要在代码块的上方和下方各添加一个以三个反引号开头的行，这个符号也是键盘上数字 1 左侧的符号。同样要注意的是，以三个反引号开头的行上方或者下方都需要一个空行进行分隔，否则会出现各种谜一样的问题哦！然后，在开头行的三个反引号后写上代码所使用的语言即可对代码块进行语法高亮： 这里有三个反引号 var executeSync = function(){ var args = Array.prototype.slice.call(arguments); if (typeof args[0] === &apos;function&apos;){ args[0].apply(null, args.splice(1)); } }; 这里有三个反引号 hexo + next 好像有个 bug，在代码块里面三个反引号死活打不出来…大家自行翻译一下~ 高亮代码块标记语法演示为了能让这代码块正常显示，真的是让我煞费苦心… 123456var executeSync = function()&#123; var args = Array.prototype.slice.call(arguments); if (typeof args[0] === 'function')&#123; args[0].apply(null, args.splice(1)); &#125;&#125;; 列表语法往往我们会需要列举一些东西，一二三四五六七什么的，那么我们可以直接使用 [数字].[空格][内容] 的方式来实现： 1. 你拍一 2. 我拍二 3. 她拍三 如果你不想为他们编号，直接使用 星号 代替[数字].即可： * 你拍一 * 我拍二 * 她拍三 列表语法演示有编号的列表： 你拍一 我拍二 她拍三 没有编号的列表： 你拍一 我拍二 她拍三 表格语法不得不说，markdown 中的表格语法就是一个坑啊！！！这里 推荐 大家使用 html 代码来生成表格…但介绍还是要介绍的…通过查阅Markdown 作者的文档，发现实际上并没有表格的语法，所以此段删除。 链接语法生成链接的 markdown 语法共有两种，一种是内联式，另一种是引用式。内联式的链接由连续的一对中括号和一对小括号组成，中括号里的内容是链接显示出来的文字，小括号里的内容是链接的地址，写法如下： [这是一个链接](https://11.tt) 而引用式的链接则由像这样连续的两对中括号： [这是一个链接][1] 以及像下方这样在文档任意位置的引用标签组成： [1]: https://11.tt 综合起来，引用式的写法如下： [这是一个链接][1] [1]: https://11.tt 此外，如果想要跳转到同一页面中的某个标题处，只需要将链接位置的内容修改为井号加上标题名称即可，像这样： [链接语法](#链接语法) 但是，同一页面中链接无法使用引用式！ 链接语法演示无论使用哪一种链接语法，出现的样子都是相同的：这是通往本站首页的链接这是通往本章头部的链接 插入图片语法向文中插入图片的方式和链接是十分类似的，只需要在链接语法前加上一个 ! 即可，其中，中括号中的内容是鼠标移到图片上时显示的描述。像这样： ![Markdown 创始人 John Gruber](John Gruber.jpg) 也可以是这样： ![Markdown 创始人 John Gruber][1] [1]: John Gruber.jpg 插入图片语法演示两种语法显示的图片都是一样的，照片上是 Markdown 的创始人 John Gruber： 图片插件为了更好地整理每一篇文章所使用的图片，我推荐大家使用文章开头提到的 hexo-asset-image 插件。安装方法为： $ npm install hexo-asset-image -save + hexo-asset-image@0.0.3 added 13 packages in 6.132s 当我们安装了这个插件后，每一次通过 hexo new post 命令新建文章时，在文章的相同目录都会建立一个与文章同名的文件夹。在这个文件夹中的图片相对于文章都是相同目录，可以直接使用图片名作为图片链接直接引用该图片。 生成并发布写好的文章其实这一步在我的第一篇文章里面已经做过详细介绍啦！→传送门←我们使用命令 hexo g 即可生成我们刚刚写好的文章然后通过命令 hexo d 即可发布到我们的 Coding 或者 Github 的 Pages 服务上去。这里就不详细描述了，忘记的同学可以通过上方的传送门穿越时空去复习哦！ 如何为文章添加分类这时候我们需要回到文章的头部，在生成完文章时，hexo 自动为我们的文章头部生成了如下的内容： --- title: my first post date: 2018-09-09 16:00:00 --- 其中，title 是文章的标题，date 是文章的建立时间，都是可以自定义的。那么，我们要如何为文章分类呢？类似的，我们只需要用到 categories 这个关键词，在冒号后自定义分类名即可，就像下方写的： --- title: my first post date: 2018-09-09 16:00:00 categories: Hexo --- 这样我就将 my first post 这篇文章添加到了 Hexo 这个分类当中去了。那么！！我们又要如何查看这些分类呢？这时候，我们要再次使用到 hexo new 这句命令了。不过和上方新建文章不同的是，这次我们要新建的是一个页面，那么我们要使用的命令是： $ hexo new page categories INFO Created: D:\myblog\source\categories\index.md 同样的，在建立页面完后，输出了页面的路径。这个页面拥有独立的文件夹，以及包含页面内容的 index.md 文件。这时候打开这个页面仍然只是一个普通的页面而已，那该如何让这个页面显示文章分类呢？我们打开刚刚新建的 index.md 文件可以看到如同一片普通文章开头的内容： --- title: categories date: 2018-09-10 21:17:08 --- 我们需要为它添加 type 关键字，让它知道自己到底是个什么身份（笑），就像这样： --- title: categories date: 2018-09-10 21:17:08 type: categories comments: false --- 其中，comments 关键字是用来设置该页面是否允许评论的，如果你启用了评论功能，那么可以自定义这些页面是否支持评论。然后，在站点的 _config.yml 文件中搜索 category_dir 可以找到如下内容： ... archive_dir: archives category_dir: categories code_dir: downloads/code ... 这里已经设置了文章分类文件夹的名称，如果你的文章分类页不叫 categories，那么你需要将其修改为对应的名称。这时候，再次执行 hexo g &amp;&amp; hexo s 命令，并打开你的页面，点击主题里文章分类的链接，即可看到文章的分类啦！ 如何为文章添加标签给文章添加标签的方式和添加分类类似，但一篇文章可以有多个标签。我们需要再次回到文章的头部，如果你已经为文章设置了分类，那么文章头部应该是类似这样的： --- title: my first post date: 2018-09-09 16:00:00 categories: Hexo --- 我们只需要向其中再添加一个关键词 tags，这个关键词可以是数组型的，就像这样： --- title: my first post date: 2018-09-09 16:00:00 categories: Hexo tags: [Hexo, writing, post, 博客, 写作] --- 这样我就为 my first post 这篇文章添加了多个标签。那么！！又来了我们又要如何查看这些标签呢？我们再次使用 hexo new 这句命令新建一个页面： $ hexo new page tags INFO Created: D:\myblog\source\tags\index.md 同样的，在建立页面完后，为 tags\index.md 文件头部添加 type 关键字： --- title: tags date: 2018-09-10 21:33:30 type: tags comments: false --- 同样可以在在站点的 _config.yml 文件中找到如下内容： ... public_dir: public tag_dir: tags archive_dir: archives ... 可是，当我们再次执行 hexo g &amp;&amp; hexo s 命令后，打开页面主题里文章标签的链接，却并没有看到我们想看到的样子？？？这时候，神奇的插件再次出马了，我们通过命令安装 hexo-generator-tag 插件： $ npm install hexo-generator-tag -save + hexo-generator-tag@0.2.0 updated 1 package in 3.599s 然后，我们再次执行 hexo g &amp;&amp; hexo s 命令，打开页面主题里文章标签的链接，看，是不是看到了好多的标签呀？！其中，hexo-generator-tag 插件能将我们文章中的标签进行统计，并将页面 type 为 tags 的设置为显示标签的页面。 总结好啦！今天的分享大会就开到这里！通过这些简单的语法，应该可以应对大部分简单的文章撰写需求啦！顺便，一如既往地，附上官方文档，其实就是作者的博客啦！Markdown 作者的文档顺带贴上中文版的地址：Markdown 中文文档 对了！！！你们有没有注意到左下角的神奇魔法呀！！！ 哈哈哈哈哈哈哈厉害吧！！！୧(๑•̀◡•́๑)૭剧透一下，下一篇文章就教大家如何添加这只哦！！！敬请期待！！]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>writing</tag>
        <tag>post</tag>
        <tag>博客</tag>
        <tag>写作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用CDN让你的Hexo博客拥有飞一般的体验]]></title>
    <url>%2Fposts%2F2018%2Fset-up-cdn-for-hexo%2F</url>
    <content type="text"><![CDATA[无论是使用 coding 还是 Github 来进行个人博客的托管都会有一个小小的问题，就是访问速度真的是好慢啊QAQ！而如果将很多的资源比如 css、js 以及图片文件使用 CDN 来进行分发，就能使网站的打开速度变得无比顺滑，体验飞一般的感觉！ 前言在阅读下文之前，如果你还不知道 CDN 是个什么东东，为了不大篇幅引用，请移步百度百科：CDN词条进行一些了解~本文仅仅是为了加速网站的访问，增强用户体验，并不是必须配置的哦！首先要说一下我这篇文章的适用人群。首先我们知道，很多的拥有 对象存储 服务的云服务商(如腾讯云)，都能够提供静态网站的托管，就类似 coding 和 Github，只是要将每一次生成的静态资源都上传到自己的存储桶中，然后使用 CDN 服务 将 对象存储 中的内容进行分发，这样就可以非常容易地完成个人博客的全站 CDN。然而！如果使用国内的 CDN 服务 来进行静态网站托管，域名必须要备案，而根据工业和信息化部关于规范互联网信息服务使用域名的通知，只有过审的域名后缀才可以备案(点此查看可以备案的域名后缀)，比如我的域名后缀 .tt 就不在此列😥。 那么就尴尬了😅…既然我的域名后缀无法备案，那么就没办法直接使用上述方法进行全站 CDN 了。于是，我使用了一种曲线救国的方式来完成这样的 操作 。 我备案了一个符合要求后缀的域名，然后将所有的 css、js 以及图片文件等放到该域名对应的存储桶下，然后在 Hexo 网站中调用这个资源域名下对应的静态资源以达到无备案启用 CDN 的目的。另外！对于我们的 Hexo 博客来说：首先，我们主要只需要将图片资源使用 CDN 来进行分发，如果进行全站 CDN(包括 css, js 等其他静态资源)，那么会有一笔额外的流量开支(虽然现在也没多少人访问QAQ，不过蚊子再小也是肉嘛！说不定有一天我火了呢！hhh)，况且，自己的 CDN 也未必有公共前端资源来得更快。然后， HTTP协议对同一个域名的同时下载线程数有限制。主要是为了优化下载速度，防止同一域名下下载线程数过多，导致下载速度变慢。各个浏览器都会遵守这个规定，但是限制的数目可能不一致。基于这个原因，可将资源部署于不同的域名，以达到最大化并发下载。最后，使用不同的域名可以实现静态资源和动态资源的分离，有利于 CDN 的部署，这段话是抄来改了改的QAQ(作者：ziwozizhan，原始链接：https://blog.csdn.net/ziwozizhan/article/details/53420501)，虽然我们的 Hexo 博客全是静态的…这些都是使用独立的域名进行静态资源部署的优点~那么！如果你有我这样的烦恼，或者你想要将静态资源使用不同的域名进行 CDN 部署，那么相信我！你找对了教程！(#^.^#)事不宜迟，我们赶紧开始吧！ 概述各位客官大家建党节快乐！咚咚咚 敲黑板！Miaia 老师的 Hexo 小课堂又开课啦！同样的，我们还是先说一下本文配置 CDN 所使用的环境： * Windows 10 1803 * hexo-v3.7.1 + NexT.Muse v6.3.0 * node-v8.11.2-x64 * git version 2.17.1.windows.2 * 还是小可爱一枚 在本文的配置中，我将腾讯云的对象存储和 CDN服务搭配使用以进行 CDN 的部署(主要是图片资源)。另外，为了节约部分流量，我分别使用了国内和国外的 前端公共静态库 对国内(coding)和国外(Github)不同代码托管库中部分 css、js 文件进行公共 CDN 加速，这部分在 NexT 主题中已经被完美滴独立开来，非常容易配置。 如果你使用的不是 NexT 主题，只要将用到的静态资源链接直接更换即可，同样非常方便。BTW，海外的静态资源(即Github上的静态资源)由于价格(腾讯云送了我贼多 CDN 流量)和服务商的选择问题(腾讯云海外加速公测申请还没通过)，我暂时没有进行 CDN 配置，等待以后配置了也会更新文章，但我估计和国内的没有多大区别hhh~好啦！介绍完了背景和使用的服务，让我们正式开课吧！ 基于腾讯云部署 CDN在这个章节当中，主要会给大家介绍基于腾讯云对象存储和 CDN 服务来对我们的 Hexo 博客进行 CDN 的部署。在继续之前有一点需要对大家进行提醒：本文中需要一个已经完成备案的域名，由于各地备案要求不一样，所需备案时间也不一样，但一般都至少需要三个工作日，为了不让大家配着配着扫兴，那么请注意，如果你还没有一个完成备案的域名，你可能不能在阅读本文的同时完成 CDN 的部署，你可以先行ICP备案，然后再来继续这篇文章的教程哟！(＾Ｕ＾)ノ~ＹＯ请大家提前注册好腾讯云的账号哈~放上官网链接：腾讯云(https://cloud.tencent.com/) 对象存储部署创建存储桶首先我们打开存储桶列表的页面：存储桶列表打开后我们可以看到这样的界面： 我们点击上图中右侧红框“创建存储桶”来进行创建，会得到一个框框，在框框离可以看到以下内容： 其中，用红框标注的部分需要被选择为“公有读私有写”，名称可以进行 自定义 ，所属地域为了方便我们自己使用，我们可以 选择离自己比较近的位置 ，填写完成后点击确定，至此，我们已经完成了存储桶的创建。 上传静态资源在完成存储桶创建后(即点击上图中确定后)，页面会自动跳转成下图中的页面，我们在跳转后点击下图红框中的“上传文件”： 在点击上图中的上传文件后，我们可以下图左侧的框框，与此同时，我们进入到博客根目录下的“public”文件夹，public 文件夹中的内容可能类似下图右侧资源管理器中的列表。注：public 文件夹中的内容是我们执行 hexo c &amp;&amp; hexo g 后获得的文件夹，即上传到 coding 和 Github上的文件夹。为了使教程受用范围更广，并且不造成混淆，以及方便下文中的配置，此处我将整个博客由 hexo 生成的所有内容(即整个 public 文件夹)全部上传到存储桶中，知道哪些需要哪些不需要的同学可以根据自己的实际情况进行筛选。我们将下图右侧资源管理器中所有内容全选，用鼠标拖到左侧框框中去，然后点击下方的“上传”按钮，即可进行整个博客资源的上传： 下图是点击“上传”按钮的状态，可以看到页面右上角有上传的进度，根据个人网速和存储桶位置快慢不同，但因为总量不会很大，所以一般都挺快的。 在上传完成后，我们可以看到类似下图这样的一个目录结构： 存储桶回源配置我们已经完成了静态资源的上传，接下来为了防止在资源尚未上传到存储桶时，造成页面请求的静态资源 404 ，我们需要为该存储桶配置一下回源功能。在上文中相同页面，点击下图红框中的“基础配置”标签： 将该标签页拖到最下方，我们可以看到下图红框中的“回源设置”： 点击上图中红框内的“编辑”按钮，按下图中配置，请注意，在红色箭头位置填写你自己博客的域名，然后点击保存： 然后我们的回源设置就已经配置完成了： 至此，我们对象存储部分已经全部配置完成了，仔细好学的你可能会发现这里有跨域访问CORS设置和防盗链等设置。恭喜你！都学会抢答啦！但是！本文是要进行 CDN 的部署，而在下文中，CDN 配置中也有相关内容的配置，并且优先级比存储桶的配置更高，所以偷个懒，索性在 CDN 部署中直接进行配置。不要心急哦！✿✿ヽ(°▽°)ノ✿ 继续继续！ CDN 服务部署哇！终于到本文的最核心部分了！虽然少了哪一部分都不能正常运作，但是到这里还是很激动哒！😸 添加 CDN 域名还是先直接进入到腾讯云 CDN 域名管理的页面：CDN 域名管理我们可以看到如下页面，点击下图红框中的“添加域名”： 然后我们就可以看到一个拥有“域名配置”和“加速服务配置”这两个标签卡的页面~ 其中红框中的部分需要我们进行修改。修改说明如下： 第一个红框中填写的域名必须已经备案！否则无法添加！并且该 CDN 域名是必要的！请务必注意！备案教程请点击此处 第二个红框下拉栏中请选择“对象存储（COS）” 第三个红框中请选择我们在“创建存储桶”章节中所创建存储桶的 存储桶访问域名 。 除了红框中的内容，其余所有部分保持默认即可，点击“提交”添加域名，如果填写的没有问题(主要是域名备案问题)，我们就可以看到如下弹出框： 至此，CDN 域名已经添加成功啦~🤩 配置 CDN 域名我们需要对该 CDN 域名进行一下简单的配置以完善整个功能。点击上图中的“更多配置”按钮，我们可以进入到以下页面： 在该页面顶部位置，我们可以看到“基本配置”、“访问控制”、“缓存控制”、“回源配置”、“安全配置”和“高级配置”共六个标签页。我们要对其中的“访问控制”、“回源配置”和“高级配置”三个标签页进行 很多项 的配置。因为配置项比较多，所以就不一一进行列举了，我分别将每个标签页中内容用红框标注出来，红框中的内容是已经配置完成的样子，并且我会在下方附上这样配置的说明。 访问控制首先，“访问控制”标签页，一共有三个选项需要修改，分别对应三个红框中的内容： 第一个红框中“过滤参数”，一般来说若资源URL中不同参数代表相同的内容，开启过滤参数，可以有效提升缓存命中率。但对我们的静态站点来说并不需要这个选项，开启反而可能造成问题，一般这里默认是关的，如果它不小心弹开了，把它关闭即可。 第二个红框中“防盗链配置”就是我们上文存储桶配置中并没有进行的操作，我们务必在这里进行白名单配置，否则如果被别人(一般也不会有…)盗链，那么会消耗你的 CDN 流量，这可都是白花花的银子呀~请在白名单中添加你的博客域名。 第三个红框中“IP访问限频配置”，这个是为了防止CC攻击，但我们的网站挂在 coding 和 Github 上应该没事？我也不是很懂，但不怕一万就怕万一，还是开启比较好。其中QPS需要稍微调大一点，否则如果你设置为10，而你一个页面请求的静态资源超过10个，那么多余的部分就会有 514 HTTP状态码，如果按照本文进行配置后，你发现你的网页显示不正常，而某些资源的状态码是514，那么很可能就是这里设置的原因。 回源配置然后是“回源配置”标签页，只有一个配置需要打开，如下图红框中所示： 其中，回源跟踪301/301的解释请见官方文档：什么是回源跟随301/302，反正挺高级的，感觉开了更好不开也没事O(∩_∩)O哈哈哈哈哈 高级配置最后到了“高级配置”标签页，这部分的每一个内容都需要配置，并且涉及到申请https证书的部分需要跳转到证书管理进行配置，所以这部分进行详细说明，内容较多但不复杂，请耐心往下看哦~(づ￣3￣)づ╭❤～我们先看一下配置之前这个标签页是什么样子的： 我们正式开始配置啦！ 第一个，“带宽封顶配置”，配置完如下图所示： 第一个的配置比较简单，只需要打开开关即可。打开这个配置的原因是，在某些特殊情况，比如DDoS攻击等，可以抵抗攻击并且减少费用，毕竟，走 CDN 无论流量还是带宽都是算钱的哦！ 第二个，“HTTPS配置”，因为我们源站已经开启了https，如果 CDN 没有开启https，那么访问站点时就会提示我们的部分内容不安全，所以我们必须在此配置https。首先，我们前往腾讯云SSL证书管理页面申请一个新的证书，打开页面后我们可以看到如下内容： 我们点击上图红框中的“申请证书”按钮，并选择下图中左侧的免费证书，点击“确定”： 我们进入到下一个页面，其中，通用名称需要填写添加 CDN 域名章节中添加的 CDN 域名，然后填写自己的电子邮箱，自定义备注名，其余位置保持默认即可。 填写完成后点击下一步，进入到“域名身份验证”页面，由于我使用的域名使用的是腾讯云的云解析服务，使用“自动DNS验证”即可，如果你没有使用腾讯云的云解析，请选择合适的验证方式，然后点击“确认申请”按钮，稍等片刻即可完成申请。 然后，我们回到“高级配置”标签页，点击下图红框中的“前往配置”按钮： 我们会进入到如下界面，按照图示中红框中标注的部分，选择前文添加的域名和申请的证书，然后点击“提交”即可完成https配置： 让我们再次回到“高级配置”标签页，找到下图所示的“HTTP2.0配置”，并打开“HTTP2.0”： 最后，同样是在“高级配置”标签页，找到下图所示的“HTTP Header配置”，点击“添加HTTP Header”按钮： 在弹出框中如下图所示填写，然后点击确定即可： 这个配置是因为我们的静态资源中有一些会访问外链，会造成一些跨域问题，必须要进行允许，更专业的解释在这里HTTP Header 配置。哇这么大一堆终于配置完了！！！！！٩(๑&gt;◡&lt;๑)۶&gt;)放一张配置完的“高级配置”标签页截图： 呀哈哈！终于腾讯云上的配置结束了，接下来，我们就要在本地对 Hexo 博客进行一定的配置来引用我们部署好的 CDN 服务。 配置博客使用 CDN首先我们需要思考一下，究竟有哪些文件是公共库中有的，而哪些是只能使用我们自有 CDN 的。我以自己为例： 第一，我原创文章中的图片都是我自己截取编辑的，肯定在这个世界上是独一无二的，公共库和图床中必定没有，所以要在自有 CDN 中引用； 第二，Next 主题中一些独特的 css、js 文件和一些控件、图标的图片文件，公共库中一般也是没有的，所以也要在自有 CDN 中引用； 第三，那些如 jQuery、velocity 乃至于我上一篇文章中 Valine 评论功能使用的 Valine.min.js 文件，这些都是非常多的人在用的，在公共库中都是有的，那么我们就可以将这部分引用公共库 CDN 中的静态文件。 所以这一章节分为两个部分。第一是将我们独一无二的静态资源，即上方第一第二，使用上文中我们部署的 CDN 服务。第二是将一些可以使用公共静态库 CDN 的静态资源，即上方第三，进行链接替换。终于可以看到效果了！你感到激动吗！！！ 配置使用自有 CDN事实上，我们使用的 Next 主题已经很好地为我们将以上的问题进行分离，方便使用 CDN 。将 Next 主题中一些独特的 css、js 文件和一些控件、图标的图片文件调用 CDN 非常简单，而自己图片资源需要修改一下我们安装的插件。首先，我们先打开主题的配置文件 _config.yml ，忘记了的同学，老师提醒你，是在根目录下 themes/next/_config.yml 哦！在配置文件中搜索：Assets ，可以看到如下内容： # Assets css: css js: js images: images 我们需要将其修改为： # Assets css: https://前文中添加的CDN域名/css js: https://前文中添加的CDN域名/js images: https://前文中添加的CDN域名/images 这样我们已经非常容易地将主题中的资源文件使用了自有 CDN 。然而，在写文章的大家基本应该都是使用了 hexo-asset-image 这个插件来添加图片对吧~如果不是，在博客根目录下打开 Git Bash ，输入 npm install hexo-asset-image --save 即可安装这个插件。要知道，这个插件是为我们生成图片链接的，在文章中我们通过 ![图片描述](图片文件名) 这样的方式来添加图片，而每一篇文章都有一个同名文件夹，该文件夹中存储着我们所有的图片，在 hexo g 时生成相应的图片链接。那么，我们就需要修改生成的文件，来使用我们的自有 CDN。首先，找到并打开博客根目录下 node_modules/hexo-asset-image/index.js 这个文件。然后搜索：$(this).attr(&#39;src&#39;, &#39;/&#39; + link + src); 这行内容，我们可以看到以下内容： ... if(linkArray[linkArray.length - 1] == srcArray[0]) srcArray.shift(); src = srcArray.join(&apos;/&apos;); $(this).attr(&apos;src&apos;, &apos;/&apos; + link + src); } }); data[key] = $.html(); ... 这部分代码就是生成图片链接的部分，我们将其修改为： ... if(linkArray[linkArray.length - 1] == srcArray[0]) srcArray.shift(); src = srcArray.join(&apos;/&apos;); $(this).attr(&apos;src&apos;, &apos;https://前文中添加的CDN域名/&apos; + link + src); } }); data[key] = $.html(); ... 保存文件，重新生成！哇哦！居然成功了诶！！！ 配置使用公共静态库我们使用的 Next 主题已经很好地为我们将以上的问题进行分离，同样方便使用公共静态库。首先，我们先打开主题的配置文件 _config.yml ，在配置文件中搜索：Script Vendors，搜索结果下面一大片全都是可以使用公共静态库的部分，直接在冒号后填写我们要替换的公共静态库链接即可。因为每个人使用的功能都不太一样，这里我就不一条一条填写了，为大家提供几个好用的我自己在用的前端公共静态库。国内篇适合 coding 配置，国外篇适合 Github 配置，特殊篇请看说明。 国内篇国内有很多很多的静态库，我看了不少评测，最终选择的是 BootCDN 这个前端公共库。官方网站地址是http://www.bootcdn.cn/，只需要在其中进行搜索，基本都是有的！ 国外篇国外的静态库也同样很多，但是很多就没有那么全，在这里我推荐 cdnjs 这个前端公共库。官方网站地址是https://cdnjs.com/，只需要在其中进行搜索，基本也都是有的！ 特殊篇搜索过的童鞋可能会发现，我们上文中使用到的 Valine 在上面两个库中居然暂时都没有？？？那么我们对 Valine 有一个特别的选择，这个公共库对于国内外访问都蛮快的，如果有什么上面两个没有，也可以到这里搜索一下。这家公共库名字叫 jsDelivr ，官网地址是https://www.jsdelivr.com/，同样拥有搜索功能，很容易就可以找到啦！ 总结告诉大家一下检查是否生效的方法，只需要在浏览器内右键-检查，选择 Network，然后刷新页面，查看下方静态资源的链接就可以啦！比如这样： 本文的战斗时间真的非常长…其实我当中跑出去旅游了一段时间hhh我每次在写文章的时候都会重新配置一遍，因为担心自己会写错误导大家…当然…很可能还会漏掉一点什么或者错掉一点什么…欢迎指出！感恩！！！哇呜！居然写了这么长的一篇文章qaq，真的好多图片啊！小伙伴们可以给我分享一下推荐一下给身边要建博客的小伙伴们吗！谢谢大家！！！♪(･ω･)ﾉ]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>cdn</tag>
        <tag>腾讯云</tag>
        <tag>cloud</tag>
        <tag>cos</tag>
        <tag>加速</tag>
        <tag>访问速度</tag>
        <tag>速度</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Valine.js评论系统让游客们到你的Hexo博客留个脚印吧]]></title>
    <url>%2Fposts%2F2018%2Fadd-valine-to-your-blog%2F</url>
    <content type="text"><![CDATA[哇真的超开心你们知道嘛！我的上一篇文章“[Hexo]基于Hexo+Coding+Github搭建个人博客的全过程”发布不到24个小时就有超过5位大佬来评论了！我之前那个lowlow的博客！一年多都没有人给我留个言评个论！真的超级开心！超级激动！感觉我写了好几天的文章得到了认可！所以！今天！我要教大家！如何给这个用了 Next 主题的 Hexo 博客添加评论功能！让广大群众！一起快乐！呀哈哈(玩塞尔达的应该知道这个梗吧嘻嘻)！本文在电脑上浏览体验最佳 我开启了邮件提醒评论回复，你们为什么不留下 邮箱地址 咱们做个深入交流呢？？？Miaia 概述首先说一下实验环境，啊呸，博客使用的环境，呃虽然觉得这个说法怪怪的…我文字功底还有待提高，先将就看嘻嘻！本文配置 Valine 功能所使用的环境如下： * Windows 10 1803 * node-v8.11.2-x64 * git version 2.17.1.windows.2 * hexo-v3.7.1 * NexT.Muse v6.3.0 * LeanCloud * 小可爱一枚 请注意，本文配置 Valine 是基于 Next 主题的，相对来说更简单一些，如果不是使用 Next 主题，这里提供Valine 官方文档给大家参阅，当然也欢迎大家留言交流啦！ 更新日志2018.9.21 添加免费版云引擎定时启动章节，解决 @Yanx 提出的某些评论收不到的问题。 LeanCloud 基本应用创建一如既往，我先放上官网链接 LeanCloud (https://leancloud.cn/)，我觉得找到官网是一个很好的习惯QAQ，毕竟他们要名声不会把坑爹的东西不负责任地放到网上给大家用…也能避免很多坑… 注册 LeanCloud哎呀省的绕路了，直接给大家注册地址吧，LeanCloud 注册链接。 我觉得吧，注册这件事情应该是不用多说的QAQ，就填好信息咱们接着往下看！ 创建应用在我们注册登陆之后我们可以看到下图中的这样一个界面，点击红框中的“创建应用”。 然后在弹出框中填写你应用的名字，使用免费的开发版即可~ 这样应用就创建完成啦！创建完成后我们可以看到这样的一个东东。 获取应用 Key我们点击应用名进入应用页面。然后在新出来的页面当中，依次点击最左侧红框中的“设置”和中间红框中的“应用 Key”，我们就可以看到这样的一个界面。 在最右侧的两个红框中，分别是我们刚刚创建应用的 App ID 和 App Key，我们将其复制下来以供接下来的配置使用。 配置安全域名现在这个状态，任何人都可以访问我们的资源，这样就有可能会导致资源的泄露，所以我们需要配置安全域名，只有在白名单中的域名才可以使用我们的资源。仍然是在刚才的设置页面，点击当中红框的“安全中心”，在最右侧红框“Web 安全域名”中根据提示填写我们站点的域名后点击保存即可。 配置 Next 主题中的 Valine 评论功能接下来我们就要把评论功能添加到博客中去啦！我们到 主题的配置文件 _config.yml 中搜索 # Valine. 这一段字符，我们可以看到这样的内容： # Valine. # You can get your appid and appkey from https://leancloud.cn # more info please open https://valine.js.org valine: enable: false appid: # your leancloud application appid appkey: # your leancloud application appkey notify: false # mail notifier , https://github.com/xCss/Valine/wiki verify: false # Verification code placeholder: Just go go # comment box placeholder avatar: mm # gravatar style guest_info: nick,mail,link # custom comment header pageSize: 10 # pagination size 每一个字段对应的功能如下： enable: false # 是否开启valine评论功能，可用参数：true, false appid: # 我们刚刚创建的leancloud应用获取的App ID appkey: # 我们刚刚创建的leancloud应用获取的App Key notify: false # 是否开启有新评论或回复是的邮件提醒，可用参数：true, false verify: false # 是否开启评论时需要输入验证码，可用参数：true, false placeholder: Just go go # 在评论框内显示的提示性文字 avatar: mm # 头像的类型 guest_info: nick,mail,link # 自定义可选让用户填写的个人信息，nick=昵称，mail=邮箱，link=用户主页 pageSize: 10 # 控制每页最多显示的评论条数 我们将刚刚获得的 App ID 和 App Key 分别填写到 appid 和 appkey 这两个字段的冒号后面。再次提醒！冒号后面需要有一个 *空格*并且将 enable 修改为 true，其他的参数可以根据实际情况自行修改，其中 notify 的配置我们在下一节介绍。在本节当中，填写完的配置应该是类似这样的： # Valine. # You can get your appid and appkey from https://leancloud.cn # more info please open https://valine.js.org valine: enable: true appid: U7aB9evsRQXXqCqnPXG3cCjS-9Nh9j0Va # your leancloud application appid appkey: 38D4FiUTxAYvTNaoAuF9Rm8G # your leancloud application appkey notify: false # mail notifier , https://github.com/xCss/Valine/wiki verify: true # Verification code placeholder: ヾﾉ≧∀≦)o来啊，快活啊! # comment box placeholder avatar: mm # gravatar style guest_info: nick,mail,link # custom comment header pageSize: 10 # pagination size 然后！刷新你文章的那个页面！！！你看！是不是评论功能 已经出现啦 ！！！ 配置 Valine 新回复的邮件提醒功能哎呀，其实我一开始没抱太大希望马上就能有大佬们回复我，偶然打开主页一看，发现评论数 4 ！！！我们何不让这样的快乐迈着小碎步跑到邮箱来敲门呢？！接下来，我使用了很强大的神器！Baidu！！搜索到了邮件提醒的方案。这个功能是 赵俊大大 基于 LeanCloud 云引擎实现的，这是原贴链接 Hexo 优化 — Valine 扩展之邮件通知。以下内容是我自己配置时的步骤，撰写时间是 2018.6.17，因为 赵俊大大 还在更新功能，所以以后配置过程可能会有变化。 添加代码库地址我们打开刚才我们在 LeanCloud 创建好的应用，然后从左往右依次点击下图中红框标记的按钮，进入到云引擎设置界面。然后我们在最右侧红框中填写 赵俊大大 所编写的 Valine-Admin 扩展的 Git 地址，填写完后别忘记点击保存哟~ 赵俊大大 所编写 Valine-Admin 扩展的 Git 地址：https://github.com/zhaojun1998/Valine-Admin 添加环境变量在我们添加好代码库地址后，在同一页面，往下拉，我们可以看到“自定义环境变量”，然后我们需要在下方添加一些环境变量。 其中，必须要填写的环境变量如下： 环境变量名 作用和使用方法 SITE_NAME 你博客的名称，显示在邮件中，如 十一種情緒的堆棧 SITE_URL 博客的地址, 最后不要加 / ，如 https://11.tt SMTP_USER SMTP 服务的用户名，一般为邮箱地址，如 `no-reply@11.tt` SMTP_PASS SMTP 密码，一般为授权码，而不是邮箱的登陆密码，请自行查询对应邮件服务商的获取方式。如 password SMTP_SERVICE 邮件服务提供商，支持 QQ、163、126 等，填写该变量就不用单独配置 SMTP 服务器等内容，全部支持的邮箱服务商请参考 Nodemailer Supported services 中列出的服务商，此处填写列出服务商中的代号就行，如QQ企业邮箱代号为 QQex，在此处就填写 QQex SENDER_NAME 发送提醒邮件时，邮件寄件人的名称，如 评论提醒——十一種情緒的堆棧 另外，还有一部分可选的环境变量如下： 环境变量名 作用和使用方法 TO_EMAIL 指定站长收信邮箱，默认值为 SITE_USER。用于 SMTP 发件人与站长收件人不一致的情况下使用 TEMPLATE_NAME 配置提醒邮件使用的主题，默认值为 default，可选值为 rainbow，即上方演示的彩虹样式，此配置会去寻找 template{TEMPLATE_NAME} 目录下的 notice.ejs 与 send.ejs 模板文件，分别用于通知站长和通知游客，另外欢迎到 原贴 提供邮件主题样式 如果你的邮件服务商不在上方列表中，又或是我们有很多同志自己搭建了强大的邮件服务器，不受那些限制多多的邮件服务商困扰，那么 赵俊大大 同样给大家提供了解决方案，我们只需要在环境变量中单独配置 SMTP 服务器地址即可，需要配置的环境变量如下： 环境变量名 作用和使用方法 SMTP_HOST 邮件服务提供商 SMTP 地址，此项需要自行查询或询问服务商，如 smtp.qq.com SMTP_PORT 邮件服务提供商 SMTP 端口, 此项需要自行查询或询问服务商，如 465 SMTP_SECURE 是否启用加密, 默认为 true，一般不需要设置，如有特殊请自行配置，此项需要自行查询或询问服务商。 请注意，如果启用了自定义邮件服务商，那么请删除上方必选环境变量中的 SMTP_SERVICE 变量，只有当 SMTP_SERVICE 未配置时才会启用自定义邮件服务！！！ 填写好环境变量后，你的环境变量应该是类似这样的： 添加 Web 主机域名为了使用我们的管理界面，我们需要一个主机的域名，使用免费的即可，没有太大影响，如果你需要使用自定义的域名，域名必须要备案才可以哦，可以自行研究。 好啦！一切准备就绪啦！ 部署源码在万事具备之后，我们终于要开始请东风咯！我们打开刚才我们在 LeanCloud 配置好的应用，然后从左往右依次点击下图中红框标记的按钮，进入到云引擎 Git 源码部署界面。 然后选择需要配置的分支，并勾选下载最新依赖，额也可以不下的其实…如图所示填写和勾选： 然后点击部署，静静等待哦！千万不要关闭页面和瞎点！不然会中止的！ 在部署完成后，页面就变成了这个样子~ 然后我们需要像这样重启一下容器，以保证部署好的服务开始运行： 重启完之后，我们只需要将前文中提到的主题中 Valine 的配置文件里 notify 字段设置为 true 即可开启新评论邮件提醒功能啦！对了，弄好之后别忘了 hexo d 将新的静态文件传到 Coding 和 Github 哦！ 免费版云引擎定时启动大家在使用 Leancloud 时可能也看到了相关的提示，免费版的体验实例每天有 6 小时的强制休眠时间，有 1 小时没有任何操作就会自动休眠。升级免费版即可完美解决这个问题，那么除了升级收费版(1天1元还好不贵)以外，我们还有什么变通方法呢？ 当每次有评论时访问到该引擎时，如果该引擎为休眠状态，那么就会启动这个引擎。基于这种情况，我们通过自己的服务器在北京时间每天 7-23 点这个评论高发时间每隔 1 小时使用 curl 命令访问一次自己在 leancloud 生成的域名即可保证这段时间云引擎不休眠。 我们在 Linux 机器上添加计划任务，使用 crontab -e 命令，在下方添加一行： */20 7-23 * * * curl https://你在上方添加的Web主机域名.leanapp.cn 保存后会提示 crontab: installing new crontab，已经自动生效。 添加后台管理用户我们现在已经可以通过访问我们刚才配置的 Web 主机域名已经可以访问后台页面了，后台页面可以提供删除功能，据 赵俊大大 说，他将在将来为后台添加更多的功能哦！首先我们需要添加一个可以登录的用户，红框标注的 username、password 和 email 为必填项： 然后访问我们的 Web 主机域名，输入用户名/邮箱和密码，就可以登录到后台页面啦！像这样： OK！大功告成啦！QwQ感觉这一张写得好像报流水账一样…这样不好不好…我回头慢慢改进… 总结今天我们完成了给使用 Next 主题的 Hexo 博客添加基于 LeanCloud 的 Valine 评论功能，并为它完善了邮件提醒功能，这里再次感谢 赵俊大大 编写的邮件提醒扩展~另外，附上在开启 Valine 评论功能后我现在这一部分的配置： # Valine. # You can get your appid and appkey from https://leancloud.cn # more info please open https://valine.js.org valine: enable: true appid: U7aB9evsRQXXqCqnPXG3cCjS-9Nh9j0Va # your leancloud application appid appkey: 38D4FiUTxAYvTNaoAuF9Rm8G # your leancloud application appkey notify: true # mail notifier , https://github.com/xCss/Valine/wiki verify: true # Verification code placeholder: ヾﾉ≧∀≦)o来啊，快活啊! # comment box placeholder avatar: mm # gravatar style guest_info: nick,mail,link # custom comment header pageSize: 10 # pagination size 友情提示兼职常见问题 在开启这个 Valine 后，如果 appid 和 appkey 填写正确，就会显示评论框； 如果提示安全域名问题，请看这里添加安全域名； 文中用到的 appid 和 appkey 仅作演示，文章写完后就会删除应用，不要抄作业哦！ 如果修改了博客链接的生成方式，旧的评论需要在 LeanCloud 云储存中修改相应记录的地址！ 你们回复我的时候写上邮箱好不好啦！这样我回复你们之后，你们邮箱就可以收到通知啦！]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Leancloud</tag>
        <tag>nodejs</tag>
        <tag>git</tag>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于Hexo+Coding+Github搭建个人博客的全过程]]></title>
    <url>%2Fposts%2F2018%2Fset-up-hexo-with-coding-and-github%2F</url>
    <content type="text"><![CDATA[感觉平时工作、瞎倒腾的过程中会遇到好玩的技术、会跳进很深的坑😁，又或是遇到很复杂的情况，以前觉得烂笔头很方便，但是技术越来越复杂加上有各种图片，用笔来做笔记真的是挺落后的了，于是升起了写博客做记录的念头。一开始我是使用 Nginx+Wordpress 来搭建个人博客的，但是因为要时常检查服务器状况；最近又有一个同学服务器被入侵，删光数据库还装了矿机；阿里的主机面临到期，续费只挂个博客感觉浪费；再加上有了一见钟情的 Hexo+Next 主题并且发现了 Coding和Github 上的 Pages 服务！这不立马就投奔新颖的极简风博客啦！ 概述我感觉可能是因为最近疯狂改论文，所以开头部分用了“概述”这个标题😅…言归正传，这次我搭建 Hexo 使用的本地环境如下： * Windows 10 1803 * node-v8.11.2-x64 * git version 2.17.1.windows.2 * hexo-v3.7.1 肯定不满足于默认的主题啊，所以使用了 next-muse-v6.3.0 这个主题进行美化~接下来添加网站流量统计以及进行一些小细节的优化。因为心比较大，感觉会有国外大佬来看我的网站，所以为了提高访问速度，我分别将网站部署到 Coding 和 Github 以提高国内和国外的访问速度，同时在上面分别启用 https。然后使用 腾讯云解析 来进行自定义域名的解析。 环境安装这部分主要是将概述中所提到本地环境的安装过程进行记录和介绍~一般情况下，照着做都能成功的…其实，一般熟手看到这篇博文的环境安装部分…可能只是…来找几个…官网链接…吧… 安装 Node.jsHexo是基于 Node.js 开发的(应该是)，所以我们首先需要在本地安装 Node.js。作为一个新世纪的技术行业接班人，我们自然要通过官网来下载安装各种程序了！打开 Node.js 官网 (https://nodejs.org) 我们就可以看到映入眼帘的就是直接推荐你系统下载安装的页面： 我们点击图中红框内的按钮，下载 node-v8.11.2-x64.msi 安装文件。下载完成后，打开 node-v8.11.2-x64.msi 进行安装。除非你要修改安装路径或特殊需求，否则一路默认安装即可。安装完成后，打开 Powershell 或 cmd，输入 node -v，若为以下输出，则安装成功。 Windows PowerShell 版权所有 (C) Microsoft Corporation。保留所有权利。 PS C:\Users\Miaia&gt; node -v v8.11.2 PS C:\Users\Miaia&gt; 安装 Git我们需要通过 Git 来下载一些主题文件，当然最重要的功能是将生成的网页文件提交到下文中创建的git仓库中去。我们仍然通过打开 Git 官网下载页 (https://git-scm.com/downloads) 来下载 Git 的安装程序。在选择适用系统后，为了方便起见，我选择了安装版的 Git 进行下载(如下图)。 我们点击图中红框内的链接，下载 Git-2.17.1.2-64-bit.exe 安装文件。下载完成后，打开 Git-2.17.1.2-64-bit.exe 进行安装。除非你了解你在安装时做出的修改，否则一路默认安装即可。安装完成后，打开 Powershell 或 cmd，输入 git --version，若为以下输出，则安装成功。 Windows PowerShell 版权所有 (C) Microsoft Corporation。保留所有权利。 PS C:\Users\Kiana&gt; git --version git version 2.17.1.windows.2 PS C:\Users\Kiana&gt; 因为我使用的是 Windows 10 系统，所以上面两个程序我都安装了 Windows 版，使用其他系统的同学我相信你们安装这一步能做到的😁。 安装 Hexo打开 Git Bash在安装完 Windows 版 Git 以后，我们在资源管理器任意文件夹空白处右键即可看到如下界面： 我们单击 Git Bash Here 打开 Git Bash，可以看到以下界面：(Mac、Linux 用户打开终端即可) 我们接下来的安装步骤以及以后所有的 hexo 页面生成、部署等工作都在在这个 Git Bash 中完成。 使用淘宝 NPM 镜像源(可选)由于国内访问官方 NPM 源速度较慢，为了一劳永逸，此处可以将 NPM 源更换为了淘宝 NPM 镜像源。请注意，如果你觉得你的 NPM 源速度够快，更换镜像源这部分可选择性使用我们在 Git Bash 中输入如下指令 # 将官方 NPM 源更换为 淘宝 NPM 镜像源 $ npm install -g cnpm --registry=https://registry.npm.taobao.org 请注意，如需使用上方安装的淘宝源，需要在使用 npm 命令时将其改为 cnpm 安装 Hexo 命令行工具即安装 Hexo 主体，需要在命令行界面进行操作，以下命令来自 Hexo 官方网站。 $ npm install hexo-cli -g 请耐心稍等一会儿，如果在安装过程中头部出现 WARN ，可能是因为某些内容不支持 Windows，请不要担心，并不影响实际使用。在安装完成后，输入 hexo -v，若出现类似以下内容，则 Hexo 已经安装成功。 $ hexo -v hexo: 3.7.1 hexo-cli: 1.1.0 os: Windows_NT 10.0.17134 win32 x64 http_parser: 2.8.0 node: 8.11.2 ... Hexo 博客初始化创建博客主目录在电脑中任意位置创建一个任意名称的文件夹，例如，我在D盘创建了一个名为 myblog 的文件夹。 初始化 Hexo 主目录进入上方创建的文件夹，即双击进入 myblog 文件夹。然后右键打开 Git Bash 。在 Git Bash 中输入下方命令： $ hexo init 接下来会自动 clone 需要的文件以及默认的主题到这个文件夹里面，并会获得类似下方的输出： $ hexo init INFO Cloning hexo-starter to D:\myblog Cloning into &apos;D:\myblog&apos;... ... Unpacking objects: 100% (65/65), done. Submodule &apos;themes/landscape&apos; (https://github.com/hexojs/hexo-theme-landscape.git) registered for path &apos;themes/landscape&apos; ... npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\fsevents): npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;}) added 401 packages in 12.941s INFO Start blogging with Hexo! 我们看到 INFO Start blogging with Hexo! 就可以知道初始化成功啦！我还没遇到初始化失败的…上面那些 WARN 都可以忽略的，不用担心，程序员里只看得到 ERROR，😁😁😁hhh~接下来要安装一些必要的依赖，同样也非常简单，只要在 Git Bash 中输入： $ npm install 然后可以看到输出中有一句： up to date in 1.999s 然后 Hexo 博客就真的已经！非常简单滴 搭！建！完！成！啦！✿✿ヽ(°▽°)ノ✿ 生成并运行博客在我们进行进一步优化之前，我们先来看看我们搭建好的博客~以下命令要在 Git Bash 中输入哦！首先我们要先生成静态页面，用到的命令是： $ hexo g 其中，g 的全称是 generate，当然也可以用 hexo generate 这条命令，但上方命令更简便。输入完后可以看到类似以下输出： $ hexo g INFO Start processing INFO Files loaded in 341 ms INFO Generated: index.html ... INFO Generated: css/images/banner.jpg INFO Generated: css/fonts/fontawesome-webfont.svg INFO 28 files generated in 712 ms 一切准备就绪，就差一把东风开启服务器，输入以下命令吹风，偶不，是开启本地服务器： $ hexo s 其中， s 的全称是 server，当然也可以用 hexo server 这条命令，但上方命令更简便。输入之后我们可以看到以下输出： $ hexo s INFO Start processing INFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 显而易见，我们的博客已经运行在本地4000端口上啦！打开浏览器，在地址输入 http://localhost:4000/，我们就可以看到激动人心的界面啦！友情提示：平常只使用 Windows 而不熟悉 Linux 的小伙伴可能不知道 Ctrl+C 在 Linux 中表示取消操作，而 Git Bash 正是使用了 Bash 这种 shell。所以这里如果要进行复制，可以右键或者通过 Ctrl+Insert 来实现复制操作。类似地，粘贴操作也不能使用 Ctrl+C，需要改为 Shift+Insert。 博客美化接下来我们要让博客变得好看起来！那天我领导问我为什么不用某ssh客户端，在他给我罗列了N条优点之后，我和他说，我这个好看！O(∩_∩)O好看！好看！好看很重要！谁不希望自己的博客在能实现博客功能的基础上还能更好看呢？本来我打算这章开始就单独放到一篇文章里面，但是后来想想还是索性都放到这里面算了，毕竟是记录我这个网站的建立过程，分开来优点怪怪的…好了Y(^o^)Y，话不多说！(已经说了一堆了XD)我们开始美化博客啦！ 使用 Next-Muse 主题当时会下定决心重做整个博客的最主要原因就是，看到了使用了 Next-Muse 这个主题的网站！真的是一见钟情有木有有木有！Next-Muse 主题是 Next 主题四种设计中的其中一种，其他还有 Mist，Pisces 和 Gemini。首先附上 Next 的 Github 链接：hexo-theme-next (https://github.com/theme-next/hexo-theme-next)在这个仓库里面可以看到不同主题设计的 demo 网址~o(^＠^)o吼吼！接下来开始操作啦！ 下载 Next 主题首先，我们要将 Next 主题下载到本地。在网站根目录右键打开 Git Bash，输入以下命令将主题下载到本地： $ git clone https://github.com/theme-next/hexo-theme-next themes/next 这个只是非常简单的克隆操作，除非克隆到一半的时候网突然断了…否则一般来说是不会失败哒！ 启用 Next 主题我们在网站根目录下可以看到有一个名为 _config.yml 的配置文件，我们用编辑器打开它，搜索 theme，我们可以找到以下内容： # Extensions ## Plugins: https://hexo.io/plugins/ ## Themes: https://hexo.io/themes/ theme: landscape 我们要将其中的 landscape 修改为我们要是用的 next，修改完如下所示： # Extensions ## Plugins: https://hexo.io/plugins/ ## Themes: https://hexo.io/themes/ theme: next 然而这个网站默认是英文的呢，所以我们要修改一下显示语言，完美支持中文的哦！仍然在这个配置文件中，搜索 language，我们可以找到以下内容： ... author: John Doe language: timezone: ... 我们要在其中的 language 的冒号后面添加 zh-CN。请注意：根据语法要求，冒号需要为英文冒号，冒号后需要有一个空格。修改后，如下所示： ... author: John Doe language: zh-CN timezone: ... 查看已启用的主题我们在 Git Bash 依次输入下方三条命令： $ hexo clean $ hexo g $ hexo s 其中，hexo clean 的作用是删除本地已经生成的所有静态文件，哈复习一下！有没有忘记下面两条是什么命令呀？忘记了的话，请看这里哦！每一条命令输完都会有对应的输出，因为比较简单或者上方出现过，所以在这里我就省略啦~输入完 hexo s 启动服务器后，我们再次打开浏览器，在地址栏输入 http://localhost:4000/，我们可以看到我们的主题已经启用成功啦！ 到这里，我们的主题修改已经完成啦！ 细节美化页面底部跳动的爱心拉到本页面底部看一下~那个跳动的爱心是不是超好看！！！来来来我教你怎么弄！首先我来为难一下选择困难症们！！！先去这里选择一个图标！！→→→ The Icons然后复制这个图标的代码，如我现在选择下图中的爱心，那么我要复制的内容就是下图红框中的 fa-heartbeat。 然后我们需要找到主题的配置文件，定位到目录中 themes/next/_config.yml，请注意！这个配置文件与根目录中的配置文件不一样！不一样！我们不一样！同样是用编辑器打开这个配置文件，搜索 footer，我们可以看到以下内容： footer: # Specify the date when the site was setup. # If not defined, current year will be used. #since: 2015 # Icon between year and copyright info. icon: # Icon name in fontawesome, see: https://fontawesome.com/v4.7.0/icons # `heart` is recommended with animation in red (#ff0000). name: user # If you want to animate the icon, set it to true. animated: false # Change the color of icon, using Hex Code. color: &quot;#808080&quot; 然后我们将前面复制到的代码替换 name 字段中的 user，并且需要在前面加上 fas，需要爱心跳动，那么我们需要修改 animated 字段为 true，修改图标 color 为红色 #ff0000，这部分修改完如下所示： footer: # Specify the date when the site was setup. # If not defined, current year will be used. #since: 2015 # Icon between year and copyright info. icon: # Icon name in fontawesome, see: https://fontawesome.com/v4.7.0/icons # `heart` is recommended with animation in red (#ff0000). name: fas fa-heartbeat # If you want to animate the icon, set it to true. animated: true # Change the color of icon, using Hex Code. color: &quot;#ff0000&quot; 嘻嘻！刷新一下页面，看看是不是下面有一颗躁动的心脏啦~~ 页面访问统计我们仅仅需要非常简单地修改一个字段，就可以给页面添加页面的访问统计功能啦！！！仍然是打开主题的配置文件 themes/next/_config.yml，搜索 busuanzi_count，可以看到以下内容： busuanzi_count: enable: false total_visitors: true total_visitors_icon: user total_views: true total_views_icon: eye post_views: true post_views_icon: eye 我们只需要非常简单地将 enable 字段修改为 true，就可以为页面添加访问统计功能啦！修改好后刷新页面！就可以看到： 是不是真的很简单呀！！好啦~简单的美化部分就到这里啦！接下来我们要部署到 coding 和 Github 了哦！ 部署我们要开始部署啦！coding 是国内的，Github 是国外的，因为一些众所周知的原因，Github 时常会访问比较慢呀~这里不得不吐槽一下！coding 普通会员的访问速度真的很感人，非常慢…所以我还是开了个黄金会员…相比之下，Github 就比较良心了，挺快的…国内…好像也挺快的… 部署到 coding创建 coding 项目首先，一如既往，先发一下 coding 的官网链接：Coding (https://coding.net/)然后注册一个账号这我就不说了吧…然后新建一个项目，项目名称为你注册时填写的用户名后面加上 .coding.me，比如我的就是 miaia.coding.me，其余部分默认就行啦！！！你信我！！！请非常非常注意！.coding.me 前面填写的用户名必须是你的用户名！！！不然是不能用的哦！！！真的注意！！！ 创建公钥然后我们需要在本地创建一个公钥，打开 Git Bash，输入如下命令，然后回车回车回车直到创建完毕： $ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot; 我们可以看到类似的输出如下： $ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot; Generating public/private rsa key pair. Enter file in which to save the key (/c/Users/Kiana/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /c/Users/Kiana/.ssh/id_rsa. Your public key has been saved in /c/Users/Kiana/.ssh/id_rsa.pub. The key fingerprint is: SHA256:w5YVly1GUy+HlmBtBUd2wSigTK5LYrvH54LRPNzBGhs Kiana@Kiana The key&apos;s randomart image is: +---[RSA 4096]----+ | . .o.*===B| | + . =+++B.| | .+ ...o= o| | E.+ o . o | | o+o* S | | ..+B.o . | | .+.. | | ..+ . | | .. +. | +----[SHA256]-----+ 我们可以看到生成的密钥在路径 /c/Users/Kiana/.ssh/id_rsa.pub，我们直接打开这个文件，复制其中的所有内容然后复制到下图中并保存，这下你就可以随时进行 commit 啦！ 配置库名并提交我们打开根目录下的 _config.yml，搜索 deploy，可以看到以下内容： deploy: type: 我们需要将其修改为类似这样的形式： deploy: - type: git repo: coding: git@git.coding.net:miaia/miaia.coding.me.git 然后我们需要安装一个提交的插件，在 Git Bash中输入： $ npm install hexo-deployer-git --save 在安装完后，输入命令： $ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 正常情况下，我们就可以非常顺利地提交到库中啦！这时候访问 用户名.coding.me，就可以看到你的页面咯！ coding 配置自定义域名进入到项目页面，选择侧边栏中的 “Pages 服务”，如图： 然后我相信你看到页面上的提示，能够非常容易地添加自定义域名并开启 https 哒！ 部署到 Github创建 Github 仓库首先，一如既往，先发一下 Github 的官网链接：Github (https://github.com/)然后注册一个账号这我就不说了吧…然后新建一个仓库，项目名称为你注册时填写的用户名后面加上 .github.io，比如我的就是 miaia.github.io，其余部分默认就行啦！！！你信我！！！请非常非常注意！.github.io 前面填写的用户名必须是你的用户名！！！不然是不能用的哦！！！真的注意！！！ 添加公钥我们前面已经在本地创建了一个密钥，生成的密钥在路径 /c/Users/Kiana/.ssh/id_rsa.pub。我们再次打开这个文件，复制其中的所有内容然后复制到下图中并保存，这下你就可以随时进行 commit 啦！ 配置库名并提交我们再次打开根目录下的 _config.yml，搜索 deploy，可以看到以下内容： deploy: - type: git repo: coding: git@git.coding.net:miaia/miaia.coding.me.git 我们需要在其中添加 Github 库的地址，所以需要将其修改为类似这样的形式： deploy: - type: git repo: coding: git@git.coding.net:miaia/miaia.coding.me.git github: git@github.com:miaia/miaia.github.io.git 在安装完后，输入命令： $ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 正常情况下，我们就可以非常顺利地提交到两个库中啦！这时候访问 用户名.github.io，就可以看到你的页面咯！ Github 配置自定义域名进入到项目页面，选择 “Settings”，在该页面中往下拉找到如图位置： 然后我相信你看到页面上的提示，能够非常容易地添加自定义域名并开启 https 哒！ 配置解析这里我们要单独说一下 CNAME 解析的问题，因为我们要实现国内外访问不同的服务，所以需要分别设置解析，无论是腾讯云还是阿里云的解析服务，都能够很好滴区分国内外节点，我们需要将国内的 CNAME 设置到 pages.coding.me，将国外的 CNAME 设置到 pages.github.io，然后你就会发现，非常神奇啦！ 总结到这里，我们整个的建立和部署都已经基本完成了，我会把其他的诸如添加评论、SEO优化、谷歌分析等其他细节内容在下一篇日志当中给出，希望大家看了我的这个文章能够顺利滴搭建起自己的博客！当然也可以给我留言哦！结文撒花✿✿ヽ(°▽°)ノ✿]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>nodejs</tag>
        <tag>git</tag>
        <tag>https</tag>
        <tag>Github</tag>
        <tag>coding</tag>
        <tag>windows10</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fposts%2F2018%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
