<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>十一種情緒的堆棧</title>
  
  <subtitle>别提概念，只解决问题。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://11.tt/"/>
  <updated>2019-04-21T06:49:22.914Z</updated>
  <id>https://11.tt/</id>
  
  <author>
    <name>Miaia</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用sdkmanager一键安装安卓编译环境</title>
    <link href="https://11.tt/posts/2019/install-android-build-environment/"/>
    <id>https://11.tt/posts/2019/install-android-build-environment/</id>
    <published>2019-04-11T07:00:00.000Z</published>
    <updated>2019-04-21T06:49:22.914Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/posts/2019/install-android-build-environment/install-android-build-environment.png" alt="install-android-build-environment"></p><p>这个故事是这样开始的，在一个阳光明媚的下午，我被叫到了昏暗的会议室持续交付系统对接安卓和IOS发布的需求，为了尽量适应所有平台的编译，于是我就又一次开始了各种环境的部署之旅。<br>遇事不决问谷歌，实在不行上Stack Overflow。可是官网已经没有搜索到的很多教程里提供的sdk地址，反而要求我下载Android Studio。我一台编译机装什么图形界面啊喂！于是就是开始了sdkmanager的踩坑之旅。<br><a id="more"></a><br>我写脚本的水平还是比较菜的，所以为了不丢人现眼，自己写的一键安装脚本放在了文末，CentOS7测试通过，需要的可以直接拉到底部。</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文共分为三个主要部分，分别为安装仍然免费的JDK、安装sdkmanager以及sdk、ndk的安装。<br>文中使用的环境为：</p><pre><code>* CentOS Linux release 7.5.1804 (Core)* jdk-8u191-linux-x64* sdk-tools-linux-4333796</code></pre><p>然后一如既往，提供官方网站的地址：<br>JDK 8 官方网站：<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">Java SE Development Kit 8 Downloads</a><br>安卓开发者官方网站：<a href="https://developer.android.com/studio" target="_blank" rel="noopener">Android Studio</a></p><h1 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h1><p>我们都知道，Oracle爸爸现在开始到处发“威胁邮件”收取使用费了，于是我们需要使用一个Oracle爸爸说还能免费使用的版本，据公司领导们决策，我们使用Java 8最后一个免费版本，即jdk-8u191。然而抠门的Oracle爸爸已经让我们拼了老命还要注册账号才能下载到这个版本，于是我花了几个小时刷了一遍他的下载路径，找到了直接可以下载的方法，本文中暂时不表，下次单独说。<br>事实上，安装jdk非常简单，仅需执行以下命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo "install jdk 8u191"</span><br><span class="line">wget -O /tmp/jdk-8u191-linux-x64.tar.gz http://javadl.oracle.com/webapps/download/AutoDL?BundleId=235704_2787e4a523244c269598db4e85c51e0c</span><br><span class="line">tar -xvf /tmp/jdk-8u191-linux-x64.tar.gz -C /vdb/</span><br><span class="line">echo 'export JAVA_HOME=/vdb/jdk1.8.0_191' &gt;&gt; /etc/profile</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>嗯，你们没猜错，最后的脚本就是把这些一段段拼起来。</p><h1 id="安装sdkmanager"><a href="#安装sdkmanager" class="headerlink" title="安装sdkmanager"></a>安装sdkmanager</h1><p>接下来就是安装这个很坑的东西了，一开始sdkmanager是安装sdk时附带的一个工具，但是后来我直接安装sdk就变成了 <code>deprecated</code>。行吧，那我就装上sdkmanager先：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo "install sdkmanager"</span><br><span class="line">wget -O /tmp/sdk-tools-linux-4333796.zip https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip</span><br><span class="line">mkdir -p /vdb/android-sdk-linux</span><br><span class="line">unzip /tmp/sdk-tools-linux-4333796.zip -d /vdb/android-sdk-linux/</span><br><span class="line">echo 'export ANDROID_HOME=/vdb/android-sdk-linux' &gt;&gt; /etc/profile</span><br><span class="line">echo 'export PATH=$JAVA_HOME/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$PATH'  &gt;&gt; /etc/profile</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>然后使用方法也很简单：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdkmanager "&#123;需要安装包的名字;版本&#125;"</span><br></pre></td></tr></table></figure><h1 id="安装安卓sdk和ndk"><a href="#安装安卓sdk和ndk" class="headerlink" title="安装安卓sdk和ndk"></a>安装安卓sdk和ndk</h1><p>很神奇的是，sdkmanager不能安装ndk，emmmm，可能因为不叫 <code>sndkmanager</code> ？？？</p><h2 id="安装sdk"><a href="#安装sdk" class="headerlink" title="安装sdk"></a>安装sdk</h2><p>因为发布可能会涉及到各种版本，所以我是要安装所有的sdk以及相关其他依赖包，于是我安装时就写成了这样…</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">echo "install sdk"</span><br><span class="line">echo "you must manually input yes when you see license"</span><br><span class="line">read -p "--- Press any key to continue ---"</span><br><span class="line">sdkmanager \</span><br><span class="line">"add-ons;addon-google_apis-google-15" \</span><br><span class="line">"add-ons;addon-google_apis-google-16" \</span><br><span class="line">"add-ons;addon-google_apis-google-17" \</span><br><span class="line">"add-ons;addon-google_apis-google-18" \</span><br><span class="line">"add-ons;addon-google_apis-google-19" \</span><br><span class="line">"add-ons;addon-google_apis-google-21" \</span><br><span class="line">"add-ons;addon-google_apis-google-22" \</span><br><span class="line">"add-ons;addon-google_apis-google-23" \</span><br><span class="line">"add-ons;addon-google_apis-google-24" \</span><br><span class="line">"add-ons;addon-google_gdk-google-19" \</span><br><span class="line">"build-tools;19.1.0" \</span><br><span class="line">"build-tools;20.0.0" \</span><br><span class="line">"build-tools;21.1.2" \</span><br><span class="line">"build-tools;22.0.1" \</span><br><span class="line">"build-tools;23.0.1" \</span><br><span class="line">"build-tools;23.0.2" \</span><br><span class="line">"build-tools;23.0.3" \</span><br><span class="line">"build-tools;24.0.0" \</span><br><span class="line">"build-tools;24.0.1" \</span><br><span class="line">"build-tools;24.0.2" \</span><br><span class="line">"build-tools;24.0.3" \</span><br><span class="line">"build-tools;25.0.0" \</span><br><span class="line">"build-tools;25.0.1" \</span><br><span class="line">"build-tools;25.0.2" \</span><br><span class="line">"build-tools;25.0.3" \</span><br><span class="line">"build-tools;26.0.0" \</span><br><span class="line">"build-tools;26.0.1" \</span><br><span class="line">"build-tools;26.0.2" \</span><br><span class="line">"build-tools;26.0.3" \</span><br><span class="line">"build-tools;27.0.0" \</span><br><span class="line">"build-tools;27.0.1" \</span><br><span class="line">"build-tools;27.0.2" \</span><br><span class="line">"build-tools;27.0.3" \</span><br><span class="line">"build-tools;28.0.0" \</span><br><span class="line">"build-tools;28.0.0-rc1" \</span><br><span class="line">"build-tools;28.0.0-rc2" \</span><br><span class="line">"build-tools;28.0.1" \</span><br><span class="line">"build-tools;28.0.2" \</span><br><span class="line">"build-tools;28.0.3" \</span><br><span class="line">"build-tools;29.0.0-rc1" \</span><br><span class="line">"cmake;3.10.2.4988404" \</span><br><span class="line">"cmake;3.6.4111459" \</span><br><span class="line">"extras;android;gapid;1" \</span><br><span class="line">"extras;android;gapid;3" \</span><br><span class="line">"extras;android;m2repository" \</span><br><span class="line">"extras;google;auto" \</span><br><span class="line">"extras;google;google_play_services" \</span><br><span class="line">"extras;google;instantapps" \</span><br><span class="line">"extras;google;m2repository" \</span><br><span class="line">"extras;google;market_apk_expansion" \</span><br><span class="line">"extras;google;market_licensing" \</span><br><span class="line">"extras;google;simulators" \</span><br><span class="line">"extras;google;webdriver" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha2" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha3" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha4" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha5" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha6" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha7" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha8" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha9" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-beta1" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-beta2" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-beta3" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-beta4" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-beta5" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.1" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.2" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha2" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha3" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha4" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha5" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha6" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha7" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha8" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha9" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-beta1" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-beta2" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-beta3" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-beta4" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-beta5" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.1" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.2" \</span><br><span class="line">"lldb;2.0" \</span><br><span class="line">"lldb;2.1" \</span><br><span class="line">"lldb;2.2" \</span><br><span class="line">"lldb;2.3" \</span><br><span class="line">"lldb;3.0" \</span><br><span class="line">"lldb;3.1" \</span><br><span class="line">"ndk-bundle" \</span><br><span class="line">"patcher;v4" \</span><br><span class="line">"platform-tools" \</span><br><span class="line">"platforms;android-10" \</span><br><span class="line">"platforms;android-11" \</span><br><span class="line">"platforms;android-12" \</span><br><span class="line">"platforms;android-13" \</span><br><span class="line">"platforms;android-14" \</span><br><span class="line">"platforms;android-15" \</span><br><span class="line">"platforms;android-16" \</span><br><span class="line">"platforms;android-17" \</span><br><span class="line">"platforms;android-18" \</span><br><span class="line">"platforms;android-19" \</span><br><span class="line">"platforms;android-20" \</span><br><span class="line">"platforms;android-21" \</span><br><span class="line">"platforms;android-22" \</span><br><span class="line">"platforms;android-23" \</span><br><span class="line">"platforms;android-24" \</span><br><span class="line">"platforms;android-25" \</span><br><span class="line">"platforms;android-26" \</span><br><span class="line">"platforms;android-27" \</span><br><span class="line">"platforms;android-28" \</span><br><span class="line">"platforms;android-7" \</span><br><span class="line">"platforms;android-8" \</span><br><span class="line">"platforms;android-9" \</span><br><span class="line">"platforms;android-Q" \</span><br><span class="line">"tools"</span><br></pre></td></tr></table></figure><p>请注意，这部分的安装需要手动确认License，大家可不要不小心错过了，否则会无法安装哦！</p><h2 id="安装ndk"><a href="#安装ndk" class="headerlink" title="安装ndk"></a>安装ndk</h2><p>首先提供ndk的地址：<br><a href="https://developer.android.com/ndk" target="_blank" rel="noopener">ndk官方网站</a></p><p>我们可以在上面看到的很多的版本，请根据需要选择，我们需要的是ndk13，下文中也是下载安装的13哦！<br><strong>另外，请注意，貌似环境变量中同时只能设置一个ndk版本，所以请自行做好版本管理！</strong></p><p>我们使用以下命令下载并安装ndk-r13b:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo "install ndk"</span><br><span class="line">wget -O /tmp/android-ndk-r13b-linux-x86_64.zip https://dl.google.com/android/repository/android-ndk-r13b-linux-x86_64.zip</span><br><span class="line">mkdir -p /vdb/android-ndk-linux</span><br><span class="line">unzip /tmp/android-ndk-r13b-linux-x86_64.zip -d /vdb/android-ndk-linux/</span><br><span class="line">echo 'export ANDROID_NDK_HOME=/usr/local/android-ndk-linux/android-ndk-r13b' &gt;&gt; /etc/profile</span><br><span class="line">echo 'export PATH=$ANDROID_NDK_HOME:$PATH'  &gt;&gt; /etc/profile</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h1 id="完整shell文件"><a href="#完整shell文件" class="headerlink" title="完整shell文件"></a>完整shell文件</h1><p>主要的安装命令在上文中基本都写了，完整版的shell文件中添加了清理安装包的命令，不需要可以自行删除。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">echo "init android build environment"</span><br><span class="line"></span><br><span class="line">yum update -y</span><br><span class="line">yum install -y wget unzip</span><br><span class="line"></span><br><span class="line">echo "install jdk 8u191"</span><br><span class="line">wget -O /tmp/jdk-8u191-linux-x64.tar.gz http://javadl.oracle.com/webapps/download/AutoDL?BundleId=235704_2787e4a523244c269598db4e85c51e0c</span><br><span class="line">tar -xvf /tmp/jdk-8u191-linux-x64.tar.gz -C /vdb/</span><br><span class="line">echo 'export JAVA_HOME=/vdb/jdk1.8.0_191' &gt;&gt; /etc/profile</span><br><span class="line"></span><br><span class="line">echo "install sdkmanager"</span><br><span class="line">wget -O /tmp/sdk-tools-linux-4333796.zip https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip</span><br><span class="line">mkdir -p /vdb/android-sdk-linux</span><br><span class="line">unzip /tmp/sdk-tools-linux-4333796.zip -d /vdb/android-sdk-linux/</span><br><span class="line">echo 'export ANDROID_HOME=/vdb/android-sdk-linux' &gt;&gt; /etc/profile</span><br><span class="line">echo 'export PATH=$JAVA_HOME/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$PATH'  &gt;&gt; /etc/profile</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">echo "install sdk"</span><br><span class="line">echo "you must manually input yes when you see license"</span><br><span class="line">read -p "--- Press any key to continue ---"</span><br><span class="line">sdkmanager \</span><br><span class="line">"add-ons;addon-google_apis-google-15" \</span><br><span class="line">"add-ons;addon-google_apis-google-16" \</span><br><span class="line">"add-ons;addon-google_apis-google-17" \</span><br><span class="line">"add-ons;addon-google_apis-google-18" \</span><br><span class="line">"add-ons;addon-google_apis-google-19" \</span><br><span class="line">"add-ons;addon-google_apis-google-21" \</span><br><span class="line">"add-ons;addon-google_apis-google-22" \</span><br><span class="line">"add-ons;addon-google_apis-google-23" \</span><br><span class="line">"add-ons;addon-google_apis-google-24" \</span><br><span class="line">"add-ons;addon-google_gdk-google-19" \</span><br><span class="line">"build-tools;19.1.0" \</span><br><span class="line">"build-tools;20.0.0" \</span><br><span class="line">"build-tools;21.1.2" \</span><br><span class="line">"build-tools;22.0.1" \</span><br><span class="line">"build-tools;23.0.1" \</span><br><span class="line">"build-tools;23.0.2" \</span><br><span class="line">"build-tools;23.0.3" \</span><br><span class="line">"build-tools;24.0.0" \</span><br><span class="line">"build-tools;24.0.1" \</span><br><span class="line">"build-tools;24.0.2" \</span><br><span class="line">"build-tools;24.0.3" \</span><br><span class="line">"build-tools;25.0.0" \</span><br><span class="line">"build-tools;25.0.1" \</span><br><span class="line">"build-tools;25.0.2" \</span><br><span class="line">"build-tools;25.0.3" \</span><br><span class="line">"build-tools;26.0.0" \</span><br><span class="line">"build-tools;26.0.1" \</span><br><span class="line">"build-tools;26.0.2" \</span><br><span class="line">"build-tools;26.0.3" \</span><br><span class="line">"build-tools;27.0.0" \</span><br><span class="line">"build-tools;27.0.1" \</span><br><span class="line">"build-tools;27.0.2" \</span><br><span class="line">"build-tools;27.0.3" \</span><br><span class="line">"build-tools;28.0.0" \</span><br><span class="line">"build-tools;28.0.0-rc1" \</span><br><span class="line">"build-tools;28.0.0-rc2" \</span><br><span class="line">"build-tools;28.0.1" \</span><br><span class="line">"build-tools;28.0.2" \</span><br><span class="line">"build-tools;28.0.3" \</span><br><span class="line">"build-tools;29.0.0-rc1" \</span><br><span class="line">"cmake;3.10.2.4988404" \</span><br><span class="line">"cmake;3.6.4111459" \</span><br><span class="line">"extras;android;gapid;1" \</span><br><span class="line">"extras;android;gapid;3" \</span><br><span class="line">"extras;android;m2repository" \</span><br><span class="line">"extras;google;auto" \</span><br><span class="line">"extras;google;google_play_services" \</span><br><span class="line">"extras;google;instantapps" \</span><br><span class="line">"extras;google;m2repository" \</span><br><span class="line">"extras;google;market_apk_expansion" \</span><br><span class="line">"extras;google;market_licensing" \</span><br><span class="line">"extras;google;simulators" \</span><br><span class="line">"extras;google;webdriver" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha2" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha3" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha4" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha5" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha6" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha7" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha8" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha9" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-beta1" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-beta2" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-beta3" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-beta4" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-beta5" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.1" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.2" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha2" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha3" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha4" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha5" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha6" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha7" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha8" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha9" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-beta1" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-beta2" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-beta3" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-beta4" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-beta5" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.1" \</span><br><span class="line">"extras;m2repository;com;android;support;constraint;constraint-layout;1.0.2" \</span><br><span class="line">"lldb;2.0" \</span><br><span class="line">"lldb;2.1" \</span><br><span class="line">"lldb;2.2" \</span><br><span class="line">"lldb;2.3" \</span><br><span class="line">"lldb;3.0" \</span><br><span class="line">"lldb;3.1" \</span><br><span class="line">"ndk-bundle" \</span><br><span class="line">"patcher;v4" \</span><br><span class="line">"platform-tools" \</span><br><span class="line">"platforms;android-10" \</span><br><span class="line">"platforms;android-11" \</span><br><span class="line">"platforms;android-12" \</span><br><span class="line">"platforms;android-13" \</span><br><span class="line">"platforms;android-14" \</span><br><span class="line">"platforms;android-15" \</span><br><span class="line">"platforms;android-16" \</span><br><span class="line">"platforms;android-17" \</span><br><span class="line">"platforms;android-18" \</span><br><span class="line">"platforms;android-19" \</span><br><span class="line">"platforms;android-20" \</span><br><span class="line">"platforms;android-21" \</span><br><span class="line">"platforms;android-22" \</span><br><span class="line">"platforms;android-23" \</span><br><span class="line">"platforms;android-24" \</span><br><span class="line">"platforms;android-25" \</span><br><span class="line">"platforms;android-26" \</span><br><span class="line">"platforms;android-27" \</span><br><span class="line">"platforms;android-28" \</span><br><span class="line">"platforms;android-7" \</span><br><span class="line">"platforms;android-8" \</span><br><span class="line">"platforms;android-9" \</span><br><span class="line">"platforms;android-Q" \</span><br><span class="line">"tools"</span><br><span class="line"></span><br><span class="line">echo "install ndk"</span><br><span class="line">wget -O /tmp/android-ndk-r13b-linux-x86_64.zip https://dl.google.com/android/repository/android-ndk-r13b-linux-x86_64.zip</span><br><span class="line">mkdir -p /vdb/android-ndk-linux</span><br><span class="line">unzip /tmp/android-ndk-r13b-linux-x86_64.zip -d /vdb/android-ndk-linux/</span><br><span class="line">echo 'export ANDROID_NDK_HOME=/usr/local/android-ndk-linux/android-ndk-r13b' &gt;&gt; /etc/profile</span><br><span class="line">echo 'export PATH=$ANDROID_NDK_HOME:$PATH'  &gt;&gt; /etc/profile</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">echo "clean up"</span><br><span class="line">rm -rf /tmp/*</span><br><span class="line"></span><br><span class="line">echo "done!"</span><br><span class="line">read -p "--- Press any key to continue ---"</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>首先为自己好久没有写文感到愧疚一次；<br>然后为自己写了这样一篇笔记版文字感到愧疚一次；<br>希望以后能够赶紧把draft里面的文章都写完整，也希望赶紧把已经过时的文章更新一下。<br>最后，还是感谢大家的关注和评论~<br>撒花~✿✿ヽ(°▽°)ノ✿~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/posts/2019/install-android-build-environment/install-android-build-environment.png&quot; alt=&quot;install-android-build-environment&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个故事是这样开始的，在一个阳光明媚的下午，我被叫到了昏暗的会议室持续交付系统对接安卓和IOS发布的需求，为了尽量适应所有平台的编译，于是我就又一次开始了各种环境的部署之旅。&lt;br&gt;遇事不决问谷歌，实在不行上Stack Overflow。可是官网已经没有搜索到的很多教程里提供的sdk地址，反而要求我下载Android Studio。我一台编译机装什么图形界面啊喂！于是就是开始了sdkmanager的踩坑之旅。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://11.tt/categories/Android/"/>
    
    
      <category term="Android" scheme="https://11.tt/tags/Android/"/>
    
      <category term="build" scheme="https://11.tt/tags/build/"/>
    
      <category term="devops" scheme="https://11.tt/tags/devops/"/>
    
      <category term="sdk" scheme="https://11.tt/tags/sdk/"/>
    
      <category term="java" scheme="https://11.tt/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>教你顺滑升级6.x版本的NexT主题</title>
    <link href="https://11.tt/posts/2018/how-to-update-hexo-theme-next/"/>
    <id>https://11.tt/posts/2018/how-to-update-hexo-theme-next/</id>
    <published>2018-09-23T12:00:00.000Z</published>
    <updated>2019-04-21T06:49:03.211Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/posts/2018/how-to-update-hexo-theme-next/how-to-update-hexo-theme-next.png" alt="how-to-update-hexo-theme-next"></p><p>因为之前有很长一段时间没有更新，所以博客使用的 NexT 主题已经从 6.3.0 更新到了 6.4.1。<br>而作为一个新世纪的好青年，我们自然是要像早上八九点钟的太阳，时时刻刻对新鲜事物保持兴趣。<br>于是我便积极地想要将主题升级到最新版本，过程也很简单，话不多说，请看全文٩(๑❛ᴗ❛๑)۶</p><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>这篇文章主要说的是从 <code>hexo-theme-next</code> 6.x 版本升级到最新版本（文章发布时为6.4.1）的过程。<br>如果你的 <code>hexo-theme-next</code> 版本处于 5.x 版本，请到这里查看官方文档→<a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md" target="_blank" rel="noopener">从 NexT v5.1.x 更新</a>。<br>官方文档中提到了使用 <code>Hexo 数据文件特性</code> 来解决更新时可能遇到的冲突错误，但是我在使用该方法时觉得不如使用 git 的某些功能来绕过这样的问题，直接解决更新时的冲突错误，平滑更新。<br>所以与其说这篇文章在教大家如何升级 <code>hexo-theme-next</code> 版本，倒不如说在教大家如何使用 git 的某些功能。<br><strong>此处推荐大家安装 Visual Studio Code，这个工具能够非常方便地为大家提供代码冲突时的帮助。</strong><br>本文中升级 <code>hexo-theme-next</code> 版本时所使用到的环境和工具如下：</p><pre><code>* Windows 10 1803* Visual Studio Code 1.27.2 (user setup)* node-v8.11.2-x64* git version 2.17.1.windows.2* hexo-v3.7.1* NexT.Muse v6.3.0* 善于观察的眼睛一双</code></pre><p><strong>重要提示！！！</strong><br>如果你对 Git 这个源代码管理工具不是很熟悉，或者对自己的操作心里没底：<br><strong>请将整个博客的目录备份！！！</strong><br><strong>请将整个博客的目录备份！！！</strong><br><strong>请将整个博客的目录备份！！！</strong><br>好的，让我们开始升级(　 ´-ω ･)▄︻┻┳══━一</p><h1 id="升级NexT版本"><a href="#升级NexT版本" class="headerlink" title="升级NexT版本"></a>升级NexT版本</h1><p>我们可以通过在博客根目录执行以下命令来升级到最新的 <code>hexo-theme-next</code> 版本：</p><pre><code>$ cd themes/next$ git pull</code></pre><p>其中，第一条命令的功能是进入到 next 主题的目录中，因为我们是要升级这个主题的版本，接下来的操作都要在这个目录中完成。<br>而第二条命令在这里是从最初克隆这个主题的仓库获取最新的数据并 <strong>自动尝试合并到当前所在的分支</strong> 。<br>如果你在执行完这两条命令之后没有任何报错，那么恭喜你！！！你的更新已经成功了！！！<br>然而，除非你特意将配置文件分离（实质上使用了 <code>Hexo 数据文件特性</code>），否则一般情况下，你都会遇到类似这样的情况：</p><pre><code>$ git pullremote: Counting objects: 273, done.remote: Compressing objects: 100% (43/43), done.remote: Total 273 (delta 127), reused 134 (delta 111), pack-reused 117Receiving objects: 100% (273/273), 86.19 KiB | 125.00 KiB/s, done.Resolving deltas: 100% (167/167), completed with 67 local objects.From https://github.com/theme-next/hexo-theme-nextffde8fe..9ec34d3  master     -&gt; origin/master* [new tag]         v6.4.0     -&gt; v6.4.0* [new tag]         v6.4.1     -&gt; v6.4.1error: Your local changes to the following files would be overwritten by merge:        _config.ymlPlease commit your changes or stash them before you merge.AbortingUpdating ffde8fe..9ec34d3</code></pre><p>其中的报错的信息为：</p><pre><code>error: Your local changes to the following files would be overwritten by merge:        _config.ymlPlease commit your changes or stash them before you merge.</code></pre><p>这部分内容告诉我们，我们本地有一个文件 <code>_config.yml</code> 经过了修改，和远程仓库的内容不一样造成了冲突，如果强行合并，则本地文件会被覆盖。<br>并且提示我们，让我们在合并之前先将修改提交（commit）或者储藏（stash）。<br>如果你和我遇到了一样的情况，那么请继续阅读，这部分就是本文的重点，<a href="#处理升级时的冲突">下一章节</a>中，我将和大家分享我处理这个问题的详细流程，也即是我们升级的过程。</p><h1 id="处理升级时的冲突"><a href="#处理升级时的冲突" class="headerlink" title="处理升级时的冲突"></a>处理升级时的冲突</h1><p>在这一章节中，我们将要解决升级 NexT 主题时出现的冲突问题，并且实质性地完成版本升级的过程。<br>我们需要多次使用 git 命令来进行一系列操作，并且需要打开冲突的文件进行目视处理。</p><h2 id="将修改储藏到暂存区"><a href="#将修改储藏到暂存区" class="headerlink" title="将修改储藏到暂存区"></a>将修改储藏到暂存区</h2><p>我们可以通过 <code>git stash</code> 这句命令将对主题文件的修改储存到本地的暂存区：</p><pre><code>$ git stashSaved working directory and index state WIP on master: ffde8fe Reverted #254 pull.</code></pre><p>通过执行该命令的输出我们可以知道我们已经将修改储存到了本地的暂存区，接下来我们需要执行更新，请继续看<a href="#执行更新">下一章节</a>。</p><h2 id="执行更新"><a href="#执行更新" class="headerlink" title="执行更新"></a>执行更新</h2><p>我们现在需要再次使用 <code>git pull</code> 命令来获取最新的主题文件，别担心，这次不会再有上面的错误了：</p><pre><code>$ git pullUpdating ffde8fe..9ec34d3Fast-forward.github/CONTRIBUTING.md                            |  54 ++README.md                                          |  56 +-_config.yml                                        |  56 +-...source/js/src/scrollspy.js                         | 195 +++--source/js/src/utils.js                             | 175 +++--66 files changed, 1158 insertions(+), 1941 deletions(-)delete mode 100644 layout/_partials/share/jiathis.swig...delete mode 100644 source/css/_common/components/third-party/jiathis.styl</code></pre><p>再次执行 <code>git pull</code> 命令后我们可以看到类似以上的输出，这样我们的主题就已经更新完成了。<br>那么现在，我们需要将之前的配置恢复到新版本的主题当中，即从暂存区取出修改过的内容，请继续看<a href="#从暂存区取出修改">下一章节</a>。</p><h2 id="从暂存区取出修改"><a href="#从暂存区取出修改" class="headerlink" title="从暂存区取出修改"></a>从暂存区取出修改</h2><p>我们现在要通过执行 <code>git stash pop</code> 这句命令来从暂存区取出修改，我们可以得到类似以下的输出：</p><pre><code>$ git stash popAuto-merging _config.ymlOn branch masterYour branch is up to date with &apos;origin/master&apos;.Changes not staged for commit:(use &quot;git add &lt;file&gt;...&quot; to update what will be committed)(use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)        modified:   _config.ymlno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)Dropped refs/stash@{0} (3b73b30...4b77e8e)</code></pre><p>其中，<code>modified:   _config.yml</code> 这一行用红色标注了出来，说明这个文件在取出修改进行自动合并时被修改了。<br>如果你看到了以上的输出，那么你的更新到此就已经成功啦~<br>但如果你在执行 <code>git stash pop</code> 这句命令后，更加不幸地看到了输出是类似下方的内容：</p><pre><code>$ git stash popAuto-merging _config.ymlCONFLICT (content): Merge conflict in _config.yml</code></pre><p>那么说明自动合并无法为你自动解决这些冲突，需要你手动进行处理。<br>事到如今，我们距离成功已经是临门一脚，那么让我们趁热打铁，继续看<a href="#解决冲突">下一章节</a>。</p><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>我们在主题文件夹下找到 <code>_config.yml</code> 这个文件，在其中我们可以非常容易地看到类似以下的不同：</p><pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; Updated upstreamenable: false # When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version.appid:  # your leancloud application appidappkey:  # your leancloud application appkeynotify: false # mail notifier , https://github.com/xCss/Valine/wikiverify: false # Verification codeplaceholder: Just go go # comment box placeholderavatar: mm # gravatar styleguest_info: nick,mail,link # custom comment headerpageSize: 10 # pagination sizevisitor: false # leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors&apos; for counter compatibility. Article reading statistic https://valine.js.org/visitor.html=======enable: trueappid:  U7aB9evsRQXXqCqnPXG3cCjS-9Nh9j0Va # your leancloud application appidappkey: 38D4FiUTxAYvTNaoAuF9Rm8G          # your leancloud application appkeynotify: true                              # mail notifier , https://github.com/xCss/Valine/wikiverify: true                              # Verification codeplaceholder: ヾﾉ≧∀≦)o来啊，快活啊!          # comment box placeholderavatar: hide                                # gravatar styleguest_info: nick,mail,link                # custom comment headerpageSize: 10                              # pagination sizevisitor: false                            # leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors&apos; for counter compatibility. Article reading statistic https://valine.js.org/visitor.html&gt;&gt;&gt;&gt;&gt;&gt;&gt; Stashed changes</code></pre><p>在以等号分隔的上方是这次 <code>git pull</code> 拉取到的内容，而下方就是我们对该文件修改后的内容，很显然，这两部分内容因为不一样的特别多，自动合并无法确定哪些可以覆盖，所以产生了冲突。<br>如果你使用了类似于 VS Code 这样的工具，一般你打开这个文件都会让你选择哪一部分进行保留，这也是推荐大家使用这样工具的原因。<br>当然了，不使用这种工具，你也可以直接目视内容，然后删除不需要的内容，保留原本修改过的内容即可，修改后变回了这样：</p><pre><code>...enable: trueappid:  U7aB9evsRQXXqCqnPXG3cCjS-9Nh9j0Va # your leancloud application appidappkey: 38D4FiUTxAYvTNaoAuF9Rm8G          # your leancloud application appkeynotify: true                              # mail notifier , https://github.com/xCss/Valine/wikiverify: true                              # Verification codeplaceholder: ヾﾉ≧∀≦)o来啊，快活啊!          # comment box placeholderavatar: hide                                # gravatar styleguest_info: nick,mail,link                # custom comment headerpageSize: 10                              # pagination sizevisitor: false                            # leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors&apos; for counter compatibility. Article reading statistic https://valine.js.org/visitor.html...</code></pre><p>然后我们再次在主题根目录执行 <code>git pull</code> 这句命令，可以看到类似这样的输出：</p><pre><code>$ git pullAlready up to date.</code></pre><p>恭喜恭喜！我们的升级终于成功完成！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总体来说，使用这样的命令能够让大家不需要重新整理配置，并且可以在升级时审阅你使用到特性的更新部分，并手动选择需要更新的内容。<br>我觉得这样的更新方式更加能够让人清楚地知道自己到底更新了什么，做了什么。<br>甚至，在更新的过程当中，会发现很多新的功能，能够进行添加。<br>当然了，这篇文章中对 git 的使用只能算是皮毛而已，如果有什么不正确的，或者需要补充的，或者有什么疑问，请大家在下方的评论中给我指出呀~</p><p>PS. 这篇文章应该是 Hexo 系列的最后一篇文章了，我朋友问我为什么还不写站点 SEO 的文章。<br>因为我觉得大家可以搜索到很多类似的相关文章，我对 SEO 的了解不是很全面，写出来的文章相比于他们就像洗文一样，所以打算在经过详细了解和尝试之后在后续推出一篇相关的文章。<br><strong>另外！！！！！！！</strong><br>我的站点已经出现在<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">hexo-theme-next</a>的 Github 主页 README 中 Live Preview 列表中啦！！！<br>多多点击啦！✿✿ヽ(°▽°)ノ✿<br>写完了文章，今天也是棒棒哒~(｡≧3≦)ﾉ⌒☆</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/posts/2018/how-to-update-hexo-theme-next/how-to-update-hexo-theme-next.png&quot; alt=&quot;how-to-update-hexo-theme-next&quot;&gt;&lt;/p&gt;
&lt;p&gt;因为之前有很长一段时间没有更新，所以博客使用的 NexT 主题已经从 6.3.0 更新到了 6.4.1。&lt;br&gt;而作为一个新世纪的好青年，我们自然是要像早上八九点钟的太阳，时时刻刻对新鲜事物保持兴趣。&lt;br&gt;于是我便积极地想要将主题升级到最新版本，过程也很简单，话不多说，请看全文٩(๑❛ᴗ❛๑)۶&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://11.tt/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://11.tt/tags/Hexo/"/>
    
      <category term="Git" scheme="https://11.tt/tags/Git/"/>
    
      <category term="update" scheme="https://11.tt/tags/update/"/>
    
      <category term="hexo-theme-next" scheme="https://11.tt/tags/hexo-theme-next/"/>
    
      <category term="theme" scheme="https://11.tt/tags/theme/"/>
    
      <category term="next" scheme="https://11.tt/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>用Live2D让看板喵入住你的Hexo博客吧\(^o^)/~</title>
    <link href="https://11.tt/posts/2018/how-to-play-with-live2d-on-hexo/"/>
    <id>https://11.tt/posts/2018/how-to-play-with-live2d-on-hexo/</id>
    <published>2018-09-19T14:22:22.000Z</published>
    <updated>2019-04-21T06:49:03.203Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/posts/2018/how-to-play-with-live2d-on-hexo/how-to-play-with-live2d-on-hexo.png" alt="how-to-play-with-live2d-on-hexo"></p><p>这个神奇的看板生物是我在某一次自由地 surfing the internet 时碰巧发现的，当时看到了之后就瞬间萌化了(〃’▽’〃)<br>当天晚上就马上为自己的博客加上了左下角这只~顺便还配好了CDN~<br>那么现在，就让我们一起学猫叫，一起喵喵喵喵喵！在你面前撒个娇~哎呦喵喵喵喵喵ヽ(^ω^)ﾉ<br><a id="more"></a></p><hr><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>首先要告诉大家的是，Hexo 配置这只 Live2D 非常简单，需要的时间也不长~<br>然后，本文中配置 Live2D 看板娘所使用的环境如下：</p><pre><code>* Windows 10 1803* node-v8.11.2-x64* git version 2.17.1.windows.2* hexo-v3.7.1* NexT.Muse v6.4.1* hexo-helper-live2d@3.1.0* 看板娘一只</code></pre><p>同时给出 hexo-helper-live2d 的 Github 链接：<a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">https://github.com/EYHN/hexo-helper-live2d</a><br><strong>另外，本文在电脑上浏览最佳！</strong><br>接下来！让我们开始吧！</p><hr><h1 id="安装并配置-hexo-helper-live2d"><a href="#安装并配置-hexo-helper-live2d" class="headerlink" title="安装并配置 hexo-helper-live2d"></a>安装并配置 hexo-helper-live2d</h1><p>在这一章节完成后，就可以完成对 Live2D 的配置啦！请耐心看完，很快就搞定咯！</p><h2 id="安装-hexo-helper-live2d"><a href="#安装-hexo-helper-live2d" class="headerlink" title="安装 hexo-helper-live2d"></a>安装 hexo-helper-live2d</h2><p>首先，在博客的根目录下执行下方命令，并可以得到类似下方的输出：</p><pre><code>$ npm install hexo-helper-live2d --savenpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;})+ hexo-helper-live2d@3.1.0added 6 packages from 6 contributors and audited 5818 packages in 22.674sfound 0 vulnerabilities</code></pre><p>非常简单，看到类似上方的输出之后，代表这个插件已经安装完成啦！</p><h2 id="配置-hexo-helper-live2d"><a href="#配置-hexo-helper-live2d" class="headerlink" title="配置 hexo-helper-live2d"></a>配置 hexo-helper-live2d</h2><p>这部分是这篇文章的重点部分，完成这部分之后即可在自己的博客上看到你家的萌物啦！<br>在开始配置之前，你需要先获取 Live2D 的资源，很多手游中都有 Live2D 资源可以获取的哦！具体获取方式此处不表，有需要的同学可以 Google 一哈٩(๑&gt;₃&lt;)۶<br>当然啦！为了让大家能够快速配置好看板喵，自然是有其它方式的~<br>你可以在 <a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">插件作者的博客</a> 里挑选一只你喜欢的萌物，然后记录下它的名字~<br>然后我们开始配置吧(￣▽￣)／</p><h3 id="安装你看中的萌物"><a href="#安装你看中的萌物" class="headerlink" title="安装你看中的萌物"></a>安装你看中的萌物</h3><p>上方页面中提供的 Live2D 资源已经都被作者发布成 npm 包啦！<br>我们只需要简单滴安装 <code>live2d-widget-model-你选中的萌物名字</code> 即可获得对应的 Live2D 资源，我们这里以 hijiki 这只黑喵为例~<br>使用以下命令安装 <code>live2d-widget-model-hijiki</code>：</p><pre><code>$ npm install live2d-widget-model-hijiki --savenpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;})+ live2d-widget-model-hijiki@1.0.5added 1 package and audited 5819 packages in 9.782sfound 0 vulnerabilities</code></pre><p>如果你输入的命令得到了类似上方的输出，那么，hijiki 已经在等着你了哦！</p><h3 id="配置你看中的萌物"><a href="#配置你看中的萌物" class="headerlink" title="配置你看中的萌物"></a>配置你看中的萌物</h3><p>在<a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">官方文档</a>中可以很容易获取配置文件的样例，下方提供的配置可以让大家直接使用 hijiki (〃’▽’〃)<br>首先，请大家打开博客根目录下的配置文件 <code>_config.yml</code>，在配置文件的最后添加以下内容：</p><pre><code># Live2D## https://github.com/EYHN/hexo-helper-live2dlive2d:enable: truescriptFrom: jsdelivr # 默认pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径)pluginJsPath: lib/ # 脚本文件相对与插件根目录路径pluginModelPath: assets/ # 模型文件相对与插件根目录路径# scriptFrom: jsdelivr # jsdelivr CDN# scriptFrom: unpkg # unpkg CDN# scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 urltagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中debug: false # 调试, 是否在控制台输出日志model:    use: live2d-widget-model-hijiki # npm-module package name    # use: hijiki # 博客根目录/live2d_models/ 下的目录名    # use: ./wives/hijiki # 相对于博客根目录的路径    # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-hijiki@1.0.5/assets/hijiki.model.json # 你的自定义 url    scale: 1    hHeadPos: 0.5    vHeadPos: 0.618display:    superSample: 2    width: 125    height: 125    position: left    hOffset: 30    vOffset: -20mobile:    show: false    scale: 0.05react:    opacityDefault: 1    opacityOnHover: 0.2</code></pre><p>然后执行命令 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>，即可在本地4000端口看到这只萌物啦！效果图如下：</p><p><img src="/posts/2018/how-to-play-with-live2d-on-hexo/hijiki-rendering.png" alt="hijiki-rendering.png"></p><p>是不是超级简单！！！</p><h3 id="配置详解"><a href="#配置详解" class="headerlink" title="配置详解"></a>配置详解</h3><p>为了让大家能够更加自由地自定义自己看板喵的位置、大小、属性等内容，我在下方表格中列出了上方配置中所有项目的解释，并不是用到了所有配置。<br><strong>请注意！！！</strong>这里使用的 hexo-helper-live2d 版本是 3.1.0，如果你使用的不是这个版本，下方内容可能已经过期。<br>这里给出作者的 API 文档，此文档应该是作者根据版本更新的：<a href="https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html" target="_blank" rel="noopener">live2d-widget.js API</a></p><table><thead><tr><th>配置项</th><th>类型</th><th>属性</th><th>备注</th></tr></thead><tbody><tr><td>enable</td><td>Boolean</td><td><code>true</code>或者<code>false</code></td><td>控制live2d插件是否生效。</td></tr><tr><td>scriptFrom</td><td>String</td><td><code>local</code>或者<code>jsdelivr</code>或者<code>unpkg</code></td><td>l2dwidget.js使用的CDN地址，local表示使用本地地址。</td></tr><tr><td>pluginRootPath</td><td>String</td><td>例如：<code>live2dw/</code></td><td>插件在站点上根目录的相对路径。</td></tr><tr><td>pluginJsPath</td><td>String</td><td>例如：<code>lib/</code></td><td>脚本文件相对与插件根目录路径。</td></tr><tr><td>pluginModelPath</td><td>String</td><td>例如：<code>assets/</code></td><td>模型文件相对与插件根目录路径。</td></tr><tr><td>tagMode</td><td>Boolean</td><td><code>true</code>或者<code>false</code></td><td>标签模式, 控制是否仅替换tag标签而非插入到所有页面中。</td></tr><tr><td>debug</td><td>Boolean</td><td><code>true</code>或者<code>false</code></td><td>调试模式, 控制是否在控制台输出日志。</td></tr><tr><td>model.use</td><td>String</td><td>例如：<code>live2d-widget-model-hijiki</code></td><td>npm 模块包名（上文例中即使用的这个方式）。</td></tr><tr><td>model.use</td><td>String</td><td>例如：<code>hijiki</code></td><td>博客根目录/live2d_models/ 下的目录名。</td></tr><tr><td>model.use</td><td>String</td><td>例如：<code>./wives/hijiki</code></td><td>相对于博客根目录的路径。</td></tr><tr><td>model.use</td><td>String</td><td>例如：<code>https://域名/model.json</code></td><td>你自定义live2d模型json文件的url。</td></tr><tr><td>model.scale</td><td>Number</td><td>可选值，默认值为 <code>1</code></td><td>模型与canvas的缩放。</td></tr><tr><td>model.hHeadPos</td><td>Number</td><td>可选值，默认值为 <code>0.5</code></td><td>模型头部横坐标。</td></tr><tr><td>model.vHeadPos</td><td>Number</td><td>可选值，默认值为 <code>0.618</code></td><td>模型头部横坐标。</td></tr><tr><td>display.superSample</td><td>Number</td><td>可选值，默认值为 <code>2</code></td><td>超采样等级。</td></tr><tr><td>display.width</td><td>Number</td><td>可选值，默认值为 <code>150</code></td><td>canvas的长度。</td></tr><tr><td>display.height</td><td>String</td><td>可选值，默认值为 <code>300</code></td><td>canvas的高度。</td></tr><tr><td>display.position</td><td>Number</td><td>可选值，默认值为 <code>right</code></td><td>显示位置：左或右。</td></tr><tr><td>display.hOffset</td><td>Number</td><td>可选值，默认值为 <code>0</code></td><td>canvas水平偏移。</td></tr><tr><td>display.vOffset</td><td>Number</td><td>可选值，默认值为 <code>-20</code></td><td>canvas水平偏移。</td></tr><tr><td>mobile.show</td><td>Boolean</td><td>可选值，默认值为 <code>true</code></td><td>控制是否在移动设备上显示。</td></tr><tr><td>mobile.scale</td><td>Number</td><td>可选值，默认值为 <code>0.5</code></td><td>移动设备上的缩放。</td></tr><tr><td>react.opacityDefault</td><td>Number</td><td>可选值，默认值为 <code>0.7</code></td><td>默认透明度。</td></tr><tr><td>react.opacityOnHover</td><td>Number</td><td>可选值，默认值为 <code>0.2</code></td><td>鼠标移上透明度（此项貌似没有效果）。</td></tr></tbody></table><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>好啦！今天的配置就到这里，大家有没有都把自己的看板喵领回家呀！٩(๑&gt;◡&lt;๑)۶<br>这种新奇的小玩意儿以后可能还是会有的，但是为了保证自己一如既往喜欢的简约，可能以后就不会有更多花哨的东西出现了。<br>好啦希望大家喜欢<em>(:з」∠)</em><br>另外，顺便告诉大家，我左下角这只的模型解包来自 <strong>药水制作师</strong> 手机游戏，版权归该官方所有。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/posts/2018/how-to-play-with-live2d-on-hexo/how-to-play-with-live2d-on-hexo.png&quot; alt=&quot;how-to-play-with-live2d-on-hexo&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个神奇的看板生物是我在某一次自由地 surfing the internet 时碰巧发现的，当时看到了之后就瞬间萌化了(〃’▽’〃)&lt;br&gt;当天晚上就马上为自己的博客加上了左下角这只~顺便还配好了CDN~&lt;br&gt;那么现在，就让我们一起学猫叫，一起喵喵喵喵喵！在你面前撒个娇~哎呦喵喵喵喵喵ヽ(^ω^)ﾉ&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://11.tt/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://11.tt/tags/Hexo/"/>
    
      <category term="live2D" scheme="https://11.tt/tags/live2D/"/>
    
      <category term="喵星人" scheme="https://11.tt/tags/%E5%96%B5%E6%98%9F%E4%BA%BA/"/>
    
      <category term="猫" scheme="https://11.tt/tags/%E7%8C%AB/"/>
    
      <category term="看板娘" scheme="https://11.tt/tags/%E7%9C%8B%E6%9D%BF%E5%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>学会写作和你的Hexo博客一起愉快地玩耍吧ヾ(◍°∇°◍)ﾉﾞ</title>
    <link href="https://11.tt/posts/2018/how-to-play-with-hexo/"/>
    <id>https://11.tt/posts/2018/how-to-play-with-hexo/</id>
    <published>2018-09-07T15:00:00.000Z</published>
    <updated>2019-04-21T06:49:03.190Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/posts/2018/how-to-play-with-hexo/how-to-play-with-hexo.jpg" alt="how-to-play-with-hexo"></p><p>之前记录了如何搭建博客、给博客添加评论、如何加速博客访问，然而归根结底，博客还是要被用来写文章、做笔记使用的，这才是前面做的万事所需要的东风。<br>我是在使用 Hexo 之后，才开始用 markdown 写文章做笔记的，那么这次就让我这只小菜鸟分享一下在使用 Hexo 写文的经验和技巧吧~让我们真正滴把博客玩起来！<br><a id="more"></a></p><hr><p>最近实在是笔头比较懒，距离写<a href="https://11.tt/posts/2018/set-up-cdn-for-hexo/">上一篇文章</a>已经有两个多月的时间了QAQ<br>我想着如果再不继续写得话，可能不久于将来这个博客又要荒废了…为了不再次重蹈覆辙！也为了我存了很多的想要和大家分享的内容！让我们高产起来吧！！！</p><p><img src="/posts/2018/how-to-play-with-hexo/good-baby.jpg" alt="good-baby"></p><p>另外，有些小伙伴说想要看一些不一样的内容~这些都在规划中了哦~再有1-2篇关于 Hexo 的内容就要开始写其他杂七杂八的啦！</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在这篇文章当中，主要会和大家分享一下，我是如何新建文章、如何使用 markdown 的语法撰写文稿、如何在文章中插入图片、如何对图片进行归档、给文章打标签、为文章分类…<br>其实这是一篇早就该发出来的文章，搭建好了博客就像造好了房子，如果不在里面写满精致的文章，就像住在没有装修的毛坯房里，让人很不舒服。<br>那么我们接下来就要给大家介绍一下是如何装修房子的啦！<br>首先，我有一栋这样子条件的毛坯房：</p><pre><code>* Windows 10 1803* node-v8.11.2-x64* git version 2.17.1.windows.2* hexo-v3.7.1* NexT.Muse v6.4.1</code></pre><p>工欲善其事，必先利其器，要想房子精致美丽，也需要高级的材料，就先看看我用了哪些涂料吧：</p><pre><code>* Visual Studio Code          # 编辑器* markdownlint                # 编辑器插件* hexo-asset-image            # 文章图片插件* hexo-generator-tag          # 标签插件</code></pre><p>其中，Visual Studio Code（以下简称 VS Code）这款编辑器好像很火来着，大家应该都不是很陌生；markdownlint 是 VS Code 的一款扩展，直接搜索安装即可，另外两款是通过 npm 安装的 hexo 插件，详细的解释和使用就让我在接下里的文中说明吧~<br>好的，那么接下来，我要开工啦！</p><p><img src="/posts/2018/how-to-play-with-hexo/three-pigs.jpg" alt="three-pigs"></p><hr><h1 id="如何撰写一篇文章"><a href="#如何撰写一篇文章" class="headerlink" title="如何撰写一篇文章"></a>如何撰写一篇文章</h1><p>在这一章节中，我将从新建文章开始，介绍基本的 markdown 语法，让大家快速上手撰写文章~<br>因为我使用的是 VS Code 编辑器，一些快捷键都将以之为准，如果大家使用的是别的编辑器 or 别的环境，请自行在脑海中转义一下哦！🧙‍</p><h2 id="新建一篇文章"><a href="#新建一篇文章" class="headerlink" title="新建一篇文章"></a>新建一篇文章</h2><p>在撰写文章之前，我们得先有一张能让我们挥洒墨水的白纸，那么我们要怎么样才能获得这样一张白纸呢？<br>那就要介绍一下 hexo 中新建文章、页面和草稿的一句命令：</p><pre><code>hexo new [layout] &lt;title&gt;</code></pre><p>其中，<code>layout</code>可选的参数为：<code>post</code>、<code>page</code>和<code>draft</code>，我们要新建的是文章，所以要选择的 <code>layout</code> 是 <code>post</code>。<br>然后，我们要按下 <code>ctrl+`</code> 这个快捷键，打开 VS Code内置的终端，像这样：</p><p><img src="/posts/2018/how-to-play-with-hexo/vscode-terminal.png" alt="vscode-terminal"></p><p>接下来，如果我们要新建一篇名为 <code>my first post</code> 的文章，那么我们在其中输入以下格式的命令，然后我们会获得新建文章后所创建 markdown 文件的本地路径：</p><pre><code>$ hexo new post &quot;my first post&quot;INFO  Created: D:\myblog\source\_posts\my-first-post.md</code></pre><p>从命令执行的输出来看，我们可以很轻松地找到这篇文章在本地的路径，打开后可以看到如下内容：</p><p><img src="/posts/2018/how-to-play-with-hexo/create-a-post.png" alt="create-a-post"></p><p>至此，我们的文章已经新建成功啦~<br>请注意，这里生成文章的文件名可以在站点根目录的 <code>_config.yml</code> 中搜索 <code>Writing</code> 进行设置，具体设置方法以及草稿功能可以在官方文档：<a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener">写作|Hexo</a>中找到，此处不多加介绍。</p><h2 id="markdown-的基本语法"><a href="#markdown-的基本语法" class="headerlink" title="markdown 的基本语法"></a>markdown 的基本语法</h2><p>这部分将为大家介绍 markdown 中最基本的一些语法，帮助大家快速写出一篇文章。<br>markdown 的语法大部分都非常简单，一般来说，稍微看一看都能迅速写出文章，但如果不了解一下细节处的规则，那么写出来的文章可能会变得乱七八糟。<del>别问我是怎么知道的TAT</del><br>至于绘制公式、流程图这些功能如果我以后用到的话，会提前在该文章前为大家详细介绍，今天嘛~还是尽快入住新房吧！</p><h3 id="标题语法"><a href="#标题语法" class="headerlink" title="标题语法"></a>标题语法</h3><p>标题的语法是这样的：<br>第一级标题，开头就是一个 <code>#</code><br>第二级标题，开头就是两个 <code>#</code><br>第三级标题，开头就是三个 <code>#</code><br>…<br>请注意，<strong>标题需要独自占据一行，并且在标题的文字和 <code>#</code> 之间需要有一个空格</strong>，不然可能会不被识别的哦！<br>另外，在标题的这一行，上下都需要一个空行分割，虽然不是必要的，但某些很迷的时候会导致标题无法识别。<br>如果使用了 markdownlint 插件，它也会勤奋地告诉大家哒！</p><pre><code># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题...再往下可能就不被支持啦！</code></pre><p>同时，大家的主题一般都支持自动生成目录，就像本页的右边→<br><strong>如果大家想要这一类主题的目录生效，请务必使用 <code>#</code> 开头的标题为文章分节哦！</strong></p><h4 id="标题语法演示"><a href="#标题语法演示" class="headerlink" title="标题语法演示"></a>标题语法演示</h4><p>这部分的演示大家就看上面这一堆加粗字并且看起来是标题的吧~同时他们还会显示在右边的目录中，他们就是最好的演示啦！</p><h3 id="引用语法"><a href="#引用语法" class="headerlink" title="引用语法"></a>引用语法</h3><p>大家写着写着文字，突然想要引用一句鲁迅先生的话，但又不是自己说的，于是，这个时候引用语法就派上了用场。<br>引用需要的一个特殊符号是 <code>&gt;</code>，使用方法依旧很简单，<strong>只需要在引用的行首加上 <code>&gt;</code> 就可以啦</strong>！多行引用就在连续的每一行之前都加上 <code>&gt;</code> ~ヾ(◍°∇°◍)ﾉﾞ<br>需要注意的是，引用也是以行为单位的，在行首加上 <code>&gt;</code> 那么整行都被引用啦~在行中加上这个符号是不会出现引用效果的哦！<br>另外，引用行和下方的非引用行之间，如果没有一个空行分割，那么这个非引用行也会被当做引用行哦！</p><pre><code>单行引用：&gt; 悲剧将人生的有价值的东西毁灭给人看，喜剧将那无价值的撕破给人看。——鲁迅多行引用方式一（推荐）：&gt; 悲剧将人生的有价值的东西毁灭给人看，喜剧将那无价值的撕破给人看。&gt; ————鲁迅多行引用方式二（不推荐）：&gt; 悲剧将人生的有价值的东西毁灭给人看，喜剧将那无价值的撕破给人看。————鲁迅                            # 这两行由于和上方引用行之间没有空行分隔，也会被当做引用行哦！</code></pre><p>另外，引用是支持嵌套结构的，<strong>只要在该行行首添加更多的 <code>&gt;</code> 数量，即可实现嵌套的功能</strong>：</p><pre><code>引用的嵌套结构：&gt; 马云说：鲁迅先生曾经说过：&gt;&gt; “悲剧将人生的有价值的东西毁灭给人看，喜剧将那无价值的撕破给人看。”</code></pre><p>这里不讨论这样的引用是否符合语文文法，仅作示例哦~</p><h4 id="引用语法演示"><a href="#引用语法演示" class="headerlink" title="引用语法演示"></a>引用语法演示</h4><p>单行引用：</p><blockquote><p>悲剧将人生的有价值的东西毁灭给人看，喜剧将那无价值的撕破给人看。——鲁迅</p></blockquote><p>多行引用：</p><blockquote><p>悲剧将人生的有价值的东西毁灭给人看，喜剧将那无价值的撕破给人看。<br>——鲁迅</p></blockquote><p>引用的嵌套结构：</p><blockquote><p>马云说：鲁迅先生曾经说过：</p><blockquote><p>“悲剧将人生的有价值的东西毁灭给人看，喜剧将那无价值的撕破给人看。”</p></blockquote></blockquote><h3 id="代码标记语法"><a href="#代码标记语法" class="headerlink" title="代码标记语法"></a>代码标记语法</h3><p>感觉会来捣腾这样一个博客的，基本都会和程序员搭上点边？？？<br>那么，在自己的文章中把代码高亮出来的这种操作一定也是非常常用啦！<br>在这里，和大家分享三种标记代码的方式：行内代码标记、普通代码块标记和高亮代码块标记。</p><h4 id="行内代码标记语法"><a href="#行内代码标记语法" class="headerlink" title="行内代码标记语法"></a>行内代码标记语法</h4><p>行内的标记语法 <strong>需要通过两个 ` 把需要被标记的内容包起来</strong> ，上文中已经有很多用到的例子啦！<br>如果我们要把行内的 hello world 标记出来，我们就需要这么做：</p><pre><code>我要把这行里的 `hello world` 标记出来。</code></pre><h5 id="行内代码标记语法演示"><a href="#行内代码标记语法演示" class="headerlink" title="行内代码标记语法演示"></a>行内代码标记语法演示</h5><p>就像用引号一样使用啦！注意，这个符号就是键盘上在数字 1 左边的那个符号哦！<br><strong>演示：</strong><br>我要把这行里的 <code>hello world</code> 标记出来。</p><h4 id="普通代码块标记语法"><a href="#普通代码块标记语法" class="headerlink" title="普通代码块标记语法"></a>普通代码块标记语法</h4><p>我们只需要将需要标记的代码块选中，然后按下键盘上的 <code>TAB</code> 键，即可完成这段代码的标记.<br><strong>请注意，这样的代码块标记上方和下方都需要一个空行进行分隔，否则会出现各种谜一样的问题哦！</strong><br><code>TAB</code> 键在键盘上的这个位置：</p><p><img src="/posts/2018/how-to-play-with-hexo/tab-on-keyboard.png" alt="tab-on-keyboard"></p><h5 id="普通代码块标记语法演示"><a href="#普通代码块标记语法演示" class="headerlink" title="普通代码块标记语法演示"></a>普通代码块标记语法演示</h5><p>其实在上方已经出现了很多类似的演示啦！为大家随便复制一段代码作为演示：</p><pre><code>var executeSync = function(){  var args = Array.prototype.slice.call(arguments);  if (typeof args[0] === &apos;function&apos;){    args[0].apply(null, args.splice(1));  }};</code></pre><h4 id="高亮代码块标记语法"><a href="#高亮代码块标记语法" class="headerlink" title="高亮代码块标记语法"></a>高亮代码块标记语法</h4><p>这种代码标记的方式可以显示行号，并且可以根据你指定的代码语言对代码进行高亮。<br>为了使用这种标记方式，我们需要在代码块的上方和下方各添加一个以三个反引号开头的行，这个符号也是键盘上数字 1 左侧的符号。<br>同样要注意的是，以三个反引号开头的行上方或者下方都需要一个空行进行分隔，否则会出现各种谜一样的问题哦！<br>然后，在开头行的三个反引号后写上代码所使用的语言即可对代码块进行语法高亮：</p><pre><code>这里有三个反引号var executeSync = function(){  var args = Array.prototype.slice.call(arguments);  if (typeof args[0] === &apos;function&apos;){    args[0].apply(null, args.splice(1));  }};这里有三个反引号</code></pre><p>hexo + next 好像有个 bug，在代码块里面三个反引号死活打不出来…大家自行翻译一下~</p><h5 id="高亮代码块标记语法演示"><a href="#高亮代码块标记语法演示" class="headerlink" title="高亮代码块标记语法演示"></a>高亮代码块标记语法演示</h5><p>为了能让这代码块正常显示，真的是让我煞费苦心…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> executeSync = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> args[<span class="number">0</span>] === <span class="string">'function'</span>)&#123;</span><br><span class="line">    args[<span class="number">0</span>].apply(<span class="literal">null</span>, args.splice(<span class="number">1</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="列表语法"><a href="#列表语法" class="headerlink" title="列表语法"></a>列表语法</h3><p>往往我们会需要列举一些东西，一二三四五六七什么的，那么我们可以直接使用 <code>[数字].[空格][内容]</code> 的方式来实现：</p><pre><code>1. 你拍一2. 我拍二3. 她拍三</code></pre><p>如果你不想为他们编号，直接使用 <strong>星号</strong> 代替<code>[数字].</code>即可：</p><pre><code>* 你拍一* 我拍二* 她拍三</code></pre><h4 id="列表语法演示"><a href="#列表语法演示" class="headerlink" title="列表语法演示"></a>列表语法演示</h4><p>有编号的列表：</p><ol><li>你拍一</li><li>我拍二</li><li>她拍三</li></ol><p>没有编号的列表：</p><ul><li>你拍一</li><li>我拍二</li><li>她拍三</li></ul><h3 id="表格语法"><a href="#表格语法" class="headerlink" title="表格语法"></a>表格语法</h3><p>不得不说，markdown 中的表格语法就是一个坑啊！！！<br>这里 <strong>推荐</strong> 大家使用 html 代码来生成表格…<br><del>但介绍还是要介绍的…</del><br><em>通过查阅<a href="https://daringfireball.net/projects/markdown/syntax" target="_blank" rel="noopener">Markdown 作者的文档</a>，发现实际上并没有表格的语法，所以此段删除。</em></p><h3 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h3><p>生成链接的 markdown 语法共有两种，一种是内联式，另一种是引用式。<br>内联式的链接由连续的一对中括号和一对小括号组成，中括号里的内容是链接显示出来的文字，小括号里的内容是链接的地址，写法如下：</p><pre><code>[这是一个链接](https://11.tt)</code></pre><p>而引用式的链接则由像这样连续的两对中括号：</p><pre><code>[这是一个链接][1]</code></pre><p>以及像下方这样在文档任意位置的引用标签组成：</p><pre><code>[1]: https://11.tt</code></pre><p>综合起来，引用式的写法如下：</p><pre><code>[这是一个链接][1][1]: https://11.tt</code></pre><p>此外，如果想要跳转到同一页面中的某个标题处，只需要将链接位置的内容修改为井号加上标题名称即可，像这样：</p><pre><code>[链接语法](#链接语法)</code></pre><p>但是，同一页面中链接无法使用引用式！</p><h4 id="链接语法演示"><a href="#链接语法演示" class="headerlink" title="链接语法演示"></a>链接语法演示</h4><p>无论使用哪一种链接语法，出现的样子都是相同的：<br><a href="https://11.tt">这是通往本站首页的链接</a><br><a href="#链接语法">这是通往本章头部的链接</a></p><h3 id="插入图片语法"><a href="#插入图片语法" class="headerlink" title="插入图片语法"></a>插入图片语法</h3><p>向文中插入图片的方式和链接是十分类似的，只需要在链接语法前加上一个 <code>!</code> 即可，其中，中括号中的内容是鼠标移到图片上时显示的描述。<br>像这样：</p><pre><code>![Markdown 创始人 John Gruber](John Gruber.jpg)</code></pre><p>也可以是这样：</p><pre><code>![Markdown 创始人 John Gruber][1][1]: John Gruber.jpg</code></pre><h4 id="插入图片语法演示"><a href="#插入图片语法演示" class="headerlink" title="插入图片语法演示"></a>插入图片语法演示</h4><p>两种语法显示的图片都是一样的，照片上是 Markdown 的创始人 John Gruber：</p><p><img src="/posts/2018/how-to-play-with-hexo/John-Gruber.jpg" alt="John-Gruber"></p><h4 id="图片插件"><a href="#图片插件" class="headerlink" title="图片插件"></a>图片插件</h4><p>为了更好地整理每一篇文章所使用的图片，我推荐大家使用文章开头提到的 <code>hexo-asset-image</code> 插件。<br>安装方法为：</p><pre><code>$ npm install hexo-asset-image -save+ hexo-asset-image@0.0.3added 13 packages in 6.132s</code></pre><p>当我们安装了这个插件后，每一次通过 <code>hexo new post</code> 命令新建文章时，在文章的相同目录都会建立一个与文章同名的文件夹。<br>在这个文件夹中的图片相对于文章都是相同目录，可以直接使用图片名作为图片链接直接引用该图片。</p><h2 id="生成并发布写好的文章"><a href="#生成并发布写好的文章" class="headerlink" title="生成并发布写好的文章"></a>生成并发布写好的文章</h2><p>其实这一步在我的第一篇文章里面已经做过详细介绍啦！<strong><a href="https://11.tt/posts/2018/set-up-Hexo-with-Coding-Github-https/#%E7%94%9F%E6%88%90%E5%B9%B6%E8%BF%90%E8%A1%8C%E5%8D%9A%E5%AE%A2">→传送门←</a></strong><br>我们使用命令 <code>hexo g</code> 即可生成我们刚刚写好的文章<br>然后通过命令 <code>hexo d</code> 即可发布到我们的 Coding 或者 Github 的 Pages 服务上去。<br>这里就不详细描述了，忘记的同学可以通过上方的传送门穿越时空去复习哦！</p><hr><h1 id="如何为文章添加分类"><a href="#如何为文章添加分类" class="headerlink" title="如何为文章添加分类"></a>如何为文章添加分类</h1><p>这时候我们需要回到文章的头部，在生成完文章时，hexo 自动为我们的文章头部生成了如下的内容：</p><pre><code>---title: my first postdate: 2018-09-09 16:00:00---</code></pre><p>其中，<code>title</code> 是文章的标题，<code>date</code> 是文章的建立时间，都是可以自定义的。<br><em>那么，我们要如何为文章分类呢？</em><br>类似的，我们只需要用到 <code>categories</code> 这个关键词，在冒号后自定义分类名即可，就像下方写的：</p><pre><code>---title: my first postdate: 2018-09-09 16:00:00categories: Hexo---</code></pre><p>这样我就将 <code>my first post</code> 这篇文章添加到了 <code>Hexo</code> 这个分类当中去了。<br><strong>那么！！</strong>我们又要如何查看这些分类呢？<br>这时候，我们要再次使用到 <code>hexo new</code> 这句命令了。<br>不过和上方新建文章不同的是，这次我们要新建的是一个页面，那么我们要使用的命令是：</p><pre><code>$ hexo new page categoriesINFO  Created: D:\myblog\source\categories\index.md</code></pre><p>同样的，在建立页面完后，输出了页面的路径。<br>这个页面拥有独立的文件夹，以及包含页面内容的 <code>index.md</code> 文件。<br>这时候打开这个页面仍然只是一个普通的页面而已，那该如何让这个页面显示文章分类呢？<br>我们打开刚刚新建的 <code>index.md</code> 文件可以看到如同一片普通文章开头的内容：</p><pre><code>---title: categoriesdate: 2018-09-10 21:17:08---</code></pre><p>我们需要为它添加 <code>type</code> 关键字，让它知道自己到底是个什么身份（笑），就像这样：</p><pre><code>---title: categoriesdate: 2018-09-10 21:17:08type: categoriescomments: false---</code></pre><p>其中，<code>comments</code> 关键字是用来设置该页面是否允许评论的，如果你启用了评论功能，那么可以自定义这些页面是否支持评论。<br>然后，在站点的 <code>_config.yml</code> 文件中搜索 <code>category_dir</code> 可以找到如下内容：</p><pre><code>...archive_dir: archivescategory_dir: categoriescode_dir: downloads/code...</code></pre><p>这里已经设置了文章分类文件夹的名称，如果你的文章分类页不叫 <code>categories</code>，那么你需要将其修改为对应的名称。<br>这时候，再次执行 <code>hexo g &amp;&amp; hexo s</code> 命令，并打开你的页面，点击主题里文章分类的链接，即可看到文章的分类啦！</p><hr><h1 id="如何为文章添加标签"><a href="#如何为文章添加标签" class="headerlink" title="如何为文章添加标签"></a>如何为文章添加标签</h1><p>给文章添加标签的方式和添加分类类似，但一篇文章可以有多个标签。<br>我们需要再次回到文章的头部，如果你已经为文章设置了分类，那么文章头部应该是类似这样的：</p><pre><code>---title: my first postdate: 2018-09-09 16:00:00categories: Hexo---</code></pre><p>我们只需要向其中再添加一个关键词 <code>tags</code>，这个关键词可以是数组型的，就像这样：</p><pre><code>---title: my first postdate: 2018-09-09 16:00:00categories: Hexotags: [Hexo, writing, post, 博客, 写作]---</code></pre><p>这样我就为 <code>my first post</code> 这篇文章添加了多个标签。<br><strong>那么！！</strong><del>又来了</del>我们又要如何查看这些标签呢？<br>我们再次使用 <code>hexo new</code> 这句命令新建一个页面：</p><pre><code>$ hexo new page tagsINFO  Created: D:\myblog\source\tags\index.md</code></pre><p>同样的，在建立页面完后，为 <code>tags\index.md</code> 文件头部添加 <code>type</code> 关键字：</p><pre><code>---title: tagsdate: 2018-09-10 21:33:30type: tagscomments: false---</code></pre><p>同样可以在在站点的 <code>_config.yml</code> 文件中找到如下内容：</p><pre><code>...public_dir: publictag_dir: tagsarchive_dir: archives...</code></pre><p>可是，当我们再次执行 <code>hexo g &amp;&amp; hexo s</code> 命令后，打开页面主题里文章标签的链接，却并没有看到我们想看到的样子？？？<br>这时候，神奇的插件再次出马了，我们通过命令安装 <code>hexo-generator-tag</code> 插件：</p><pre><code>$ npm install hexo-generator-tag -save+ hexo-generator-tag@0.2.0updated 1 package in 3.599s</code></pre><p>然后，我们再次执行 <code>hexo g &amp;&amp; hexo s</code> 命令，打开页面主题里文章标签的链接，看，是不是看到了好多的标签呀？！<br>其中，<code>hexo-generator-tag</code> 插件能将我们文章中的标签进行统计，并将页面 <code>type</code> 为 <code>tags</code> 的设置为显示标签的页面。</p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>好啦！今天的分享大会就开到这里！<br>通过这些简单的语法，应该可以应对大部分简单的文章撰写需求啦！<br>顺便，一如既往地，附上官方文档，其实就是作者的博客啦！<a href="https://daringfireball.net/projects/markdown/syntax" target="_blank" rel="noopener">Markdown 作者的文档</a><br>顺带贴上中文版的地址：<a href="https://markdown-zh.readthedocs.io/en/latest/" target="_blank" rel="noopener">Markdown 中文文档</a></p><hr><p>对了！！！你们有没有注意到左下角的神奇魔法呀！！！</p><p><img src="/posts/2018/how-to-play-with-hexo/arrow-left.png" alt="arrow-left"></p><p>哈哈哈哈哈哈哈厉害吧！！！୧(๑•̀◡•́๑)૭<br>剧透一下，下一篇文章就教大家如何添加这只哦！！！<br><strong>敬请期待！！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/posts/2018/how-to-play-with-hexo/how-to-play-with-hexo.jpg&quot; alt=&quot;how-to-play-with-hexo&quot;&gt;&lt;/p&gt;
&lt;p&gt;之前记录了如何搭建博客、给博客添加评论、如何加速博客访问，然而归根结底，博客还是要被用来写文章、做笔记使用的，这才是前面做的万事所需要的东风。&lt;br&gt;我是在使用 Hexo 之后，才开始用 markdown 写文章做笔记的，那么这次就让我这只小菜鸟分享一下在使用 Hexo 写文的经验和技巧吧~让我们真正滴把博客玩起来！&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://11.tt/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://11.tt/tags/Hexo/"/>
    
      <category term="writing" scheme="https://11.tt/tags/writing/"/>
    
      <category term="post" scheme="https://11.tt/tags/post/"/>
    
      <category term="博客" scheme="https://11.tt/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="写作" scheme="https://11.tt/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>使用CDN让你的Hexo博客拥有飞一般的体验</title>
    <link href="https://11.tt/posts/2018/set-up-cdn-for-hexo/"/>
    <id>https://11.tt/posts/2018/set-up-cdn-for-hexo/</id>
    <published>2018-07-01T01:10:02.000Z</published>
    <updated>2019-04-21T06:49:03.334Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/posts/2018/set-up-cdn-for-hexo/set-up-cdn-for-hexo.png" alt="set-up-cdn-for-hexo"></p><p>无论是使用 coding 还是 Github 来进行个人博客的托管都会有一个小小的问题，就是访问速度真的是好慢啊QAQ！而如果将很多的资源比如 css、js 以及图片文件使用 CDN 来进行分发，就能使网站的打开速度变得无比顺滑，体验飞一般的感觉！<br><a id="more"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>在阅读下文之前，如果你还不知道 CDN 是个什么东东，为了不大篇幅引用，请移步<a href="https://baike.baidu.com/item/CDN" target="_blank" rel="noopener">百度百科：CDN词条</a>进行一些了解~</strong><br><em>本文仅仅是为了加速网站的访问，增强用户体验，并不是必须配置的哦！</em><br>首先要说一下我这篇文章的适用人群。<br>首先我们知道，很多的拥有 <code>对象存储</code> 服务的云服务商(如腾讯云)，都能够提供静态网站的托管，就类似 coding 和 Github，只是要将每一次生成的静态资源都上传到自己的存储桶中，然后使用 <code>CDN 服务</code> 将 <code>对象存储</code> 中的内容进行分发，这样就可以非常容易地完成个人博客的全站 CDN。<br><strong>然而！</strong><br>如果使用国内的 <code>CDN 服务</code> 来进行静态网站托管，域名必须要备案，而根据<a href="http://www.miit.gov.cn/n1146285/n1146352/n3054355/n3057709/n3057722/c5930543/content.html" target="_blank" rel="noopener">工业和信息化部关于规范互联网信息服务使用域名的通知</a>，只有过审的域名后缀才可以备案(<a href="http://www.miit.gov.cn/n1146285/n1146352/n3054355/n3057709/n3057722/c4377447/content.html" target="_blank" rel="noopener">点此查看可以备案的域名后缀</a>)，比如我的域名后缀 <code>.tt</code> 就不在此列😥。</p><p><img src="/posts/2018/set-up-cdn-for-hexo/sad-is-so-big.jpg" alt="sad-is-so-big"></p><p><strong>那么就尴尬了😅…</strong><br>既然我的域名后缀无法备案，那么就没办法直接使用上述方法进行全站 CDN 了。<br>于是，我使用了一种曲线救国的方式来完成这样的 <strong>操作</strong> 。</p><p><img src="/posts/2018/set-up-cdn-for-hexo/what-kind-of-process.jpg" alt="what-kind-of-process"></p><p>我备案了一个符合要求后缀的域名，然后将所有的 css、js 以及图片文件等放到该域名对应的存储桶下，然后在 Hexo 网站中调用这个资源域名下对应的静态资源以达到无备案启用 CDN 的目的。<br><strong>另外！</strong><br>对于我们的 Hexo 博客来说：<br><em>首先，我们主要只需要将图片资源使用 CDN 来进行分发，如果进行全站 CDN(包括 css, js 等其他静态资源)，那么会有一笔额外的流量开支(虽然现在也没多少人访问QAQ，不过蚊子再小也是肉嘛！说不定有一天我火了呢！hhh)，况且，自己的 CDN 也未必有公共前端资源来得更快。</em><br><em>然后， HTTP协议对同一个域名的同时下载线程数有限制。主要是为了优化下载速度，防止同一域名下下载线程数过多，导致下载速度变慢。各个浏览器都会遵守这个规定，但是限制的数目可能不一致。基于这个原因，可将资源部署于不同的域名，以达到最大化并发下载。</em><br><em>最后，使用不同的域名可以实现静态资源和动态资源的分离，有利于 CDN 的部署，这段话是抄来改了改的QAQ(作者：ziwozizhan，原始链接：<a href="https://blog.csdn.net/ziwozizhan/article/details/53420501" target="_blank" rel="noopener">https://blog.csdn.net/ziwozizhan/article/details/53420501</a>)，虽然我们的 Hexo 博客全是静态的…</em><br>这些都是使用独立的域名进行静态资源部署的优点~<br><strong>那么！</strong><br>如果你有我这样的烦恼，或者你想要将静态资源使用不同的域名进行 CDN 部署，那么相信我！<strong>你找对了教程！(#^.^#)</strong><br>事不宜迟，我们赶紧开始吧！</p><hr><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>各位客官大家建党节快乐！<code>咚咚咚</code> 敲黑板！Miaia 老师的 Hexo 小课堂又开课啦！<br>同样的，我们还是先说一下本文配置 CDN 所使用的环境：</p><pre><code>* Windows 10 1803* hexo-v3.7.1 + NexT.Muse v6.3.0* node-v8.11.2-x64* git version 2.17.1.windows.2* 还是小可爱一枚</code></pre><p>在本文的配置中，我将腾讯云的<a href="https://cloud.tencent.com/product/cos" target="_blank" rel="noopener">对象存储</a>和<a href="https://cloud.tencent.com/product/cdn" target="_blank" rel="noopener"> CDN服务</a>搭配使用以进行 CDN 的部署(<strong>主要是图片资源</strong>)。另外，为了节约部分流量，我分别使用了国内和国外的 <strong>前端公共静态库</strong> 对国内(coding)和国外(Github)不同代码托管库中部分 css、js 文件进行公共 CDN 加速，这部分在 NexT 主题中已经被完美滴独立开来，非常容易配置。</p><p><img src="/posts/2018/set-up-cdn-for-hexo/tencent-cloud-global-facilities.jpg" alt="tencent-cloud-global-facilities"></p><p>如果你使用的不是 NexT 主题，只要将用到的静态资源链接直接更换即可，同样非常方便。<br>BTW，海外的静态资源(即Github上的静态资源)由于价格(<strong>腾讯云送了我贼多 CDN 流量</strong>)和服务商的选择问题(<strong>腾讯云海外加速公测申请还没通过</strong>)，我暂时没有进行 CDN 配置，等待以后配置了也会更新文章，但我估计和国内的没有多大区别hhh~<br>好啦！介绍完了背景和使用的服务，让我们正式开课吧！</p><hr><h1 id="基于腾讯云部署-CDN"><a href="#基于腾讯云部署-CDN" class="headerlink" title="基于腾讯云部署 CDN"></a>基于腾讯云部署 CDN</h1><p>在这个章节当中，主要会给大家介绍基于腾讯云对象存储和 CDN 服务来对我们的 Hexo 博客进行 CDN 的部署。<br><strong>在继续之前有一点需要对大家进行提醒：本文中需要一个已经完成备案的域名，由于各地备案要求不一样，所需备案时间也不一样，但一般都至少需要三个工作日，为了不让大家配着配着扫兴，那么请注意，如果你还没有一个完成备案的域名，你可能不能在阅读本文的同时完成 CDN 的部署，你可以先行ICP备案，然后再来继续这篇文章的教程哟！(＾Ｕ＾)ノ~ＹＯ</strong><br>请大家提前注册好腾讯云的账号哈~放上官网链接：<a href="https://cloud.tencent.com/" target="_blank" rel="noopener">腾讯云(https://cloud.tencent.com/)</a></p><h2 id="对象存储部署"><a href="#对象存储部署" class="headerlink" title="对象存储部署"></a>对象存储部署</h2><h3 id="创建存储桶"><a href="#创建存储桶" class="headerlink" title="创建存储桶"></a>创建存储桶</h3><p>首先我们打开存储桶列表的页面：<a href="https://console.cloud.tencent.com/cos5/bucket" target="_blank" rel="noopener">存储桶列表</a><br>打开后我们可以看到这样的界面：</p><p><img src="/posts/2018/set-up-cdn-for-hexo/create-bucket-overview.png" alt="create-bucket-overview"></p><p>我们点击上图中右侧红框“<strong>创建存储桶</strong>”来进行创建，会得到一个框框，在框框离可以看到以下内容：</p><p><img src="/posts/2018/set-up-cdn-for-hexo/create-bucket-detail.png" alt="create-bucket-detail"></p><p>其中，用红框标注的部分需要被选择为“<strong>公有读私有写</strong>”，名称可以进行 <strong>自定义</strong> ，所属地域为了方便我们自己使用，我们可以 <strong>选择离自己比较近的位置</strong> ，填写完成后点击确定，至此，我们已经完成了存储桶的创建。</p><h3 id="上传静态资源"><a href="#上传静态资源" class="headerlink" title="上传静态资源"></a>上传静态资源</h3><p>在完成存储桶创建后(即点击上图中确定后)，页面会自动跳转成下图中的页面，我们在跳转后点击下图红框中的“<strong>上传文件</strong>”：</p><p><img src="/posts/2018/set-up-cdn-for-hexo/bucket-overview.png" alt="bucket-overview"></p><p>在点击上图中的上传文件后，我们可以下图左侧的框框，与此同时，我们进入到博客根目录下的“<strong>public</strong>”文件夹，public 文件夹中的内容可能类似下图右侧资源管理器中的列表。<br><strong>注：public 文件夹中的内容是我们执行 hexo c &amp;&amp; hexo g 后获得的文件夹，即上传到 coding 和 Github上的文件夹。</strong><br>为了使教程受用范围更广，并且不造成混淆，以及方便下文中的配置，此处我将整个博客由 hexo 生成的所有内容(即整个 public 文件夹)全部上传到存储桶中，知道哪些需要哪些不需要的同学可以根据自己的实际情况进行筛选。<br>我们将下图右侧资源管理器中所有内容全选，用鼠标拖到左侧框框中去，然后点击下方的“上传”按钮，即可进行整个博客资源的上传：</p><p><img src="/posts/2018/set-up-cdn-for-hexo/upload-assets.png" alt="upload-assets"></p><p>下图是点击“<strong>上传</strong>”按钮的状态，可以看到页面右上角有上传的进度，根据个人网速和存储桶位置快慢不同，但因为总量不会很大，所以一般都挺快的。</p><p><img src="/posts/2018/set-up-cdn-for-hexo/uploading-files.png" alt="uploading-files"></p><p>在上传完成后，我们可以看到类似下图这样的一个目录结构：</p><p><img src="/posts/2018/set-up-cdn-for-hexo/files-uploaded.png" alt="files-uploaded"></p><h3 id="存储桶回源配置"><a href="#存储桶回源配置" class="headerlink" title="存储桶回源配置"></a>存储桶回源配置</h3><p>我们已经完成了静态资源的上传，接下来为了防止在资源尚未上传到存储桶时，造成页面请求的静态资源 404 ，我们需要为该存储桶配置一下回源功能。<br>在上文中相同页面，点击下图红框中的“<strong>基础配置</strong>”标签：</p><p><img src="/posts/2018/set-up-cdn-for-hexo/origin-overview.png" alt="origin-overview"></p><p>将该标签页拖到最下方，我们可以看到下图红框中的“<strong>回源设置</strong>”：</p><p><img src="/posts/2018/set-up-cdn-for-hexo/find-origin-overview.png" alt="find-origin-overview"></p><p>点击上图中红框内的“<strong>编辑</strong>”按钮，按下图中配置，请注意，在红色箭头位置填写你自己博客的域名，然后点击保存：</p><p><img src="/posts/2018/set-up-cdn-for-hexo/origin-detail.png" alt="origin-detail"></p><p>然后我们的回源设置就已经配置完成了：</p><p><img src="/posts/2018/set-up-cdn-for-hexo/origin-done.png" alt="origin-done"></p><p>至此，我们对象存储部分已经全部配置完成了，仔细好学的你可能会发现这里有跨域访问CORS设置和防盗链等设置。<br><strong>恭喜你！都学会抢答啦！</strong><br><strong>但是！</strong>本文是要进行 CDN 的部署，而在下文中，CDN 配置中也有相关内容的配置，并且优先级比存储桶的配置更高，所以偷个懒，索性在 CDN 部署中直接进行配置。<br>不要心急哦！✿✿ヽ(°▽°)ノ✿ 继续继续！</p><h2 id="CDN-服务部署"><a href="#CDN-服务部署" class="headerlink" title="CDN 服务部署"></a>CDN 服务部署</h2><p>哇！终于到本文的最核心部分了！虽然少了哪一部分都不能正常运作，但是到这里还是很激动哒！😸</p><h3 id="添加-CDN-域名"><a href="#添加-CDN-域名" class="headerlink" title="添加 CDN 域名"></a>添加 CDN 域名</h3><p>还是先直接进入到腾讯云 CDN 域名管理的页面：<a href="https://console.cloud.tencent.com/cdn/access" target="_blank" rel="noopener">CDN 域名管理</a><br>我们可以看到如下页面，点击下图红框中的“<strong>添加域名</strong>”：</p><p><img src="/posts/2018/set-up-cdn-for-hexo/cdn-add-domain-overview.png" alt="cdn-add-domain-overview"></p><p>然后我们就可以看到一个拥有“<strong>域名配置</strong>”和“<strong>加速服务配置</strong>”这两个标签卡的页面~</p><p><img src="/posts/2018/set-up-cdn-for-hexo/cdn-add-domain-detail.png" alt="cdn-add-domain-detail"></p><p>其中红框中的部分需要我们进行修改。修改说明如下：</p><ol><li><strong>第一个红框中填写的域名必须已经备案！否则无法添加！并且该 CDN 域名是<em>必要</em>的！请务必注意！</strong><br><a href="https://cloud.tencent.com/document/product/243" target="_blank" rel="noopener">备案教程请点击此处</a></li><li>第二个红框下拉栏中请选择“<strong>对象存储（COS）</strong>”</li><li>第三个红框中请选择我们在“<a href="#创建存储桶">创建存储桶</a>”章节中所创建存储桶的 <strong>存储桶访问域名</strong> 。</li></ol><p>除了红框中的内容，其余所有部分保持默认即可，点击“<strong>提交</strong>”添加域名，如果填写的没有问题(主要是域名备案问题)，我们就可以看到如下弹出框：</p><p><img src="/posts/2018/set-up-cdn-for-hexo/cdn-add-domain-success.png" alt="cdn-add-domain-success"></p><p>至此，CDN 域名已经添加成功啦~🤩</p><h3 id="配置-CDN-域名"><a href="#配置-CDN-域名" class="headerlink" title="配置 CDN 域名"></a>配置 CDN 域名</h3><p>我们需要对该 CDN 域名进行一下简单的配置以完善整个功能。<br>点击上图中的“<strong>更多配置</strong>”按钮，我们可以进入到以下页面：</p><p><img src="/posts/2018/set-up-cdn-for-hexo/set-up-cdn-overview.png" alt="set-up-cdn-overview"></p><p>在该页面顶部位置，我们可以看到“基本配置”、“访问控制”、“缓存控制”、“回源配置”、“安全配置”和“高级配置”共六个标签页。<br>我们要对其中的“访问控制”、“回源配置”和“高级配置”三个标签页进行 <strong>很多项</strong> 的配置。<br>因为配置项比较多，所以就不一一进行列举了，我分别将每个标签页中内容用红框标注出来，红框中的内容是已经配置完成的样子，并且我会在下方附上这样配置的说明。</p><h4 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h4><p>首先，“<strong>访问控制</strong>”标签页，一共有三个选项需要修改，分别对应三个红框中的内容：</p><p><img src="/posts/2018/set-up-cdn-for-hexo/set-up-cdn-authcontrol.png" alt="set-up-cdn-authcontrol"></p><ol><li>第一个红框中“<strong>过滤参数</strong>”，一般来说<em>若资源URL中不同参数代表相同的内容，开启过滤参数，可以有效提升缓存命中率。</em>但对我们的静态站点来说并不需要这个选项，开启反而可能造成问题，一般这里默认是关的，如果它不小心弹开了，把它关闭即可。</li><li>第二个红框中“<strong>防盗链配置</strong>”就是我们<a href="#存储桶回源配置">上文存储桶配置</a>中并没有进行的操作，我们务必在这里进行白名单配置，否则如果被别人(一般也不会有…)盗链，那么会消耗你的 CDN 流量，这可都是白花花的银子呀~请在白名单中添加你的博客域名。</li><li>第三个红框中“<strong>IP访问限频配置</strong>”，这个是为了防止CC攻击，但我们的网站挂在 coding 和 Github 上应该没事？我也不是很懂，但不怕一万就怕万一，还是开启比较好。其中QPS需要稍微调大一点，否则如果你设置为10，而你一个页面请求的静态资源超过10个，那么多余的部分就会有 514 HTTP状态码，如果按照本文进行配置后，你发现你的网页显示不正常，而某些资源的状态码是514，<strong>那么很可能就是这里设置的原因</strong>。</li></ol><h4 id="回源配置"><a href="#回源配置" class="headerlink" title="回源配置"></a>回源配置</h4><p>然后是“<strong>回源配置</strong>”标签页，只有一个配置需要打开，如下图红框中所示：</p><p><img src="/posts/2018/set-up-cdn-for-hexo/set-up-cdn-origin.png" alt="set-up-cdn-origin"></p><p>其中，回源跟踪301/301的解释请见官方文档：<a href="https://cloud.tencent.com/document/product/228/7183" target="_blank" rel="noopener">什么是回源跟随301/302</a>，反正挺高级的，感觉开了更好不开也没事O(∩_∩)O哈哈哈哈哈</p><h4 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h4><p>最后到了“<strong>高级配置</strong>”标签页，这部分的每一个内容都需要配置，并且涉及到申请https证书的部分需要跳转到证书管理进行配置，所以这部分进行详细说明，内容较多但不复杂，请耐心往下看哦~(づ￣3￣)づ╭❤～<br>我们先看一下配置之前这个标签页是什么样子的：</p><p><img src="/posts/2018/set-up-cdn-for-hexo/set-up-cdn-senior-overview.png" alt="set-up-cdn-senior-overview"></p><p>我们正式开始配置啦！</p><hr><p>第一个，“<strong>带宽封顶配置</strong>”，配置完如下图所示：</p><p><img src="/posts/2018/set-up-cdn-for-hexo/set-up-cdn-senior-first.png" alt="set-up-cdn-senior-first"></p><p>第一个的配置比较简单，只需要打开开关即可。打开这个配置的原因是，在某些特殊情况，比如DDoS攻击等，可以抵抗攻击并且减少费用，毕竟，走 CDN 无论流量还是带宽都是算钱的哦！</p><hr><p>第二个，“<strong>HTTPS配置</strong>”，因为我们源站已经开启了https，如果 CDN 没有开启https，那么访问站点时就会提示我们的部分内容不安全，所以我们必须在此配置https。<br>首先，我们前往<a href="https://console.cloud.tencent.com/ssl" target="_blank" rel="noopener">腾讯云SSL证书管理</a>页面申请一个新的证书，打开页面后我们可以看到如下内容：</p><p><img src="/posts/2018/set-up-cdn-for-hexo/set-up-cdn-senior-second-applyssl-overview.png" alt="set-up-cdn-senior-second-applyssl-overview"></p><p>我们点击上图红框中的“<strong>申请证书</strong>”按钮，并选择下图中左侧的免费证书，点击“<strong>确定</strong>”：</p><p><img src="/posts/2018/set-up-cdn-for-hexo/set-up-cdn-senior-second-choose-ssltype.png" alt="set-up-cdn-senior-second-choose-ssltype"></p><p>我们进入到下一个页面，其中，<strong>通用名称</strong>需要填写<a href="#添加 CDN 域名">添加 CDN 域名</a>章节中添加的 CDN 域名，然后填写自己的电子邮箱，自定义备注名，其余位置保持默认即可。</p><p><img src="/posts/2018/set-up-cdn-for-hexo/set-up-cdn-senior-second-applyssl-detail.png" alt="set-up-cdn-senior-second-applyssl-detail"></p><p>填写完成后点击下一步，进入到“<strong>域名身份验证</strong>”页面，由于我使用的域名使用的是腾讯云的云解析服务，使用“<strong>自动DNS验证</strong>”即可，如果你没有使用腾讯云的云解析，请选择合适的验证方式，然后点击“<strong>确认申请</strong>”按钮，稍等片刻即可完成申请。</p><p><img src="/posts/2018/set-up-cdn-for-hexo/set-up-cdn-senior-second-applyssl-check.png" alt="set-up-cdn-senior-second-applyssl-check"></p><p>然后，我们回到“<strong>高级配置</strong>”标签页，点击下图红框中的“<strong>前往配置</strong>”按钮：</p><p><img src="/posts/2018/set-up-cdn-for-hexo/set-up-cdn-senior-second-overview.png" alt="set-up-cdn-senior-second-overview"></p><p>我们会进入到如下界面，按照图示中红框中标注的部分，选择前文添加的域名和申请的证书，然后点击“<strong>提交</strong>”即可完成https配置：</p><p><img src="/posts/2018/set-up-cdn-for-hexo/set-up-cdn-senior-second-detail.png" alt="set-up-cdn-senior-second-detail"></p><p>让我们再次回到“<strong>高级配置</strong>”标签页，找到下图所示的“<strong>HTTP2.0配置</strong>”，并打开“<strong>HTTP2.0</strong>”：</p><p><img src="/posts/2018/set-up-cdn-for-hexo/set-up-cdn-senior-third.png" alt="set-up-cdn-senior-third"></p><p>最后，同样是在“<strong>高级配置</strong>”标签页，找到下图所示的“<strong>HTTP Header配置</strong>”，点击“<strong>添加HTTP Header</strong>”按钮：</p><p><img src="/posts/2018/set-up-cdn-for-hexo/set-up-cdn-senior-fourth-overview.png" alt="set-up-cdn-senior-fourth-overview"></p><p>在弹出框中如下图所示填写，然后点击确定即可：</p><p><img src="/posts/2018/set-up-cdn-for-hexo/set-up-cdn-senior-fourth-detail.png" alt="set-up-cdn-senior-fourth-detail"></p><p>这个配置是因为我们的静态资源中有一些会访问外链，会造成一些跨域问题，必须要进行允许，更专业的解释在这里<a href="https://cloud.tencent.com/document/product/228/6296" target="_blank" rel="noopener">HTTP Header 配置</a>。<br>哇这么大一堆终于配置完了！！！！！٩(๑&gt;◡&lt;๑)۶&gt;)<br>放一张配置完的“<strong>高级配置</strong>”标签页截图：</p><p><img src="/posts/2018/set-up-cdn-for-hexo/set-up-cdn-senior-done.png" alt="set-up-cdn-senior-done"></p><p>呀哈哈！终于腾讯云上的配置结束了，接下来，我们就要在本地对 Hexo 博客进行一定的配置来引用我们部署好的 CDN 服务。</p><hr><h1 id="配置博客使用-CDN"><a href="#配置博客使用-CDN" class="headerlink" title="配置博客使用 CDN"></a>配置博客使用 CDN</h1><p>首先我们需要思考一下，究竟有哪些文件是公共库中有的，而哪些是只能使用我们自有 CDN 的。<br>我以自己为例：</p><ul><li>第一，我原创文章中的图片都是我自己截取编辑的，肯定在这个世界上是独一无二的，公共库和图床中必定没有，所以要在自有 CDN 中引用；</li><li>第二，Next 主题中一些独特的 css、js 文件和一些控件、图标的图片文件，公共库中一般也是没有的，所以也要在自有 CDN 中引用；</li><li>第三，那些如 jQuery、velocity 乃至于我上一篇文章中 Valine 评论功能使用的 Valine.min.js 文件，这些都是非常多的人在用的，在公共库中都是有的，那么我们就可以将这部分引用公共库 CDN 中的静态文件。</li></ul><p>所以这一章节分为两个部分。<br>第一是将我们独一无二的静态资源，即上方第一第二，使用上文中我们部署的 CDN 服务。<br>第二是将一些可以使用公共静态库 CDN 的静态资源，即上方第三，进行链接替换。<br><strong>终于可以看到效果了！你感到激动吗！！！</strong></p><h2 id="配置使用自有-CDN"><a href="#配置使用自有-CDN" class="headerlink" title="配置使用自有 CDN"></a>配置使用自有 CDN</h2><p>事实上，我们使用的 Next 主题已经很好地为我们将以上的问题进行分离，方便使用 CDN 。<br>将 Next 主题中一些独特的 css、js 文件和一些控件、图标的图片文件调用 CDN 非常简单，而自己图片资源需要修改一下我们安装的插件。<br>首先，我们先打开主题的配置文件 <code>_config.yml</code> ，忘记了的同学，老师提醒你，是在根目录下 <code>themes/next/_config.yml</code> 哦！<br>在配置文件中搜索：<code>Assets</code> ，可以看到如下内容：</p><pre><code># Assetscss: cssjs: jsimages: images</code></pre><p>我们需要将其修改为：</p><pre><code># Assetscss: https://前文中添加的CDN域名/cssjs: https://前文中添加的CDN域名/jsimages: https://前文中添加的CDN域名/images</code></pre><p>这样我们已经非常容易地将主题中的资源文件使用了自有 CDN 。<br>然而，在写文章的大家基本应该都是使用了 <code>hexo-asset-image</code> 这个插件来添加图片对吧~<br>如果不是，在博客根目录下打开 <code>Git Bash</code> ，输入 <code>npm install hexo-asset-image --save</code> 即可安装这个插件。<br>要知道，这个插件是为我们生成图片链接的，在文章中我们通过 <code>![图片描述](图片文件名)</code> 这样的方式来添加图片，而每一篇文章都有一个同名文件夹，该文件夹中存储着我们所有的图片，在 <code>hexo g</code> 时生成相应的图片链接。<br>那么，我们就需要修改生成的文件，来使用我们的自有 CDN。<br>首先，找到并打开博客根目录下 <code>node_modules/hexo-asset-image/index.js</code> 这个文件。<br>然后搜索：<code>$(this).attr(&#39;src&#39;, &#39;/&#39; + link + src);</code> 这行内容，我们可以看到以下内容：</p><pre><code>...if(linkArray[linkArray.length - 1] == srcArray[0])  srcArray.shift();    src = srcArray.join(&apos;/&apos;);    $(this).attr(&apos;src&apos;, &apos;/&apos; + link + src);  }});data[key] = $.html();...</code></pre><p>这部分代码就是生成图片链接的部分，我们将其修改为：</p><pre><code>...if(linkArray[linkArray.length - 1] == srcArray[0])  srcArray.shift();    src = srcArray.join(&apos;/&apos;);    $(this).attr(&apos;src&apos;, &apos;https://前文中添加的CDN域名/&apos; + link + src);  }});data[key] = $.html();...</code></pre><p>保存文件，重新生成！哇哦！居然成功了诶！！！</p><h2 id="配置使用公共静态库"><a href="#配置使用公共静态库" class="headerlink" title="配置使用公共静态库"></a>配置使用公共静态库</h2><p>我们使用的 Next 主题已经很好地为我们将以上的问题进行分离，同样方便使用公共静态库。<br>首先，我们先打开主题的配置文件 <code>_config.yml</code> ，在配置文件中搜索：<code>Script Vendors</code>，搜索结果下面一大片全都是可以使用公共静态库的部分，直接在冒号后填写我们要替换的公共静态库链接即可。因为每个人使用的功能都不太一样，这里我就不一条一条填写了，为大家提供几个好用的我自己在用的前端公共静态库。国内篇适合 coding 配置，国外篇适合 Github 配置，特殊篇请看说明。</p><h3 id="国内篇"><a href="#国内篇" class="headerlink" title="国内篇"></a>国内篇</h3><p>国内有很多很多的静态库，我看了不少评测，最终选择的是 BootCDN 这个前端公共库。<br>官方网站地址是<a href="http://www.bootcdn.cn/" target="_blank" rel="noopener">http://www.bootcdn.cn/</a>，只需要在其中进行搜索，基本都是有的！</p><p><img src="/posts/2018/set-up-cdn-for-hexo/bootcdn.png" alt="bootcdn"></p><h3 id="国外篇"><a href="#国外篇" class="headerlink" title="国外篇"></a>国外篇</h3><p>国外的静态库也同样很多，但是很多就没有那么全，在这里我推荐 cdnjs 这个前端公共库。<br>官方网站地址是<a href="https://cdnjs.com/" target="_blank" rel="noopener">https://cdnjs.com/</a>，只需要在其中进行搜索，基本也都是有的！</p><p><img src="/posts/2018/set-up-cdn-for-hexo/cdnjs.png" alt="cdnjs"></p><h3 id="特殊篇"><a href="#特殊篇" class="headerlink" title="特殊篇"></a>特殊篇</h3><p>搜索过的童鞋可能会发现，我们上文中使用到的 Valine 在上面两个库中居然暂时都没有？？？<br>那么我们对 Valine 有一个特别的选择，这个公共库对于国内外访问都蛮快的，如果有什么上面两个没有，也可以到这里搜索一下。<br>这家公共库名字叫 jsDelivr ，官网地址是<a href="https://www.jsdelivr.com/" target="_blank" rel="noopener">https://www.jsdelivr.com/</a>，同样拥有搜索功能，很容易就可以找到啦！</p><p><img src="/posts/2018/set-up-cdn-for-hexo/jsdelivr.jpg" alt="jsdelivr"></p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>告诉大家一下检查是否生效的方法，只需要在浏览器内右键-检查，选择 Network，然后刷新页面，查看下方静态资源的链接就可以啦！比如这样：</p><p><img src="/posts/2018/set-up-cdn-for-hexo/check-success.png" alt="check-success"></p><p>本文的战斗时间真的非常长…其实我当中跑出去旅游了一段时间hhh<br>我每次在写文章的时候都会重新配置一遍，因为担心自己会写错误导大家…<br>当然…很可能还会漏掉一点什么或者错掉一点什么…欢迎指出！感恩！！！<br>哇呜！居然写了这么长的一篇文章qaq，真的好多图片啊！<br>小伙伴们可以给我分享一下推荐一下给身边要建博客的小伙伴们吗！谢谢大家！！！♪(･ω･)ﾉ</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/posts/2018/set-up-cdn-for-hexo/set-up-cdn-for-hexo.png&quot; alt=&quot;set-up-cdn-for-hexo&quot;&gt;&lt;/p&gt;
&lt;p&gt;无论是使用 coding 还是 Github 来进行个人博客的托管都会有一个小小的问题，就是访问速度真的是好慢啊QAQ！而如果将很多的资源比如 css、js 以及图片文件使用 CDN 来进行分发，就能使网站的打开速度变得无比顺滑，体验飞一般的感觉！&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://11.tt/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://11.tt/tags/Hexo/"/>
    
      <category term="cdn" scheme="https://11.tt/tags/cdn/"/>
    
      <category term="腾讯云" scheme="https://11.tt/tags/%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    
      <category term="cloud" scheme="https://11.tt/tags/cloud/"/>
    
      <category term="cos" scheme="https://11.tt/tags/cos/"/>
    
      <category term="加速" scheme="https://11.tt/tags/%E5%8A%A0%E9%80%9F/"/>
    
      <category term="访问速度" scheme="https://11.tt/tags/%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/"/>
    
      <category term="速度" scheme="https://11.tt/tags/%E9%80%9F%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>使用Valine.js评论系统让游客们到你的Hexo博客留个脚印吧</title>
    <link href="https://11.tt/posts/2018/add-valine-to-your-blog/"/>
    <id>https://11.tt/posts/2018/add-valine-to-your-blog/</id>
    <published>2018-06-16T10:00:00.000Z</published>
    <updated>2019-04-21T06:49:03.157Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/posts/2018/add-valine-to-your-blog/add-valine-to-your-blog.png" alt="add-valine-to-your-blog"></p><p>哇真的超开心你们知道嘛！我的上一篇文章“<a href="https://11.tt/posts/2018/set-up-Hexo-with-Coding-Github-https/">[Hexo]基于Hexo+Coding+Github搭建个人博客的全过程</a>”发布不到24个小时就有超过5位大佬来评论了！我之前那个lowlow的博客！一年多都没有人给我留个言评个论！真的超级开心！超级激动！感觉我写了好几天的文章得到了认可！<br><a id="more"></a><br>所以！今天！我要教大家！如何给这个用了 Next 主题的 Hexo 博客添加评论功能！让广大群众！一起快乐！呀哈哈(玩塞尔达的应该知道这个梗吧嘻嘻)！<br><strong>本文在电脑上浏览体验最佳</strong></p><blockquote class="blockquote-center"><p>我开启了邮件提醒评论回复，你们为什么不留下 <strong>邮箱地址</strong> 咱们做个深入交流呢？？？<br><strong>Miaia</strong></p></blockquote><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>首先说一下实验环境，啊呸，博客使用的环境，呃虽然觉得这个说法怪怪的…我文字功底还有待提高，先将就看嘻嘻！<br>本文配置 Valine 功能所使用的环境如下：</p><pre><code>* Windows 10 1803* node-v8.11.2-x64* git version 2.17.1.windows.2* hexo-v3.7.1* NexT.Muse v6.3.0* LeanCloud* 小可爱一枚</code></pre><p><strong>请注意，本文配置 Valine 是基于 Next 主题的，相对来说更简单一些，如果不是使用 Next 主题，这里提供<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine 官方文档</a>给大家参阅，当然也欢迎大家留言交流啦！</strong></p><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><p>2018.9.21 添加<a href="#免费版云引擎定时启动">免费版云引擎定时启动</a>章节，解决 @Yanx 提出的某些评论收不到的问题。</p><hr><h1 id="LeanCloud-基本应用创建"><a href="#LeanCloud-基本应用创建" class="headerlink" title="LeanCloud 基本应用创建"></a>LeanCloud 基本应用创建</h1><p>一如既往，我先放上官网链接 <a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud (https://leancloud.cn/)</a>，我觉得找到官网是一个很好的习惯QAQ，毕竟他们要名声不会把坑爹的东西不负责任地放到网上给大家用…也能避免很多坑…</p><h2 id="注册-LeanCloud"><a href="#注册-LeanCloud" class="headerlink" title="注册 LeanCloud"></a>注册 LeanCloud</h2><p>哎呀省的绕路了，直接给大家注册地址吧，<a href="https://leancloud.cn/dashboard/login.html#/signup" target="_blank" rel="noopener">LeanCloud 注册链接</a>。</p><p><img src="/posts/2018/add-valine-to-your-blog/register-leancloud.png" alt="register-leancloud"></p><p>我觉得吧，注册这件事情应该是不用多说的QAQ，就填好信息咱们接着往下看！</p><h2 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h2><p>在我们注册登陆之后我们可以看到下图中的这样一个界面，点击红框中的“创建应用”。</p><p><img src="/posts/2018/add-valine-to-your-blog/create-application-overview.png" alt="create-application-overview"></p><p>然后在弹出框中填写你应用的名字，使用免费的开发版即可~</p><p><img src="/posts/2018/add-valine-to-your-blog/create-application-detail.png" alt="create-application-detail"></p><p>这样应用就创建完成啦！创建完成后我们可以看到这样的一个东东。</p><p><img src="/posts/2018/add-valine-to-your-blog/application-created.png" alt="application-created"></p><h2 id="获取应用-Key"><a href="#获取应用-Key" class="headerlink" title="获取应用 Key"></a>获取应用 Key</h2><p>我们点击应用名进入应用页面。<br>然后在新出来的页面当中，依次点击最左侧红框中的“设置”和中间红框中的“应用 Key”，我们就可以看到这样的一个界面。</p><p><img src="/posts/2018/add-valine-to-your-blog/find-app-key.png" alt="find-app-key"></p><p>在最右侧的两个红框中，分别是我们刚刚创建应用的 App ID 和 App Key，我们将其复制下来以供接下来的配置使用。</p><h2 id="配置安全域名"><a href="#配置安全域名" class="headerlink" title="配置安全域名"></a>配置安全域名</h2><p>现在这个状态，任何人都可以访问我们的资源，这样就有可能会导致资源的泄露，所以我们需要配置安全域名，只有在白名单中的域名才可以使用我们的资源。<br>仍然是在刚才的设置页面，点击当中红框的“安全中心”，在最右侧红框“Web 安全域名”中根据提示填写我们站点的域名后点击保存即可。</p><p><img src="/posts/2018/add-valine-to-your-blog/set-up-safe-domains.png" alt="set-up-safe-domains"></p><h1 id="配置-Next-主题中的-Valine-评论功能"><a href="#配置-Next-主题中的-Valine-评论功能" class="headerlink" title="配置 Next 主题中的 Valine 评论功能"></a>配置 Next 主题中的 Valine 评论功能</h1><p>接下来我们就要把评论功能添加到博客中去啦！<br>我们到 <strong>主题的配置文件 <code>_config.yml</code></strong> 中搜索 <code># Valine.</code> 这一段字符，我们可以看到这样的内容：</p><pre><code># Valine.# You can get your appid and appkey from https://leancloud.cn# more info please open https://valine.js.orgvaline:  enable: false  appid:  # your leancloud application appid  appkey:  # your leancloud application appkey  notify: false # mail notifier , https://github.com/xCss/Valine/wiki  verify: false # Verification code  placeholder: Just go go # comment box placeholder  avatar: mm # gravatar style  guest_info: nick,mail,link # custom comment header  pageSize: 10 # pagination size</code></pre><p>每一个字段对应的功能如下：</p><pre><code>enable: false              # 是否开启valine评论功能，可用参数：true, falseappid:                     # 我们刚刚创建的leancloud应用获取的App IDappkey:                    # 我们刚刚创建的leancloud应用获取的App Keynotify: false              # 是否开启有新评论或回复是的邮件提醒，可用参数：true, falseverify: false              # 是否开启评论时需要输入验证码，可用参数：true, falseplaceholder: Just go go    # 在评论框内显示的提示性文字avatar: mm                 # 头像的类型guest_info: nick,mail,link # 自定义可选让用户填写的个人信息，nick=昵称，mail=邮箱，link=用户主页pageSize: 10               # 控制每页最多显示的评论条数</code></pre><p>我们将刚刚获得的 App ID 和 App Key 分别填写到 <code>appid</code> 和 <code>appkey</code> 这两个字段的冒号后面。<br><strong>再次提醒！冒号后面需要有一个 *空格*</strong><br>并且将 <code>enable</code> 修改为 <code>true</code>，其他的参数可以根据实际情况自行修改，其中 <code>notify</code> 的配置我们在下一节介绍。<br>在本节当中，填写完的配置应该是类似这样的：</p><pre><code># Valine.# You can get your appid and appkey from https://leancloud.cn# more info please open https://valine.js.orgvaline:  enable: true  appid:  U7aB9evsRQXXqCqnPXG3cCjS-9Nh9j0Va # your leancloud application appid  appkey: 38D4FiUTxAYvTNaoAuF9Rm8G          # your leancloud application appkey  notify: false                             # mail notifier , https://github.com/xCss/Valine/wiki  verify: true                              # Verification code  placeholder: ヾﾉ≧∀≦)o来啊，快活啊!         # comment box placeholder  avatar: mm                                # gravatar style  guest_info: nick,mail,link                # custom comment header  pageSize: 10                              # pagination size</code></pre><p>然后！刷新你文章的那个页面！！！你看！是不是评论功能 <strong>已经出现啦</strong> ！！！</p><h1 id="配置-Valine-新回复的邮件提醒功能"><a href="#配置-Valine-新回复的邮件提醒功能" class="headerlink" title="配置 Valine 新回复的邮件提醒功能"></a>配置 Valine 新回复的邮件提醒功能</h1><p>哎呀，其实我一开始没抱太大希望马上就能有大佬们回复我，偶然打开主页一看，发现评论数 4 ！！！<br>我们何不让这样的快乐迈着小碎步跑到邮箱来敲门呢？！<br>接下来，我使用了很强大的神器！Baidu！！搜索到了邮件提醒的方案。<br>这个功能是 <strong>赵俊大大</strong> 基于 LeanCloud 云引擎实现的，这是原贴链接 <a href="http://www.zhaojun.im/hexo-valine-admin/" target="_blank" rel="noopener">Hexo 优化 — Valine 扩展之邮件通知</a>。<br>以下内容是我自己配置时的步骤，撰写时间是 <strong>2018.6.17</strong>，因为 <strong>赵俊大大</strong> 还在更新功能，所以以后配置过程可能会有变化。</p><h2 id="添加代码库地址"><a href="#添加代码库地址" class="headerlink" title="添加代码库地址"></a>添加代码库地址</h2><p>我们打开刚才我们在 LeanCloud 创建好的应用，然后从左往右依次点击下图中红框标记的按钮，进入到云引擎设置界面。<br>然后我们在最右侧红框中填写 <strong>赵俊大大</strong> 所编写的 <code>Valine-Admin</code> 扩展的 Git 地址，填写完后别忘记点击保存哟~<br> <strong>赵俊大大</strong> 所编写 <code>Valine-Admin</code> 扩展的 Git 地址：<code>https://github.com/zhaojun1998/Valine-Admin</code></p><p><img src="/posts/2018/add-valine-to-your-blog/set-up-cloud-engine-git-address.png" alt="set-up-cloud-engine-git-address"></p><h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><p>在我们添加好代码库地址后，在同一页面，往下拉，我们可以看到“自定义环境变量”，然后我们需要在下方添加一些环境变量。</p><p><img src="/posts/2018/add-valine-to-your-blog/add-env-overview.png" alt="add-env-overview"></p><p>其中，必须要填写的环境变量如下：</p><table><thead><tr><th>环境变量名</th><th>作用和使用方法</th></tr></thead><tbody><tr><td><code>SITE_NAME</code></td><td>你博客的名称，显示在邮件中，如 <code>十一種情緒的堆棧</code></td></tr><tr><td><code>SITE_URL</code></td><td>博客的地址, 最后不要加 / ，如 <code>https://11.tt</code></td></tr><tr><td><code>SMTP_USER</code></td><td>SMTP 服务的用户名，一般为邮箱地址，如 <a href="mailto:`no-reply@11.tt">`no-reply@11.tt</a>`</td></tr><tr><td><code>SMTP_PASS</code></td><td>SMTP 密码，一般为授权码，而不是邮箱的登陆密码，请自行查询对应邮件服务商的获取方式。如 <code>password</code></td></tr><tr><td><code>SMTP_SERVICE</code></td><td>邮件服务提供商，支持 QQ、163、126 等，填写该变量就不用单独配置 SMTP 服务器等内容，全部支持的邮箱服务商请参考 <a href="https://nodemailer.com/smtp/well-known/#supported-services" target="_blank" rel="noopener">Nodemailer Supported services</a> 中列出的服务商，此处填写列出服务商中的代号就行，如QQ企业邮箱代号为 <code>QQex</code>，在此处就填写 <code>QQex</code></td></tr><tr><td><code>SENDER_NAME</code></td><td>发送提醒邮件时，邮件寄件人的名称，如 <code>评论提醒——十一種情緒的堆棧</code></td></tr></tbody></table><p>另外，还有一部分可选的环境变量如下：</p><table><thead><tr><th>环境变量名</th><th>作用和使用方法</th></tr></thead><tbody><tr><td><code>TO_EMAIL</code></td><td>指定站长收信邮箱，默认值为 SITE_USER。用于 SMTP 发件人与站长收件人不一致的情况下使用</td></tr><tr><td><code>TEMPLATE_NAME</code></td><td>配置提醒邮件使用的主题，默认值为 default，可选值为 rainbow，即上方演示的彩虹样式，此配置会去寻找 template{TEMPLATE_NAME} 目录下的 notice.ejs 与 send.ejs 模板文件，分别用于通知站长和通知游客，另外欢迎到 <a href="http://www.zhaojun.im/hexo-valine-admin/" target="_blank" rel="noopener">原贴</a> 提供邮件主题样式</td></tr></tbody></table><p>如果你的邮件服务商不在上方列表中，又或是我们有很多同志自己搭建了强大的邮件服务器，不受那些限制多多的邮件服务商困扰，那么 <strong>赵俊大大</strong> 同样给大家提供了解决方案，我们只需要在环境变量中单独配置 SMTP 服务器地址即可，需要配置的环境变量如下：</p><table><thead><tr><th>环境变量名</th><th>作用和使用方法</th></tr></thead><tbody><tr><td><code>SMTP_HOST</code></td><td>邮件服务提供商 SMTP 地址，此项需要自行查询或询问服务商，如 <code>smtp.qq.com</code></td></tr><tr><td><code>SMTP_PORT</code></td><td>邮件服务提供商 SMTP 端口, 此项需要自行查询或询问服务商，如 <code>465</code></td></tr><tr><td><code>SMTP_SECURE</code></td><td>是否启用加密, 默认为 true，一般不需要设置，如有特殊请自行配置，此项需要自行查询或询问服务商。</td></tr></tbody></table><p><strong>请注意，如果启用了自定义邮件服务商，那么请删除上方必选环境变量中的 <code>SMTP_SERVICE</code> 变量，只有当 SMTP_SERVICE 未配置时才会启用自定义邮件服务！！！</strong></p><p>填写好环境变量后，你的环境变量应该是类似这样的：</p><p><img src="/posts/2018/add-valine-to-your-blog/add-env-done.png" alt="add-env-done"></p><h2 id="添加-Web-主机域名"><a href="#添加-Web-主机域名" class="headerlink" title="添加 Web 主机域名"></a>添加 Web 主机域名</h2><p>为了使用我们的管理界面，我们需要一个主机的域名，使用免费的即可，没有太大影响，如果你需要使用自定义的域名，域名必须要备案才可以哦，可以自行研究。</p><p><img src="/posts/2018/add-valine-to-your-blog/add-cloud-domain.png" alt="add-cloud-domain"></p><p>好啦！一切准备就绪啦！</p><h2 id="部署源码"><a href="#部署源码" class="headerlink" title="部署源码"></a>部署源码</h2><p>在万事具备之后，我们终于要开始请东风咯！<br>我们打开刚才我们在 LeanCloud 配置好的应用，然后从左往右依次点击下图中红框标记的按钮，进入到云引擎 Git 源码部署界面。</p><p><img src="/posts/2018/add-valine-to-your-blog/set-up-cloud-engine-overview.png" alt="set-up-cloud-engine-overview"></p><p>然后选择需要配置的分支，并勾选下载最新依赖，额也可以不下的其实…如图所示填写和勾选：</p><p><img src="/posts/2018/add-valine-to-your-blog/set-up-cloud-engine-branch.png" alt="set-up-cloud-engine-branch"></p><p>然后点击部署，静静等待哦！<strong>千万不要关闭页面和瞎点！不然会中止的！</strong></p><p><img src="/posts/2018/add-valine-to-your-blog/deploy-cloud-engine.png" alt="deploy-cloud-engine"></p><p>在部署完成后，页面就变成了这个样子~</p><p><img src="/posts/2018/add-valine-to-your-blog/deploy-cloud-engine-done.png" alt="deploy-cloud-engine-done"></p><p>然后我们需要像这样重启一下容器，以保证部署好的服务开始运行：</p><p><img src="/posts/2018/add-valine-to-your-blog/restart-docker.png" alt="restart-docker"></p><p><strong>重启完之后，我们只需要将前文中提到的主题中 Valine 的配置文件里 <code>notify</code> 字段设置为 <code>true</code> 即可开启新评论邮件提醒功能啦！</strong><br><strong>对了，弄好之后别忘了 <code>hexo d</code> 将新的静态文件传到 Coding 和 Github 哦！</strong></p><h2 id="免费版云引擎定时启动"><a href="#免费版云引擎定时启动" class="headerlink" title="免费版云引擎定时启动"></a>免费版云引擎定时启动</h2><p>大家在使用 Leancloud 时可能也看到了相关的提示，免费版的体验实例每天有 6 小时的强制休眠时间，有 1 小时没有任何操作就会自动休眠。<br>升级免费版即可完美解决这个问题，那么除了升级收费版(1天1元还好不贵)以外，我们还有什么变通方法呢？</p><p><img src="/posts/2018/add-valine-to-your-blog/free-engine-have-to-sleep-six-hour-everyday.png" alt="free-engine-have-to-sleep-six-hour-everyday"></p><p>当每次有评论时访问到该引擎时，如果该引擎为休眠状态，那么就会启动这个引擎。<br>基于这种情况，我们通过自己的服务器在北京时间每天 7-23 点这个评论高发时间每隔 1 小时使用 <code>curl</code> 命令访问一次自己在 leancloud 生成的域名即可保证这段时间云引擎不休眠。</p><p>我们在 Linux 机器上添加计划任务，使用 <code>crontab -e</code> 命令，在下方添加一行：</p><pre><code>*/20 7-23 * * * curl https://你在上方添加的Web主机域名.leanapp.cn</code></pre><p>保存后会提示 <code>crontab: installing new crontab</code>，已经自动生效。</p><h2 id="添加后台管理用户"><a href="#添加后台管理用户" class="headerlink" title="添加后台管理用户"></a>添加后台管理用户</h2><p>我们现在已经可以通过访问我们刚才配置的 Web 主机域名已经可以访问后台页面了，后台页面可以提供删除功能，据 <strong>赵俊大大</strong> 说，他将在将来为后台添加更多的功能哦！<br>首先我们需要添加一个可以登录的用户，红框标注的 username、password 和 email 为必填项：</p><p><img src="/posts/2018/add-valine-to-your-blog/add-administrator.png" alt="add-administrator"></p><p>然后访问我们的 Web 主机域名，输入用户名/邮箱和密码，就可以登录到后台页面啦！像这样：</p><p><img src="/posts/2018/add-valine-to-your-blog/admin-comments.png" alt="admin-comments"></p><p>OK！大功告成啦！QwQ感觉这一张写得好像报流水账一样…这样不好不好…我回头慢慢改进…</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>今天我们完成了给使用 Next 主题的 Hexo 博客添加基于 LeanCloud 的 Valine 评论功能，并为它完善了邮件提醒功能，这里再次感谢 <strong><a href="http://www.zhaojun.im" target="_blank" rel="noopener">赵俊大大</a></strong> 编写的邮件提醒扩展~<br>另外，附上在开启 Valine 评论功能后我现在这一部分的配置：</p><pre><code># Valine.# You can get your appid and appkey from https://leancloud.cn# more info please open https://valine.js.orgvaline:  enable: true  appid:  U7aB9evsRQXXqCqnPXG3cCjS-9Nh9j0Va # your leancloud application appid  appkey: 38D4FiUTxAYvTNaoAuF9Rm8G          # your leancloud application appkey  notify: true                              # mail notifier , https://github.com/xCss/Valine/wiki  verify: true                              # Verification code  placeholder: ヾﾉ≧∀≦)o来啊，快活啊!         # comment box placeholder  avatar: mm                                # gravatar style  guest_info: nick,mail,link                # custom comment header  pageSize: 10                              # pagination size</code></pre><p><strong>友情提示兼职常见问题</strong></p><ol><li>在开启这个 Valine 后，如果 appid 和 appkey 填写正确，就会显示评论框；</li><li>如果提示安全域名问题，请看<a href="#配置安全域名">这里</a>添加安全域名；</li><li>文中用到的 appid 和 appkey 仅作演示，文章写完后就会删除应用，不要抄作业哦！</li><li>如果修改了博客链接的生成方式，旧的评论需要在 LeanCloud 云储存中修改相应记录的地址！</li><li>你们回复我的时候写上邮箱好不好啦！这样我回复你们之后，你们邮箱就可以收到通知啦！</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/posts/2018/add-valine-to-your-blog/add-valine-to-your-blog.png&quot; alt=&quot;add-valine-to-your-blog&quot;&gt;&lt;/p&gt;
&lt;p&gt;哇真的超开心你们知道嘛！我的上一篇文章“&lt;a href=&quot;https://11.tt/posts/2018/set-up-Hexo-with-Coding-Github-https/&quot;&gt;[Hexo]基于Hexo+Coding+Github搭建个人博客的全过程&lt;/a&gt;”发布不到24个小时就有超过5位大佬来评论了！我之前那个lowlow的博客！一年多都没有人给我留个言评个论！真的超级开心！超级激动！感觉我写了好几天的文章得到了认可！&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://11.tt/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://11.tt/tags/Hexo/"/>
    
      <category term="Leancloud" scheme="https://11.tt/tags/Leancloud/"/>
    
      <category term="nodejs" scheme="https://11.tt/tags/nodejs/"/>
    
      <category term="git" scheme="https://11.tt/tags/git/"/>
    
      <category term="https" scheme="https://11.tt/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>基于Hexo+Coding+Github搭建个人博客的全过程</title>
    <link href="https://11.tt/posts/2018/set-up-hexo-with-coding-and-github/"/>
    <id>https://11.tt/posts/2018/set-up-hexo-with-coding-and-github/</id>
    <published>2018-06-12T05:00:00.000Z</published>
    <updated>2019-04-21T06:49:03.396Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/posts/2018/set-up-hexo-with-coding-and-github/set-up-hexo-with-coding-and-github.png" alt="set-up-hexo-with-coding-and-github"></p><p>感觉平时工作、瞎倒腾的过程中会遇到好玩的技术、会跳进很深的坑😁，又或是遇到很复杂的情况，以前觉得烂笔头很方便，但是技术越来越复杂加上有各种图片，用笔来做笔记真的是挺落后的了，于是升起了写博客做记录的念头。<br><a id="more"></a><br>一开始我是使用 Nginx+Wordpress 来搭建个人博客的，但是因为要时常检查服务器状况；最近又有一个同学服务器被入侵，删光数据库还装了矿机；阿里的主机面临到期，续费只挂个博客感觉浪费；再加上有了一见钟情的 Hexo+Next 主题并且发现了 Coding和Github 上的 Pages 服务！这不立马就投奔新颖的极简风博客啦！</p><hr><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>我感觉可能是因为最近疯狂改论文，所以开头部分用了“概述”这个标题😅…<br>言归正传，这次我搭建 Hexo 使用的本地环境如下：</p><pre><code>* Windows 10 1803* node-v8.11.2-x64* git version 2.17.1.windows.2* hexo-v3.7.1</code></pre><p>肯定不满足于默认的主题啊，所以使用了 <code>next-muse-v6.3.0</code> 这个主题进行美化~<br>接下来添加网站流量统计以及进行一些小细节的优化。<br>因为心比较大，感觉会有国外大佬来看我的网站，所以为了提高访问速度，我分别将网站部署到 <a href="https://coding.net/" target="_blank" rel="noopener">Coding</a> 和 <a href="https://github.com/" target="_blank" rel="noopener">Github</a> 以提高国内和国外的访问速度，同时在上面分别启用 https。<br>然后使用 <a href="https://cloud.tencent.com/product/cns" target="_blank" rel="noopener">腾讯云解析</a> 来进行自定义域名的解析。</p><hr><h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><p>这部分主要是将<a href="#概述">概述</a>中所提到本地环境的安装过程进行记录和介绍~<br>一般情况下，照着做都能成功的…<br>其实，一般熟手看到这篇博文的环境安装部分…可能只是…来找几个…官网链接…吧…</p><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>Hexo是基于 Node.js 开发的(应该是)，所以我们首先需要在本地安装 Node.js。<br>作为一个新世纪的技术行业接班人，我们自然要通过官网来下载安装各种程序了！<br>打开 <a href="https://nodejs.org" target="_blank" rel="noopener">Node.js 官网 (https://nodejs.org)</a> 我们就可以看到映入眼帘的就是直接推荐你系统下载安装的页面：</p><p><img src="/posts/2018/set-up-hexo-with-coding-and-github/nodejs-download.png" alt="nodejs-download"></p><p>我们点击图中红框内的按钮，下载 <code>node-v8.11.2-x64.msi</code> 安装文件。<br>下载完成后，打开 <code>node-v8.11.2-x64.msi</code> 进行安装。<br><strong>除非你要修改安装路径或特殊需求，否则一路默认安装即可。</strong><br>安装完成后，打开 Powershell 或 cmd，输入 <code>node -v</code>，若为以下输出，则安装成功。</p><pre><code>Windows PowerShell版权所有 (C) Microsoft Corporation。保留所有权利。PS C:\Users\Miaia&gt; node -vv8.11.2PS C:\Users\Miaia&gt;</code></pre><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><p>我们需要通过 Git 来下载一些主题文件，当然最重要的功能是将生成的网页文件提交到下文中创建的git仓库中去。<br>我们仍然通过打开 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git 官网下载页 (https://git-scm.com/downloads)</a> 来下载 Git 的安装程序。<br>在选择适用系统后，为了方便起见，我选择了安装版的 Git 进行下载(如下图)。</p><p><img src="/posts/2018/set-up-hexo-with-coding-and-github/git-download.png" alt="git-download"></p><p>我们点击图中红框内的链接，下载 <code>Git-2.17.1.2-64-bit.exe</code> 安装文件。<br>下载完成后，打开 <code>Git-2.17.1.2-64-bit.exe</code> 进行安装。<br><strong>除非你了解你在安装时做出的修改，否则一路默认安装即可。</strong><br>安装完成后，打开 Powershell 或 cmd，输入 <code>git --version</code>，若为以下输出，则安装成功。</p><pre><code>Windows PowerShell版权所有 (C) Microsoft Corporation。保留所有权利。PS C:\Users\Kiana&gt; git --versiongit version 2.17.1.windows.2PS C:\Users\Kiana&gt;</code></pre><p><strong>因为我使用的是 Windows 10 系统，所以上面两个程序我都安装了 Windows 版，使用其他系统的同学我相信你们安装这一步能做到的😁。</strong></p><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><h3 id="打开-Git-Bash"><a href="#打开-Git-Bash" class="headerlink" title="打开 Git Bash"></a>打开 Git Bash</h3><p>在安装完 Windows 版 Git 以后，我们在资源管理器任意文件夹空白处右键即可看到如下界面：</p><p><img src="/posts/2018/set-up-hexo-with-coding-and-github/open-git-bash.png" alt="open-git-bash"></p><p>我们单击 <code>Git Bash Here</code> 打开 Git Bash，可以看到以下界面：<br>(Mac、Linux 用户打开终端即可)</p><p><img src="/posts/2018/set-up-hexo-with-coding-and-github/git-bash.png" alt="git-bash"></p><p>我们接下来的安装步骤以及以后所有的 hexo 页面生成、部署等工作都在在这个 Git Bash 中完成。</p><h3 id="使用淘宝-NPM-镜像源-可选"><a href="#使用淘宝-NPM-镜像源-可选" class="headerlink" title="使用淘宝 NPM 镜像源(可选)"></a>使用淘宝 NPM 镜像源(可选)</h3><p><strong>由于国内访问官方 NPM 源速度较慢，为了一劳永逸，此处可以将 NPM 源更换为了淘宝 NPM 镜像源。</strong><br><strong>请注意，如果你觉得你的 NPM 源速度够快，更换镜像源这部分可选择性使用</strong><br>我们在 Git Bash 中输入如下指令</p><pre><code># 将官方 NPM 源更换为 淘宝 NPM 镜像源$ npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre><p><strong>请注意，如需使用上方安装的淘宝源，需要在使用 <code>npm</code> 命令时将其改为 <code>cnpm</code></strong></p><h3 id="安装-Hexo-命令行工具"><a href="#安装-Hexo-命令行工具" class="headerlink" title="安装 Hexo 命令行工具"></a>安装 Hexo 命令行工具</h3><p>即安装 Hexo 主体，需要在命令行界面进行操作，以下命令来自 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo 官方网站</a>。</p><pre><code>$ npm install hexo-cli -g</code></pre><p>请耐心稍等一会儿，如果在安装过程中头部出现 <code>WARN</code> ，可能是因为某些内容不支持 Windows，请不要担心，并不影响实际使用。<br>在安装完成后，输入 <code>hexo -v</code>，若出现类似以下内容，则 Hexo 已经安装成功。</p><pre><code>$ hexo -vhexo: 3.7.1hexo-cli: 1.1.0os: Windows_NT 10.0.17134 win32 x64http_parser: 2.8.0node: 8.11.2...</code></pre><hr><h1 id="Hexo-博客初始化"><a href="#Hexo-博客初始化" class="headerlink" title="Hexo 博客初始化"></a>Hexo 博客初始化</h1><h2 id="创建博客主目录"><a href="#创建博客主目录" class="headerlink" title="创建博客主目录"></a>创建博客主目录</h2><p>在电脑中任意位置创建一个任意名称的文件夹，例如，我在D盘创建了一个名为 <code>myblog</code> 的文件夹。</p><p><img src="/posts/2018/set-up-hexo-with-coding-and-github/create-blog-main-folder.png" alt="create-blog-main-folder"></p><h2 id="初始化-Hexo-主目录"><a href="#初始化-Hexo-主目录" class="headerlink" title="初始化 Hexo 主目录"></a>初始化 Hexo 主目录</h2><p>进入上方创建的文件夹，即双击进入 <code>myblog</code> 文件夹。<br>然后右键打开 <code>Git Bash</code> 。<br>在 Git Bash 中输入下方命令：</p><pre><code>$ hexo init</code></pre><p>接下来会自动 clone 需要的文件以及默认的主题到这个文件夹里面，并会获得类似下方的输出：</p><pre><code>$ hexo initINFO  Cloning hexo-starter to D:\myblogCloning into &apos;D:\myblog&apos;......Unpacking objects: 100% (65/65), done.Submodule &apos;themes/landscape&apos; (https://github.com/hexojs/hexo-theme-landscape.git) registered for path &apos;themes/landscape&apos;...npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;})added 401 packages in 12.941sINFO  Start blogging with Hexo!</code></pre><p>我们看到 <code>INFO  Start blogging with Hexo!</code> 就可以知道初始化成功啦！我还没遇到初始化失败的…<br>上面那些 <code>WARN</code> 都可以忽略的，不用担心，程序员里只看得到 ERROR，😁😁😁hhh~<br>接下来要安装一些必要的依赖，同样也非常简单，只要在 Git Bash 中输入：</p><pre><code>$ npm install</code></pre><p>然后可以看到输出中有一句：</p><pre><code>up to date in 1.999s</code></pre><p>然后 Hexo 博客就真的已经！非常简单滴 <strong>搭！建！完！成！啦！✿✿ヽ(°▽°)ノ✿</strong></p><h2 id="生成并运行博客"><a href="#生成并运行博客" class="headerlink" title="生成并运行博客"></a>生成并运行博客</h2><p>在我们进行进一步优化之前，我们先来看看我们搭建好的博客~<br><strong>以下命令要在 Git Bash 中输入哦！</strong><br>首先我们要先生成静态页面，用到的命令是：</p><pre><code>$ hexo g</code></pre><p>其中，<code>g</code> 的全称是 <code>generate</code>，当然也可以用 <code>hexo generate</code> 这条命令，但上方命令更简便。<br>输入完后可以看到类似以下输出：</p><pre><code>$ hexo gINFO  Start processingINFO  Files loaded in 341 msINFO  Generated: index.html...INFO  Generated: css/images/banner.jpgINFO  Generated: css/fonts/fontawesome-webfont.svgINFO  28 files generated in 712 ms</code></pre><p>一切准备就绪，就差一把东风开启服务器，输入以下命令吹风，偶不，是开启本地服务器：</p><pre><code>$ hexo s</code></pre><p>其中， <code>s</code> 的全称是 <code>server</code>，当然也可以用 <code>hexo server</code> 这条命令，但上方命令更简便。<br>输入之后我们可以看到以下输出：</p><pre><code>$ hexo sINFO  Start processingINFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</code></pre><p>显而易见，我们的博客已经运行在本地4000端口上啦！<br>打开浏览器，在地址输入 <code>http://localhost:4000/</code>，我们就可以看到激动人心的界面啦！<br><strong>友情提示：平常只使用 Windows 而不熟悉 Linux 的小伙伴可能不知道 <code>Ctrl+C</code> 在 Linux 中表示取消操作，而 Git Bash 正是使用了 Bash 这种 shell。所以这里如果要进行复制，可以右键或者通过 <code>Ctrl+Insert</code> 来实现复制操作。类似地，粘贴操作也不能使用 <code>Ctrl+C</code>，需要改为 <code>Shift+Insert</code>。</strong></p><p><img src="/posts/2018/set-up-hexo-with-coding-and-github/origin-hexo-page.png" alt="origin-hexo-page"></p><hr><h1 id="博客美化"><a href="#博客美化" class="headerlink" title="博客美化"></a>博客美化</h1><p>接下来我们要让博客变得好看起来！<br>那天我领导问我为什么不用某ssh客户端，在他给我罗列了N条优点之后，我和他说，我这个好看！O(∩_∩)O<br>好看！好看！好看很重要！谁不希望自己的博客在能实现博客功能的基础上还能更好看呢？<br>本来我打算这章开始就单独放到一篇文章里面，但是后来想想还是索性都放到这里面算了，毕竟是记录我这个网站的建立过程，分开来优点怪怪的…<br>好了Y(^o^)Y，话不多说！(已经说了一堆了XD)我们开始美化博客啦！</p><h2 id="使用-Next-Muse-主题"><a href="#使用-Next-Muse-主题" class="headerlink" title="使用 Next-Muse 主题"></a>使用 Next-Muse 主题</h2><p>当时会下定决心重做整个博客的最主要原因就是，看到了使用了 Next-Muse 这个主题的网站！<br>真的是一见钟情有木有有木有！<br>Next-Muse 主题是 Next 主题四种设计中的其中一种，其他还有 Mist，Pisces 和 Gemini。<br>首先附上 Next 的 Github 链接：<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">hexo-theme-next (https://github.com/theme-next/hexo-theme-next)</a><br>在这个仓库里面可以看到不同主题设计的 demo 网址~<br>o(<em>^＠^</em>)o吼吼！接下来开始操作啦！</p><h3 id="下载-Next-主题"><a href="#下载-Next-主题" class="headerlink" title="下载 Next 主题"></a>下载 Next 主题</h3><p>首先，我们要将 Next 主题下载到本地。<br>在网站根目录右键打开 Git Bash，输入以下命令将主题下载到本地：</p><pre><code>$ git clone https://github.com/theme-next/hexo-theme-next themes/next</code></pre><p>这个只是非常简单的克隆操作，除非克隆到一半的时候网突然断了…否则一般来说是不会失败哒！</p><h3 id="启用-Next-主题"><a href="#启用-Next-主题" class="headerlink" title="启用 Next 主题"></a>启用 Next 主题</h3><p>我们在网站根目录下可以看到有一个名为 <code>_config.yml</code> 的配置文件，我们用编辑器打开它，搜索 <code>theme</code>，我们可以找到以下内容：</p><pre><code># Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: landscape</code></pre><p>我们要将其中的 <code>landscape</code> 修改为我们要是用的 <code>next</code>，修改完如下所示：</p><pre><code># Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next</code></pre><p>然而这个网站默认是英文的呢，所以我们要修改一下显示语言，完美支持中文的哦！仍然在这个配置文件中，搜索 <code>language</code>，我们可以找到以下内容：</p><pre><code>...author: John Doelanguage:timezone:...</code></pre><p>我们要在其中的 <code>language</code> 的冒号后面添加 <code>zh-CN</code>。<br><strong>请注意：根据语法要求，冒号需要为英文冒号，冒号后需要有一个空格。</strong><br>修改后，如下所示：</p><pre><code>...author: John Doelanguage: zh-CNtimezone:...</code></pre><h3 id="查看已启用的主题"><a href="#查看已启用的主题" class="headerlink" title="查看已启用的主题"></a>查看已启用的主题</h3><p>我们在 Git Bash 依次输入下方三条命令：</p><pre><code>$ hexo clean$ hexo g$ hexo s</code></pre><p>其中，<code>hexo clean</code> 的作用是删除本地已经生成的所有静态文件，哈复习一下！有没有忘记下面两条是什么命令呀？忘记了的话，请看<a href="#生成并运行博客">这里</a>哦！<br>每一条命令输完都会有对应的输出，因为比较简单或者上方出现过，所以在这里我就省略啦~<br>输入完 <code>hexo s</code> 启动服务器后，我们再次打开浏览器，在地址栏输入 <code>http://localhost:4000/</code>，我们可以看到我们的主题已经启用成功啦！</p><p><img src="/posts/2018/set-up-hexo-with-coding-and-github/next-theme-enabled.png" alt="next-theme-enabled"></p><p><strong>到这里，我们的主题修改已经完成啦！</strong></p><h2 id="细节美化"><a href="#细节美化" class="headerlink" title="细节美化"></a>细节美化</h2><h3 id="页面底部跳动的爱心"><a href="#页面底部跳动的爱心" class="headerlink" title="页面底部跳动的爱心"></a>页面底部跳动的爱心</h3><p><strong>拉到本页面底部看一下~那个跳动的爱心是不是超好看！！！来来来我教你怎么弄！</strong><br>首先我来为难一下选择困难症们！！！先去这里选择一个图标！！→→→ <a href="https://fontawesome.com/v4.7.0/icons/" target="_blank" rel="noopener">The Icons</a><br>然后复制这个图标的代码，如我现在选择下图中的爱心，那么我要复制的内容就是下图红框中的 <code>fa-heartbeat</code>。</p><p><img src="/posts/2018/set-up-hexo-with-coding-and-github/copy-icon-code.png" alt="copy-icon-code"></p><p>然后我们需要找到主题的配置文件，定位到目录中 <code>themes/next/_config.yml</code>，<strong>请注意！这个配置文件与根目录中的配置文件不一样！不一样！我们不一样！</strong><br>同样是用编辑器打开这个配置文件，搜索 <code>footer</code>，我们可以看到以下内容：</p><pre><code>footer:  # Specify the date when the site was setup.  # If not defined, current year will be used.  #since: 2015  # Icon between year and copyright info.  icon:    # Icon name in fontawesome, see: https://fontawesome.com/v4.7.0/icons    # `heart` is recommended with animation in red (#ff0000).    name: user    # If you want to animate the icon, set it to true.    animated: false    # Change the color of icon, using Hex Code.    color: &quot;#808080&quot;</code></pre><p>然后我们将前面复制到的代码替换 <code>name</code> 字段中的 <code>user</code>，并且需要在前面加上 <code>fas</code>，需要爱心跳动，那么我们需要修改 <code>animated</code> 字段为 <code>true</code>，修改图标 <code>color</code> 为红色 <code>#ff0000</code>，这部分修改完如下所示：</p><pre><code>footer:  # Specify the date when the site was setup.  # If not defined, current year will be used.  #since: 2015  # Icon between year and copyright info.  icon:    # Icon name in fontawesome, see: https://fontawesome.com/v4.7.0/icons    # `heart` is recommended with animation in red (#ff0000).    name: fas fa-heartbeat    # If you want to animate the icon, set it to true.    animated: true    # Change the color of icon, using Hex Code.    color: &quot;#ff0000&quot;</code></pre><p>嘻嘻！刷新一下页面，看看是不是下面有一颗躁动的心脏啦~~</p><h3 id="页面访问统计"><a href="#页面访问统计" class="headerlink" title="页面访问统计"></a>页面访问统计</h3><p>我们仅仅需要非常简单地修改一个字段，就可以给页面添加页面的访问统计功能啦！！！<br>仍然是打开主题的配置文件 <code>themes/next/_config.yml</code>，搜索 <code>busuanzi_count</code>，可以看到以下内容：</p><pre><code>busuanzi_count:  enable: false  total_visitors: true  total_visitors_icon: user  total_views: true  total_views_icon: eye  post_views: true  post_views_icon: eye</code></pre><p>我们只需要非常简单地将 <code>enable</code> 字段修改为 <code>true</code>，就可以为页面添加访问统计功能啦！修改好后刷新页面！就可以看到：</p><p><img src="/posts/2018/set-up-hexo-with-coding-and-github/add-page-count.png" alt="add-page-count"></p><p>是不是真的很简单呀！！<br><strong>好啦~简单的美化部分就到这里啦！接下来我们要部署到 coding 和 Github 了哦！</strong></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>我们要开始部署啦！<br>coding 是国内的，Github 是国外的，因为一些众所周知的原因，Github 时常会访问比较慢呀~<br><strong>这里不得不吐槽一下！coding 普通会员的访问速度真的很感人，非常慢…所以我还是开了个黄金会员…相比之下，Github 就比较良心了，挺快的…国内…好像也挺快的…</strong></p><h2 id="部署到-coding"><a href="#部署到-coding" class="headerlink" title="部署到 coding"></a>部署到 coding</h2><h3 id="创建-coding-项目"><a href="#创建-coding-项目" class="headerlink" title="创建 coding 项目"></a>创建 coding 项目</h3><p>首先，一如既往，先发一下 coding 的官网链接：<a href="https://coding.net/" target="_blank" rel="noopener">Coding (https://coding.net/)</a><br>然后注册一个账号这我就不说了吧…<br>然后新建一个项目，项目名称为你注册时填写的用户名后面加上 <code>.coding.me</code>，比如我的就是 <code>miaia.coding.me</code>，其余部分默认就行啦！！！你信我！！！<br><strong>请非常非常注意！<code>.coding.me</code> 前面填写的用户名必须是你的用户名！！！不然是不能用的哦！！！真的注意！！！</strong></p><p><img src="/posts/2018/set-up-hexo-with-coding-and-github/create-coding-project.png" alt="create-coding-project"></p><h3 id="创建公钥"><a href="#创建公钥" class="headerlink" title="创建公钥"></a>创建公钥</h3><p>然后我们需要在本地创建一个公钥，打开 Git Bash，输入如下命令，然后回车回车回车直到创建完毕：</p><pre><code>$ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</code></pre><p>我们可以看到类似的输出如下：</p><pre><code>$ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;Generating public/private rsa key pair.Enter file in which to save the key (/c/Users/Kiana/.ssh/id_rsa):Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in /c/Users/Kiana/.ssh/id_rsa.Your public key has been saved in /c/Users/Kiana/.ssh/id_rsa.pub.The key fingerprint is:SHA256:w5YVly1GUy+HlmBtBUd2wSigTK5LYrvH54LRPNzBGhs Kiana@KianaThe key&apos;s randomart image is:+---[RSA 4096]----+|       . .o.*===B||      + .  =+++B.||      .+  ...o= o||     E.+ o   . o ||   o+o* S        ||  ..+B.o .       ||   .+..          ||   ..+ .         ||   .. +.         |+----[SHA256]-----+</code></pre><p>我们可以看到生成的密钥在路径 <code>/c/Users/Kiana/.ssh/id_rsa.pub</code>，<strong>我们直接打开这个文件，复制其中的所有内容</strong><br>然后复制到下图中并保存，这下你就可以随时进行 commit 啦！</p><p><img src="/posts/2018/set-up-hexo-with-coding-and-github/add-coding-ssh.png" alt="add-coding-ssh"></p><h3 id="配置库名并提交"><a href="#配置库名并提交" class="headerlink" title="配置库名并提交"></a>配置库名并提交</h3><p>我们打开根目录下的 <code>_config.yml</code>，搜索 <code>deploy</code>，可以看到以下内容：</p><pre><code>deploy:  type:</code></pre><p>我们需要将其修改为类似这样的形式：</p><pre><code>deploy:- type: git  repo:     coding: git@git.coding.net:miaia/miaia.coding.me.git</code></pre><p>然后我们需要安装一个提交的插件，在 Git Bash中输入：</p><pre><code>$ npm install hexo-deployer-git --save</code></pre><p>在安装完后，输入命令：</p><pre><code>$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></pre><p>正常情况下，我们就可以非常顺利地提交到库中啦！<br>这时候访问 <code>用户名.coding.me</code>，就可以看到你的页面咯！</p><h3 id="coding-配置自定义域名"><a href="#coding-配置自定义域名" class="headerlink" title="coding 配置自定义域名"></a>coding 配置自定义域名</h3><p>进入到项目页面，选择侧边栏中的 “Pages 服务”，如图：</p><p><img src="/posts/2018/set-up-hexo-with-coding-and-github/choose-pages-service.png" alt="choose-pages-service"></p><p>然后我相信你看到页面上的提示，能够非常容易地添加自定义域名并开启 https 哒！</p><p><img src="/posts/2018/set-up-hexo-with-coding-and-github/add-coding-domain.png" alt="add-coding-domain"></p><h2 id="部署到-Github"><a href="#部署到-Github" class="headerlink" title="部署到 Github"></a>部署到 Github</h2><h3 id="创建-Github-仓库"><a href="#创建-Github-仓库" class="headerlink" title="创建 Github 仓库"></a>创建 Github 仓库</h3><p>首先，一如既往，先发一下 Github 的官网链接：<a href="https://github.com/" target="_blank" rel="noopener">Github (https://github.com/)</a><br>然后注册一个账号这我就不说了吧…<br>然后新建一个仓库，项目名称为你注册时填写的用户名后面加上 <code>.github.io</code>，比如我的就是 <code>miaia.github.io</code>，其余部分默认就行啦！！！你信我！！！<br><strong>请非常非常注意！<code>.github.io</code> 前面填写的用户名必须是你的用户名！！！不然是不能用的哦！！！真的注意！！！</strong></p><p><img src="/posts/2018/set-up-hexo-with-coding-and-github/create-github-repository.png" alt="create-github-repository"></p><h3 id="添加公钥"><a href="#添加公钥" class="headerlink" title="添加公钥"></a>添加公钥</h3><p>我们前面已经在本地创建了一个密钥，生成的密钥在路径 <code>/c/Users/Kiana/.ssh/id_rsa.pub</code>。<br><strong>我们再次打开这个文件，复制其中的所有内容</strong><br>然后复制到下图中并保存，这下你就可以随时进行 commit 啦！</p><p><img src="/posts/2018/set-up-hexo-with-coding-and-github/add-github-ssh.png" alt="add-github-ssh"></p><h3 id="配置库名并提交-1"><a href="#配置库名并提交-1" class="headerlink" title="配置库名并提交"></a>配置库名并提交</h3><p>我们再次打开根目录下的 <code>_config.yml</code>，搜索 <code>deploy</code>，可以看到以下内容：</p><pre><code>deploy:- type: git  repo:     coding: git@git.coding.net:miaia/miaia.coding.me.git</code></pre><p>我们需要在其中添加 Github 库的地址，所以需要将其修改为类似这样的形式：</p><pre><code>deploy:- type: git  repo:     coding: git@git.coding.net:miaia/miaia.coding.me.git    github: git@github.com:miaia/miaia.github.io.git</code></pre><p>在安装完后，输入命令：</p><pre><code>$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></pre><p>正常情况下，我们就可以非常顺利地提交到两个库中啦！<br>这时候访问 <code>用户名.github.io</code>，就可以看到你的页面咯！</p><h3 id="Github-配置自定义域名"><a href="#Github-配置自定义域名" class="headerlink" title="Github 配置自定义域名"></a>Github 配置自定义域名</h3><p>进入到项目页面，选择 “Settings”，在该页面中往下拉找到如图位置：</p><p><img src="/posts/2018/set-up-hexo-with-coding-and-github/add-github-domain.png" alt="add-github-domain"></p><p>然后我相信你看到页面上的提示，能够非常容易地添加自定义域名并开启 https 哒！</p><h2 id="配置解析"><a href="#配置解析" class="headerlink" title="配置解析"></a>配置解析</h2><p><strong>这里我们要单独说一下 CNAME 解析的问题，因为我们要实现国内外访问不同的服务，所以需要分别设置解析，无论是腾讯云还是阿里云的解析服务，都能够很好滴区分国内外节点，我们需要将国内的 CNAME 设置到 <code>pages.coding.me</code>，将国外的 CNAME 设置到 <code>pages.github.io</code>，然后你就会发现，非常神奇啦！</strong></p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到这里，我们整个的建立和部署都已经基本完成了，我会把其他的诸如添加评论、SEO优化、谷歌分析等其他细节内容在下一篇日志当中给出，希望大家看了我的这个文章能够顺利滴搭建起自己的博客！当然也可以给我留言哦！结文撒花✿✿ヽ(°▽°)ノ✿</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/posts/2018/set-up-hexo-with-coding-and-github/set-up-hexo-with-coding-and-github.png&quot; alt=&quot;set-up-hexo-with-coding-and-github&quot;&gt;&lt;/p&gt;
&lt;p&gt;感觉平时工作、瞎倒腾的过程中会遇到好玩的技术、会跳进很深的坑😁，又或是遇到很复杂的情况，以前觉得烂笔头很方便，但是技术越来越复杂加上有各种图片，用笔来做笔记真的是挺落后的了，于是升起了写博客做记录的念头。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://11.tt/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://11.tt/tags/Hexo/"/>
    
      <category term="nodejs" scheme="https://11.tt/tags/nodejs/"/>
    
      <category term="git" scheme="https://11.tt/tags/git/"/>
    
      <category term="https" scheme="https://11.tt/tags/https/"/>
    
      <category term="Github" scheme="https://11.tt/tags/Github/"/>
    
      <category term="coding" scheme="https://11.tt/tags/coding/"/>
    
      <category term="windows10" scheme="https://11.tt/tags/windows10/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://11.tt/posts/2018/hello-world/"/>
    <id>https://11.tt/posts/2018/hello-world/</id>
    <published>2018-06-06T05:00:00.000Z</published>
    <updated>2019-04-21T06:49:03.160Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
